/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "stm32f103x6_gpio_driver.h"
#include "stm32f103x6_usart_driver.h"
#include "stm32f103x6_spi_driver.h"
#include "stm32f103x6_exti_driver.h"
#include "lcd.h"
#include "RFID_CARD.h"
#include "7_Segment_Binary.h"
#include "EEPROM.h"
#include "Keypad.h"


//||||||||||||||||||||||||||||||||RFID_CARD_Attributes_INIT .........................||||||||||||||||||||||||||||//
char Driver_ENTRY_ID[4];
char Driver_EXIT_ID[4];
DRIVER_ID_STATUS ID_ENTRY_Status;
DRIVER_ID_STATUS ID_EXIT_Status;
uint8_t extern GB_S_ENTRY_READRFID;
uint8_t extern GB_S_EXIT_READRFID;

//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


//||||||||||||||||||||||||||||||||GATE_Attributes_INIT & Slots .........................|||||||||||||||||||||||||//
uint16_t GATE_OPEN  = 1;
uint16_t GATE_CLOSE = 0;
int8_t  Counter_slots=0;
int8_t  Available_Slots=3;

//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


//||||||||||||||||||||||||||||||||Buzzer & LED Attributes_INIT.........................|||||||||||||||||||||||||//
typedef enum
{
	Turn_on,
	Turn_off

}Buzzer_State;

typedef enum
{
	Turn_On,
	Turn_Off

}LED_State;
//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


//||||||||||||||||||||||||||||||||EEPROM Attributes_INIT.........................|||||||||||||||||||||||||//
#define Password_ADDRESS     (uint16_t)(0x0000)
#define ID1_ADDRESS          (uint16_t)(0x00010)
#define ID2_ADDRESS 	     (uint16_t)(0x00020)
#define ID3_ADDRESS 		 (uint16_t)(0x00030)
#define IDs_Num_ADDRESS		 (uint16_t)(64)

uint16_t ID_Address=0x0010;
uint8_t Admin_Password[4]="1111";
uint8_t PasswordRx_Buff[4];
//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


//||||||||||||||||||||||||||||||||KEYPAD Attributes_INIT.........................|||||||||||||||||||||||||//
typedef enum
{
	Right,
	Wrong

}Password_Status;


char Keypad_char;
uint8_t Keypad_Integer=0;
uint8_t IDs_Num=3;
uint8_t Keypad_Counter=0;
uint8_t Keypad_IDs_Counter=0;
uint8_t Keypad_Pass[4];
uint8_t Keypad_ID[4];
uint8_t Loop_Stop=0;
uint8_t Loop2_Stop=0;

//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


//||||||||||||||||||||||||||||||||Definitions .........................|||||||||||||||||||||||||||||||||||||||||//
void Delay_ms(uint32_t time_ms);
void RFID_ENTRY(void);
void RFID_EXIT(void);
void Gate_Entry_Init();
void Gate_EXIT_Init();
void GATE_ENTRY_COMMAND(uint8_t Command);
void GATE_EXIT_COMMAND(uint8_t Command);
void BUZZER_INIT(GPIO_TypedDef* GPIOx , uint16_t PinNumber);
void BUZZER_Turn(GPIO_TypedDef* GPIOx,uint16_t PinNumber,Buzzer_State B_statte);
void LED_INIT(GPIO_TypedDef* GPIOx , uint16_t PinNumber);
void LED_Turn(GPIO_TypedDef* GPIOx,uint16_t PinNumber,LED_State L_statte);
Password_Status Password_Check(char* Password_KEYPAD,uint8_t Pass_Length,char* Password_EEPROM);
void Admin_Control(void);
void EXTI_CALLBACK(void);
//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


void EXTI15_CALLBACK(void)
{
	//||||||||||||||||||||||||||||||||||||||||||||||Admin_Control||||||||||||||||||||||||||||||||||||||||||||||||||//
	Admin_Control();
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//
}


int main(void)
{


	//|||||||||||||||||||||EXTI_Init.................................||||||||||||||||||||||||||||||||||||||||||||||//
	EXTI_AFIO_MAPPING_t EXTI_MAP=EXTI15PA15;
	EXTI_PINCONFIG_t EXTI_Confg;
	EXTI_Confg.EXTI_Map_Pin=EXTI_MAP;
	EXTI_Confg.EXTI_Trigger_State=EXTI_Falling_Trigger;
	EXTI_Confg.IRQ_EN=EXTI_IRQ_ENABLE;
	EXTI_Confg.PF_IRQ_CALLBACK=EXTI15_CALLBACK;
	MCAL_EXTI_Init(&EXTI_Confg);
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


	//||||||||||||||||||||||||||||||||LCD_INIT.................................||||||||||||||||||||||||||||||||||||//
	LCD_INIT();
	LCD_clear_screen();
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//

	//||||||||||||||||||||||||||||||||Gate_Entry_Init .........................||||||||||||||||||||||||||||||||||||//
	Gate_Entry_Init();
	Gate_EXIT_Init();
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//



	//||||||||||||||||||||||||||||||||EEPROM_SPI_INIT .........................||||||||||||||||||||||||||||||||||||//
	EEPROM_NSS_INIT(GPIOA, GPIO_PIN_4);
	EEPROM_SPI_INTT(SPI1);
	//EEPROM_Erase(SPI1,GPIOA,GPIO_PIN_4);
	EEPROM_WRITESEQUENCE(SPI1,GPIOA,GPIO_PIN_4,Admin_Password,Password_ADDRESS,4);

	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


	//||||||||||||||||||||||||||||||||KEYPAD_INIT.................................||||||||||||||||||||||||||||||||//
	Keypad_init();
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//



	//|||||||||||||||||||||7_Segment_BCD_INIT.................................||||||||||||||||||||||||||||||||||||//
	/*Seven_SegmentBCD_Init(GPIOB);
	Seven_SegmentBCD_Display(GPIOB, Dig3);*/
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


	//|||||||||||||||||||||BUZZER_INIT & LED.................................||||||||||||||||||||||||||||||||||||||//
	/*BUZZER_INIT(GPIOB,GPIO_PIN_11);
	LED_INIT(GPIOB,GPIO_PIN_3);
	BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_off);
	LED_Turn(GPIOB, GPIO_PIN_3, Turn_On);*/
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


	//||||||||||||||||||||||||||||||||RFID_CARD_ENTRY_INIT .........................|||||||||||||||||||||||||||||||//
	//RFID_CARD_ENTRY_INIT(USART1);
	//RFID_CARD_EXIT_INIT(USART2);
	//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//



	//||||||||||||||||||||||||||||||||Loop..........................|||||||||||||||||||||||||||||||||||||||||||||//
	while(1)
	{

		//||||||||||||||||||||||||Read RFID_CARD_ENTRY & Checking........................||||||||||||||||||||||||//
		//RFID_ENTRY();
		//||||||||||||||||||||||||||||||||||||||Read RFID_CARD_ENTRY & Checking||||||||||||||||||||||||||||||||||//

		//||||||||||||||||||||||||Read RFID_CARD_EXIT & Checking........................||||||||||||||||||||||||//
		//RFID_EXIT();
		//||||||||||||||||||||||||||||||||||||||Read RFID_CARD_EXIT & Checking||||||||||||||||||||||||||||||||||//



	}
	//|||||||||||||||||||||||||||||||||||||||||||||||||||Loop||||||||||||||||||||||||||||||||||||||||||||||||||||//



}



void RFID_ENTRY(void)
{
	//RCC_USART1_CLK_EN();
	if(GB_S_ENTRY_READRFID == Start_ReadRFID_ENTRY)
	{
		RFID_CARD_ENTRY_READ(Driver_ENTRY_ID, DriverID_Length);
		ID_ENTRY_Status=RFID_CARD_ID_ENTRY_CHECK(Driver_ENTRY_ID, DriverID_Length, IDs_Num);

		switch(ID_ENTRY_Status)
		{
		case Authorized:
			Available_Slots--;
			Seven_SegmentBCD_Display(GPIOB , Available_Slots);

			LCD_GOTO_XY(1, 0);
			LCD_WRITE_STRING("EN_ID:");
			LCD_WRITE_STRING(Driver_ENTRY_ID);
			LCD_GOTO_XY(2, 1);
			LCD_WRITE_STRING("Authorized");
			LCD_GOTO_XY(1, 0);

			if((Available_Slots + 1) >0 )
			{
				GATE_ENTRY_COMMAND(GATE_OPEN);
				Delay_ms(1000000);
				GATE_ENTRY_COMMAND(GATE_CLOSE);

			}
			break;
		case Unauthorized:
			LCD_GOTO_XY(1, 0);
			LCD_WRITE_STRING("EN_ID:");
			LCD_WRITE_STRING(Driver_ENTRY_ID);
			LCD_GOTO_XY(2, 1);
			LCD_WRITE_STRING("Un_Authorized");
			LCD_GOTO_XY(1, 0);

			for(int i=0;i<3;i++)
			{
				BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_on);
				LED_Turn(GPIOB, GPIO_PIN_3, Turn_Off);
				Delay_ms(100000);
				BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_off);
				LED_Turn(GPIOB, GPIO_PIN_3, Turn_On);
				Delay_ms(100000);
			}


			GATE_ENTRY_COMMAND(GATE_CLOSE);
			break;
		default:
			break;
		}
		GB_S_ENTRY_READRFID=Stop_ReadRFID_ENTRY;

	}

	else
	{
		Delay_ms(1000);
		LCD_clear_screen();
	}


	if(Available_Slots < 0)
	{
		Available_Slots=0;
		Seven_SegmentBCD_Display(GPIOB , Available_Slots);

		LCD_WRITE_STRING("Please Wait.....");
		LCD_GOTO_XY(2, 0);
		LCD_WRITE_STRING("Unavailable Slot");
		LCD_GOTO_XY(1, 0);

		for(int i=0;i<3;i++)
		{
			BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_on);
			LED_Turn(GPIOB, GPIO_PIN_3, Turn_Off);
			Delay_ms(100000);
			BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_off);
			LED_Turn(GPIOB, GPIO_PIN_3, Turn_On);
			Delay_ms(100000);
		}
		Delay_ms(10000);
		LCD_clear_screen();
	}


}



void RFID_EXIT(void)
{
	//RCC_USART2_CLK_EN();
	if(GB_S_EXIT_READRFID == Start_ReadRFID_EXIT)
	{
		RFID_CARD_EXIT_READ(Driver_EXIT_ID, DriverID_Length);
		ID_EXIT_Status=RFID_CARD_ID_EXIT_CHECK(Driver_EXIT_ID, DriverID_Length, IDs_Num);

		switch(ID_EXIT_Status)
		{
		case Authorized:
			Available_Slots++;
			Seven_SegmentBCD_Display(GPIOB , Available_Slots);

			LCD_GOTO_XY(1, 0);
			LCD_WRITE_STRING("EX_ID:");
			LCD_WRITE_STRING(Driver_EXIT_ID);
			LCD_GOTO_XY(2, 1);
			LCD_WRITE_STRING("Authorized");
			LCD_GOTO_XY(1, 0);

			GATE_EXIT_COMMAND(GATE_OPEN);
			Delay_ms(1000000);
			GATE_EXIT_COMMAND(GATE_CLOSE);
			break;
		case Unauthorized:
			LCD_GOTO_XY(1, 0);
			LCD_WRITE_STRING("EX_ID:");
			LCD_WRITE_STRING(Driver_EXIT_ID);
			LCD_GOTO_XY(2, 1);
			LCD_WRITE_STRING("Un_Authorized");
			LCD_GOTO_XY(1, 0);

			for(int i=0;i<3;i++)
			{
				BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_on);
				LED_Turn(GPIOB, GPIO_PIN_3, Turn_Off);
				Delay_ms(100000);
				BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_off);
				LED_Turn(GPIOB, GPIO_PIN_3, Turn_On);
				Delay_ms(100000);
			}


			GATE_EXIT_COMMAND(GATE_CLOSE);
			break;
		default:
			break;
		}
		GB_S_EXIT_READRFID =Stop_ReadRFID_EXIT;

	}

	else
	{
		Delay_ms(1000);
		LCD_clear_screen();
	}



}



void Gate_Entry_Init()
{
	GPIO_PinConfig_t Entry_cnfg;
	Entry_cnfg.GPIO_Mode=GPIO_Mode_Out_push_pull;
	Entry_cnfg.GPIO_PinNumber=GPIO_PIN_0;
	Entry_cnfg.GPIO_Speed=GPIO_Speed_10MHz;

	MCAL_GPIO_Enable_ClocK(GPIOB);
	MCAL_GPIO_Init(GPIOB, &Entry_cnfg);
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

}


void GATE_ENTRY_COMMAND(uint8_t Command)
{
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, Command);
}




void Gate_EXIT_Init()
{
	GPIO_PinConfig_t Entry_cnfg;
	Entry_cnfg.GPIO_Mode=GPIO_Mode_Out_push_pull;
	Entry_cnfg.GPIO_PinNumber=GPIO_PIN_1;
	Entry_cnfg.GPIO_Speed=GPIO_Speed_10MHz;

	MCAL_GPIO_Enable_ClocK(GPIOB);
	MCAL_GPIO_Init(GPIOB, &Entry_cnfg);
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

}


void GATE_EXIT_COMMAND(uint8_t Command)
{
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, Command);

}



void BUZZER_INIT(GPIO_TypedDef* GPIOx , uint16_t PinNumber)
{
	MCAL_GPIO_Enable_ClocK(GPIOx);
	GPIO_PinConfig_t Buzzer_confg;
	Buzzer_confg.GPIO_PinNumber=PinNumber;
	Buzzer_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
	Buzzer_confg.GPIO_Speed=GPIO_Speed_10MHz;

	MCAL_GPIO_Init(GPIOx, &Buzzer_confg);

}

void BUZZER_Turn(GPIO_TypedDef* GPIOx,uint16_t PinNumber,Buzzer_State B_statte)
{
	switch(B_statte)
	{
	case Turn_On:
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET);
		break;

	case Turn_Off:
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET);
		break;

	default:
		break;

	}

}



void LED_INIT(GPIO_TypedDef* GPIOx , uint16_t PinNumber)
{

	MCAL_GPIO_Enable_ClocK(GPIOx);
	GPIO_PinConfig_t Buzzer_confg;
	Buzzer_confg.GPIO_PinNumber=PinNumber;
	Buzzer_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
	Buzzer_confg.GPIO_Speed=GPIO_Speed_10MHz;

	MCAL_GPIO_Init(GPIOx, &Buzzer_confg);


}
void LED_Turn(GPIO_TypedDef* GPIOx,uint16_t PinNumber,LED_State L_statte)
{
	switch(L_statte)
	{
	case Turn_on:
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET);
		break;

	case Turn_off:
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET);
		break;

	default:
		break;

	}



}



Password_Status Password_Check(char* Password_KEYPAD,uint8_t Pass_Length,char* Password_EEPROM)
{
	uint8_t i;
	for(i=0;i<Pass_Length;i++)
	{
		if(*(Password_KEYPAD++) != *(Password_EEPROM++))
		{
			return Wrong ;
			break;
		}
	}
	return Right;
}




void Admin_Control(void)
{
	Password_Status Pass_s;

	LCD_GOTO_XY(1, 0);
	LCD_WRITE_STRING("Password: ");


	while(1)
	{

		Keypad_char=Keypad_getkey();

		switch (Keypad_char)
		{
		case 'N':
			break;
		case '#':
			LCD_clear_screen();
			break;
		default:

			Keypad_Pass[Keypad_Counter]=Keypad_char;
			if(Keypad_Counter==3)
			{
				Loop2_Stop=1;
				EEPROM_READSEQUENCE(SPI1,GPIOA,GPIO_PIN_4, PasswordRx_Buff,Password_ADDRESS,4);
				Pass_s=Password_Check(Keypad_Pass, 4 ,PasswordRx_Buff);

				switch(Pass_s)
				{
				case Right:
					LCD_GOTO_XY(1, 0);
					LCD_WRITE_STRING("Pass is Right");
					LCD_GOTO_XY(1, 0);
					LCD_WRITE_STRING("Enter the num of IDs:");

					while(1)
					{
						Keypad_char=Keypad_getkey();
						switch (Keypad_char)
						{
						case 'N':
							break;
						case '#':
							LCD_clear_screen();
							break;
						default:
							Loop_Stop=1;
							LCD_GOTO_XY(2, 7);
							LCD_WRITE_CHAR(Keypad_char);
							Keypad_Integer=Keypad_char-48;

							LCD_clear_screen();

							for(uint16_t i =0 ,ID_Address= 16 , j=Keypad_Integer; i<Keypad_Integer; i++)
							{
								LCD_GOTO_XY(1, 0);
								LCD_WRITE_STRING("Enter ID");
								LCD_WRITE_CHAR(((Keypad_Integer - j--)+49));

								while(1)
								{
									Keypad_char=Keypad_getkey();
									switch (Keypad_char)
									{
									case 'N':
										break;
									case '#':
										LCD_clear_screen();
										break;
									default:
										Keypad_ID[Keypad_IDs_Counter]=Keypad_char;
										if(Keypad_IDs_Counter==3)
										{

											//Add Id in EEPROM.......................
											EEPROM_WRITESEQUENCE(SPI1,GPIOA,GPIO_PIN_4,Keypad_ID,ID_Address,4);

											Keypad_IDs_Counter=4;
											break;
										}

										Keypad_IDs_Counter++;
									}

									if(Keypad_IDs_Counter==4)
									{
										Keypad_IDs_Counter=0;
										break;
									}

								}

								ID_Address=ID_Address+16;

							}

							break;

						}

						if(Loop_Stop==1)
						{

							Loop_Stop=0;

							break;
						}

					}

					break;


				case Wrong:
					LCD_GOTO_XY(1, 0);
					LCD_WRITE_STRING("Pass Is Wrong");
					LCD_clear_screen();
					LCD_GOTO_XY(1, 0);
					LCD_WRITE_STRING("Password: ");

					Loop2_Stop=0;
					break;

				}
			}


			Keypad_Counter++;

		}

		if(Loop2_Stop==1)
		{

			Loop2_Stop=0;
			LCD_GOTO_XY(1, 0);
			LCD_WRITE_STRING("Load---->Done");
			Delay_ms(100000);
			LCD_GOTO_XY(1, 0);
			LCD_WRITE_STRING("Admin_Page>exit");
			LCD_clear_screen();

			break;
		}

	}

}


void Delay_ms(uint32_t time_ms)
{
	volatile uint32_t i;
	for(int i =0 ;i<time_ms;i++)
	{
		__asm__("nop");

	}

}

