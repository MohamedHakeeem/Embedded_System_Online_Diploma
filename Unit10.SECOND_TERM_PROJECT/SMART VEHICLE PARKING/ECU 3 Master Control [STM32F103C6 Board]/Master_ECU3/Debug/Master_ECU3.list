
Master_ECU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac0  08002ac0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ac0  08002ac0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ac0  08002ac0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000002c  08002af4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002af4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c43  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010fa  00000000  00000000  00023c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001a7c  00000000  00000000  00024d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000400  00000000  00000000  00026810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000348  00000000  00000000  00026c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000419f  00000000  00000000  00026f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000077e8  00000000  00000000  0002b0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d0e8  00000000  00000000  000328df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003f9c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d60  00000000  00000000  0003fa18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	080029c0 	.word	0x080029c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	080029c0 	.word	0x080029c0

08000170 <Seven_SegmentBCD_Init>:



GPIO_PinConfig_t GB_Segment_confg;
void Seven_SegmentBCD_Init(GPIO_TypedDef* GPIOx)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_Enable_ClocK(GPIOx);
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f001 f955 	bl	8001428 <MCAL_GPIO_Enable_ClocK>

	GB_Segment_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 800017e:	4b1e      	ldr	r3, [pc, #120]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 8000180:	2204      	movs	r2, #4
 8000182:	605a      	str	r2, [r3, #4]
	GB_Segment_confg.GPIO_PinNumber=GPIO_PIN_12;
 8000184:	4b1c      	ldr	r3, [pc, #112]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 8000186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800018a:	801a      	strh	r2, [r3, #0]
	GB_Segment_confg.GPIO_Speed=GPIO_Speed_10MHz;
 800018c:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 800018e:	2201      	movs	r2, #1
 8000190:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOx, &GB_Segment_confg);
 8000192:	4919      	ldr	r1, [pc, #100]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 8000194:	6878      	ldr	r0, [r7, #4]
 8000196:	f001 fa3d 	bl	8001614 <MCAL_GPIO_Init>

	GB_Segment_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 800019a:	4b17      	ldr	r3, [pc, #92]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 800019c:	2204      	movs	r2, #4
 800019e:	605a      	str	r2, [r3, #4]
	GB_Segment_confg.GPIO_PinNumber=GPIO_PIN_13;
 80001a0:	4b15      	ldr	r3, [pc, #84]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001a6:	801a      	strh	r2, [r3, #0]
	GB_Segment_confg.GPIO_Speed=GPIO_Speed_10MHz;
 80001a8:	4b13      	ldr	r3, [pc, #76]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOx, &GB_Segment_confg);
 80001ae:	4912      	ldr	r1, [pc, #72]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001b0:	6878      	ldr	r0, [r7, #4]
 80001b2:	f001 fa2f 	bl	8001614 <MCAL_GPIO_Init>

	GB_Segment_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001b8:	2204      	movs	r2, #4
 80001ba:	605a      	str	r2, [r3, #4]
	GB_Segment_confg.GPIO_PinNumber=GPIO_PIN_14;
 80001bc:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001c2:	801a      	strh	r2, [r3, #0]
	GB_Segment_confg.GPIO_Speed=GPIO_Speed_10MHz;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOx, &GB_Segment_confg);
 80001ca:	490b      	ldr	r1, [pc, #44]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f001 fa21 	bl	8001614 <MCAL_GPIO_Init>

	GB_Segment_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001d4:	2204      	movs	r2, #4
 80001d6:	605a      	str	r2, [r3, #4]
	GB_Segment_confg.GPIO_PinNumber=GPIO_PIN_15;
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80001de:	801a      	strh	r2, [r3, #0]
	GB_Segment_confg.GPIO_Speed=GPIO_Speed_10MHz;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOx, &GB_Segment_confg);
 80001e6:	4904      	ldr	r1, [pc, #16]	; (80001f8 <Seven_SegmentBCD_Init+0x88>)
 80001e8:	6878      	ldr	r0, [r7, #4]
 80001ea:	f001 fa13 	bl	8001614 <MCAL_GPIO_Init>


}
 80001ee:	bf00      	nop
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000048 	.word	0x20000048

080001fc <Seven_SegmentBCD_Display>:

void Seven_SegmentBCD_Display(GPIO_TypedDef* GPIOx , uint8_t Digit)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	460b      	mov	r3, r1
 8000206:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_WritePin(GPIOx, GPIO_PIN_12, (Digit & (0x01)) >> 0);
 8000208:	78fb      	ldrb	r3, [r7, #3]
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	b2db      	uxtb	r3, r3
 8000210:	461a      	mov	r2, r3
 8000212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f001 fab4 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOx, GPIO_PIN_13, (Digit & (0x02)) >> 1 );
 800021c:	78fb      	ldrb	r3, [r7, #3]
 800021e:	105b      	asrs	r3, r3, #1
 8000220:	b2db      	uxtb	r3, r3
 8000222:	f003 0301 	and.w	r3, r3, #1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	461a      	mov	r2, r3
 800022a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022e:	6878      	ldr	r0, [r7, #4]
 8000230:	f001 faa8 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOx, GPIO_PIN_14, (Digit & (0x04)) >> 2);
 8000234:	78fb      	ldrb	r3, [r7, #3]
 8000236:	109b      	asrs	r3, r3, #2
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b2db      	uxtb	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f001 fa9c 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOx, GPIO_PIN_15, (Digit & (0x08)) >> 3);
 800024c:	78fb      	ldrb	r3, [r7, #3]
 800024e:	10db      	asrs	r3, r3, #3
 8000250:	b2db      	uxtb	r3, r3
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	b2db      	uxtb	r3, r3
 8000258:	461a      	mov	r2, r3
 800025a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f001 fa90 	bl	8001784 <MCAL_GPIO_WritePin>

}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <SPI_Delay_ms>:
GPIO_PinConfig_t EEPROM_iocnfg;

uint8_t E4RBuffer = 0;


void SPI_Delay_ms(uint32_t time_ms) {
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;
	for(int i =0 ;i<time_ms;i++)
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	e003      	b.n	8000282 <SPI_Delay_ms+0x16>
	{
		__asm__("nop");
 800027a:	bf00      	nop
	for(int i =0 ;i<time_ms;i++)
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	3301      	adds	r3, #1
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	429a      	cmp	r2, r3
 8000288:	d8f7      	bhi.n	800027a <SPI_Delay_ms+0xe>

	}

}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
	...

08000298 <EEPROM_SPI_INTT>:




void EEPROM_SPI_INTT(SPI_TypeDef* SPIx)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	SPI_cnfg.BaudRate_Prescaler=SPI_BAUDRATEPRESCALER_2;
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	81da      	strh	r2, [r3, #14]
	SPI_cnfg.CLKPhase=SPI_CLKPHASE_FIRSTEDGE;
 80002a6:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	815a      	strh	r2, [r3, #10]
	SPI_cnfg.CLKPolarity=SPI_CLKPOLARITY_LOW_IDLE;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	811a      	strh	r2, [r3, #8]
	SPI_cnfg.Communication_Mode=SPI_DIRECTION_2LINES;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	805a      	strh	r2, [r3, #2]
	SPI_cnfg.Data_Order=SPI_MSB_TRANSMITTED_FIRST;
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	809a      	strh	r2, [r3, #4]
	SPI_cnfg.Data_Size=SPI_8BIT_DATASIZE;
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	80da      	strh	r2, [r3, #6]

	SPI_cnfg.IRQ_CallBack=NULL;
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	615a      	str	r2, [r3, #20]
	SPI_cnfg.IRQ_Enable=SPI_IRQ_Disable;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	821a      	strh	r2, [r3, #16]
	SPI_cnfg.SPI_Mode=SPI_MASTER_MODE;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002d2:	2204      	movs	r2, #4
 80002d4:	801a      	strh	r2, [r3, #0]
	SPI_cnfg.NSS=SPI_NSS_Soft_NSSInternalSoft_Set;
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002dc:	819a      	strh	r2, [r3, #12]

	MCAL_SPI_Init(SPIx, &SPI_cnfg);
 80002de:	4905      	ldr	r1, [pc, #20]	; (80002f4 <EEPROM_SPI_INTT+0x5c>)
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f001 fac5 	bl	8001870 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPIx);
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	f001 fb5c 	bl	80019a4 <MCAL_SPI_GPIO_Set_Pins>

}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000054 	.word	0x20000054

080002f8 <EEPROM_NSS_INIT>:



void EEPROM_NSS_INIT(GPIO_TypedDef*GPIOx,uint16_t PinNumber)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	807b      	strh	r3, [r7, #2]
	MCAL_GPIO_Enable_ClocK(GPIOx);
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f001 f88f 	bl	8001428 <MCAL_GPIO_Enable_ClocK>

	EEPROM_iocnfg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <EEPROM_NSS_INIT+0x40>)
 800030c:	2204      	movs	r2, #4
 800030e:	605a      	str	r2, [r3, #4]
	EEPROM_iocnfg.GPIO_PinNumber=PinNumber;
 8000310:	4a09      	ldr	r2, [pc, #36]	; (8000338 <EEPROM_NSS_INIT+0x40>)
 8000312:	887b      	ldrh	r3, [r7, #2]
 8000314:	8013      	strh	r3, [r2, #0]
	EEPROM_iocnfg.GPIO_Speed=GPIO_Speed_2MHz;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <EEPROM_NSS_INIT+0x40>)
 8000318:	2202      	movs	r2, #2
 800031a:	609a      	str	r2, [r3, #8]

	MCAL_GPIO_Init(GPIOx, &EEPROM_iocnfg);
 800031c:	4906      	ldr	r1, [pc, #24]	; (8000338 <EEPROM_NSS_INIT+0x40>)
 800031e:	6878      	ldr	r0, [r7, #4]
 8000320:	f001 f978 	bl	8001614 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET); //High Idle......
 8000324:	887b      	ldrh	r3, [r7, #2]
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f001 fa2a 	bl	8001784 <MCAL_GPIO_WritePin>



}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000006c 	.word	0x2000006c

0800033c <EEPROM_READ>:

void EEPROM_READ(SPI_TypeDef* SPIx,GPIO_TypedDef*GPIOx,uint16_t PinNumber,uint8_t* E2RBuffer,uint16_t Address)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	4613      	mov	r3, r2
 800034a:	80fb      	strh	r3, [r7, #6]
	//Read_Instruction
	uint8_t Address_High=(Address >> 8) & 0xFF;
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	0a1b      	lsrs	r3, r3, #8
 8000350:	b29b      	uxth	r3, r3
 8000352:	b2db      	uxtb	r3, r3
 8000354:	753b      	strb	r3, [r7, #20]
	uint8_t Address_Low=(Address & 0xFF);
 8000356:	8c3b      	ldrh	r3, [r7, #32]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	74fb      	strb	r3, [r7, #19]

	uint8_t RxBuffer_Backup = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	75bb      	strb	r3, [r7, #22]
	uint8_t TxBuffer_Backup = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	757b      	strb	r3, [r7, #21]
	uint8_t i=0;
 8000364:	2300      	movs	r3, #0
 8000366:	75fb      	strb	r3, [r7, #23]

	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET); //To Listen......
 8000368:	88fb      	ldrh	r3, [r7, #6]
 800036a:	2200      	movs	r2, #0
 800036c:	4619      	mov	r1, r3
 800036e:	68b8      	ldr	r0, [r7, #8]
 8000370:	f001 fa08 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_SPI_SendData(SPIx, (Instruction_Set + 2) , SPIenable);
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <EEPROM_READ+0xc0>)
 8000376:	2201      	movs	r2, #1
 8000378:	4619      	mov	r1, r3
 800037a:	68f8      	ldr	r0, [r7, #12]
 800037c:	f001 fc2c 	bl	8001bd8 <MCAL_SPI_SendData>
	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET); //Return to  Idle......
 8000380:	88fb      	ldrh	r3, [r7, #6]
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	68b8      	ldr	r0, [r7, #8]
 8000388:	f001 f9fc 	bl	8001784 <MCAL_GPIO_WritePin>


	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET); //To Listen......
 800038c:	88fb      	ldrh	r3, [r7, #6]
 800038e:	2200      	movs	r2, #0
 8000390:	4619      	mov	r1, r3
 8000392:	68b8      	ldr	r0, [r7, #8]
 8000394:	f001 f9f6 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_SPI_SendData(SPIx, (Instruction_Set) , SPIenable);
 8000398:	2201      	movs	r2, #1
 800039a:	4919      	ldr	r1, [pc, #100]	; (8000400 <EEPROM_READ+0xc4>)
 800039c:	68f8      	ldr	r0, [r7, #12]
 800039e:	f001 fc1b 	bl	8001bd8 <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPIx, &Address_High , SPIenable);
 80003a2:	f107 0314 	add.w	r3, r7, #20
 80003a6:	2201      	movs	r2, #1
 80003a8:	4619      	mov	r1, r3
 80003aa:	68f8      	ldr	r0, [r7, #12]
 80003ac:	f001 fc14 	bl	8001bd8 <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPIx, &Address_Low , SPIenable);
 80003b0:	f107 0313 	add.w	r3, r7, #19
 80003b4:	2201      	movs	r2, #1
 80003b6:	4619      	mov	r1, r3
 80003b8:	68f8      	ldr	r0, [r7, #12]
 80003ba:	f001 fc0d 	bl	8001bd8 <MCAL_SPI_SendData>


	for(i=0;i<2;i++)
 80003be:	2300      	movs	r3, #0
 80003c0:	75fb      	strb	r3, [r7, #23]
 80003c2:	e008      	b.n	80003d6 <EEPROM_READ+0x9a>
	{
		MCAL_SPI_ReceiveData(SPIx, RxBuffer_Backup, SPIenable);
 80003c4:	7dbb      	ldrb	r3, [r7, #22]
 80003c6:	2201      	movs	r2, #1
 80003c8:	4619      	mov	r1, r3
 80003ca:	68f8      	ldr	r0, [r7, #12]
 80003cc:	f001 fc1f 	bl	8001c0e <MCAL_SPI_ReceiveData>
	for(i=0;i<2;i++)
 80003d0:	7dfb      	ldrb	r3, [r7, #23]
 80003d2:	3301      	adds	r3, #1
 80003d4:	75fb      	strb	r3, [r7, #23]
 80003d6:	7dfb      	ldrb	r3, [r7, #23]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d9f3      	bls.n	80003c4 <EEPROM_READ+0x88>
	}


	MCAL_SPI_ReceiveData(SPIx, E2RBuffer, SPIenable);
 80003dc:	2201      	movs	r2, #1
 80003de:	6839      	ldr	r1, [r7, #0]
 80003e0:	68f8      	ldr	r0, [r7, #12]
 80003e2:	f001 fc14 	bl	8001c0e <MCAL_SPI_ReceiveData>


	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET); //Return to  Idle......
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	2201      	movs	r2, #1
 80003ea:	4619      	mov	r1, r3
 80003ec:	68b8      	ldr	r0, [r7, #8]
 80003ee:	f001 f9c9 	bl	8001784 <MCAL_GPIO_WritePin>

}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000002 	.word	0x20000002
 8000400:	20000000 	.word	0x20000000

08000404 <EEPROM_READSEQUENCE>:



void EEPROM_READSEQUENCE(SPI_TypeDef* SPIx,GPIO_TypedDef*GPIOx,uint16_t PinNumber,uint8_t* E2RBuffer,uint16_t Address,uint8_t Data_Length)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af02      	add	r7, sp, #8
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	4613      	mov	r3, r2
 8000412:	80fb      	strh	r3, [r7, #6]
	uint8_t i;
	for(i=0; i < Data_Length ;i++)
 8000414:	2300      	movs	r3, #0
 8000416:	75fb      	strb	r3, [r7, #23]
 8000418:	e011      	b.n	800043e <EEPROM_READSEQUENCE+0x3a>
	{
		EEPROM_READ(SPIx,GPIOx,PinNumber,E2RBuffer + i, Address + i);
 800041a:	7dfb      	ldrb	r3, [r7, #23]
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	18d1      	adds	r1, r2, r3
 8000420:	7dfb      	ldrb	r3, [r7, #23]
 8000422:	b29a      	uxth	r2, r3
 8000424:	8c3b      	ldrh	r3, [r7, #32]
 8000426:	4413      	add	r3, r2
 8000428:	b29b      	uxth	r3, r3
 800042a:	88fa      	ldrh	r2, [r7, #6]
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	460b      	mov	r3, r1
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f7ff ff82 	bl	800033c <EEPROM_READ>
	for(i=0; i < Data_Length ;i++)
 8000438:	7dfb      	ldrb	r3, [r7, #23]
 800043a:	3301      	adds	r3, #1
 800043c:	75fb      	strb	r3, [r7, #23]
 800043e:	7dfa      	ldrb	r2, [r7, #23]
 8000440:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000444:	429a      	cmp	r2, r3
 8000446:	d3e8      	bcc.n	800041a <EEPROM_READSEQUENCE+0x16>

	}

	SPI_Delay_ms(8000);
 8000448:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800044c:	f7ff ff0e 	bl	800026c <SPI_Delay_ms>

}
 8000450:	bf00      	nop
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <EEPROM_WRITESEQUENCE>:

}


void EEPROM_WRITESEQUENCE(SPI_TypeDef* SPIx,GPIO_TypedDef*GPIOx,uint16_t PinNumber,uint8_t* E2TBuffer,uint16_t Address,uint8_t Data_Length)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	4613      	mov	r3, r2
 8000466:	80fb      	strh	r3, [r7, #6]


	//Write_Operation_Instruction
	uint8_t Address_High=(Address  >> 8) & 0xFF;
 8000468:	8c3b      	ldrh	r3, [r7, #32]
 800046a:	0a1b      	lsrs	r3, r3, #8
 800046c:	b29b      	uxth	r3, r3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	75bb      	strb	r3, [r7, #22]
	uint8_t Address_Low=(Address & 0xFF);
 8000472:	8c3b      	ldrh	r3, [r7, #32]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	757b      	strb	r3, [r7, #21]
	uint8_t i;



	//WREN_Instruction
	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET);
 8000478:	88fb      	ldrh	r3, [r7, #6]
 800047a:	2200      	movs	r2, #0
 800047c:	4619      	mov	r1, r3
 800047e:	68b8      	ldr	r0, [r7, #8]
 8000480:	f001 f980 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_SPI_SendData(SPIx, (Instruction_Set + 3) , SPIenable);
 8000484:	4b23      	ldr	r3, [pc, #140]	; (8000514 <EEPROM_WRITESEQUENCE+0xbc>)
 8000486:	2201      	movs	r2, #1
 8000488:	4619      	mov	r1, r3
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f001 fba4 	bl	8001bd8 <MCAL_SPI_SendData>
	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET);
 8000490:	88fb      	ldrh	r3, [r7, #6]
 8000492:	2201      	movs	r2, #1
 8000494:	4619      	mov	r1, r3
 8000496:	68b8      	ldr	r0, [r7, #8]
 8000498:	f001 f974 	bl	8001784 <MCAL_GPIO_WritePin>




	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET);
 800049c:	88fb      	ldrh	r3, [r7, #6]
 800049e:	2200      	movs	r2, #0
 80004a0:	4619      	mov	r1, r3
 80004a2:	68b8      	ldr	r0, [r7, #8]
 80004a4:	f001 f96e 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_SPI_SendData(SPIx, (Instruction_Set + 1) , SPIenable);
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <EEPROM_WRITESEQUENCE+0xc0>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	4619      	mov	r1, r3
 80004ae:	68f8      	ldr	r0, [r7, #12]
 80004b0:	f001 fb92 	bl	8001bd8 <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPIx, &Address_High , SPIenable);
 80004b4:	f107 0316 	add.w	r3, r7, #22
 80004b8:	2201      	movs	r2, #1
 80004ba:	4619      	mov	r1, r3
 80004bc:	68f8      	ldr	r0, [r7, #12]
 80004be:	f001 fb8b 	bl	8001bd8 <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPIx, &Address_Low , SPIenable);
 80004c2:	f107 0315 	add.w	r3, r7, #21
 80004c6:	2201      	movs	r2, #1
 80004c8:	4619      	mov	r1, r3
 80004ca:	68f8      	ldr	r0, [r7, #12]
 80004cc:	f001 fb84 	bl	8001bd8 <MCAL_SPI_SendData>


	for(i=0; i < Data_Length+1 ;i++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	75fb      	strb	r3, [r7, #23]
 80004d4:	e00a      	b.n	80004ec <EEPROM_WRITESEQUENCE+0x94>
	{
		MCAL_SPI_SendData(SPIx, E2TBuffer + i , SPIenable);
 80004d6:	7dfb      	ldrb	r3, [r7, #23]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	4619      	mov	r1, r3
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f001 fb79 	bl	8001bd8 <MCAL_SPI_SendData>
	for(i=0; i < Data_Length+1 ;i++)
 80004e6:	7dfb      	ldrb	r3, [r7, #23]
 80004e8:	3301      	adds	r3, #1
 80004ea:	75fb      	strb	r3, [r7, #23]
 80004ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d2ef      	bcs.n	80004d6 <EEPROM_WRITESEQUENCE+0x7e>

	}



	MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET);
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	68b8      	ldr	r0, [r7, #8]
 80004fe:	f001 f941 	bl	8001784 <MCAL_GPIO_WritePin>
	SPI_Delay_ms(8000);
 8000502:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000506:	f7ff feb1 	bl	800026c <SPI_Delay_ms>


}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000003 	.word	0x20000003
 8000518:	20000001 	.word	0x20000001

0800051c <Keypad_getkey>:




char Keypad_getkey()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 3; i++)
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	e096      	b.n	8000656 <Keypad_getkey+0x13a>
	{
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], 0);
 8000528:	4b4f      	ldr	r3, [pc, #316]	; (8000668 <Keypad_getkey+0x14c>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	b29b      	uxth	r3, r3
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	484e      	ldr	r0, [pc, #312]	; (800066c <Keypad_getkey+0x150>)
 8000534:	f001 f926 	bl	8001784 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], 0);
 8000538:	4b4b      	ldr	r3, [pc, #300]	; (8000668 <Keypad_getkey+0x14c>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	b29b      	uxth	r3, r3
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	484a      	ldr	r0, [pc, #296]	; (800066c <Keypad_getkey+0x150>)
 8000544:	f001 f91e 	bl	8001784 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], 0);
 8000548:	4b47      	ldr	r3, [pc, #284]	; (8000668 <Keypad_getkey+0x14c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	b29b      	uxth	r3, r3
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	4846      	ldr	r0, [pc, #280]	; (800066c <Keypad_getkey+0x150>)
 8000554:	f001 f916 	bl	8001784 <MCAL_GPIO_WritePin>

		//MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], 1);

		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], 1);
 8000558:	4a43      	ldr	r2, [pc, #268]	; (8000668 <Keypad_getkey+0x14c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000560:	b29b      	uxth	r3, r3
 8000562:	2201      	movs	r2, #1
 8000564:	4619      	mov	r1, r3
 8000566:	4841      	ldr	r0, [pc, #260]	; (800066c <Keypad_getkey+0x150>)
 8000568:	f001 f90c 	bl	8001784 <MCAL_GPIO_WritePin>

		for(j = 0; j < 4; j++)
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	e06b      	b.n	800064a <Keypad_getkey+0x12e>
		{
			if ( (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])) == 1 )
 8000572:	4a3f      	ldr	r2, [pc, #252]	; (8000670 <Keypad_getkey+0x154>)
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057a:	b29b      	uxth	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	483b      	ldr	r0, [pc, #236]	; (800066c <Keypad_getkey+0x150>)
 8000580:	f001 f8ec 	bl	800175c <MCAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d155      	bne.n	8000636 <Keypad_getkey+0x11a>
			{
				while((MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])) == 1);
 800058a:	bf00      	nop
 800058c:	4a38      	ldr	r2, [pc, #224]	; (8000670 <Keypad_getkey+0x154>)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000594:	b29b      	uxth	r3, r3
 8000596:	4619      	mov	r1, r3
 8000598:	4834      	ldr	r0, [pc, #208]	; (800066c <Keypad_getkey+0x150>)
 800059a:	f001 f8df 	bl	800175c <MCAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d0f3      	beq.n	800058c <Keypad_getkey+0x70>
				switch(i)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d031      	beq.n	800060e <Keypad_getkey+0xf2>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	dc49      	bgt.n	8000644 <Keypad_getkey+0x128>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d003      	beq.n	80005be <Keypad_getkey+0xa2>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d014      	beq.n	80005e6 <Keypad_getkey+0xca>
 80005bc:	e042      	b.n	8000644 <Keypad_getkey+0x128>
				{
				case (0):
				if (j == 0) return '1';
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d101      	bne.n	80005c8 <Keypad_getkey+0xac>
 80005c4:	2331      	movs	r3, #49	; 0x31
 80005c6:	e04b      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 1) return '4';
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d101      	bne.n	80005d2 <Keypad_getkey+0xb6>
 80005ce:	2334      	movs	r3, #52	; 0x34
 80005d0:	e046      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 2) return '7';
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d101      	bne.n	80005dc <Keypad_getkey+0xc0>
 80005d8:	2337      	movs	r3, #55	; 0x37
 80005da:	e041      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 3) return '*';
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d12b      	bne.n	800063a <Keypad_getkey+0x11e>
 80005e2:	232a      	movs	r3, #42	; 0x2a
 80005e4:	e03c      	b.n	8000660 <Keypad_getkey+0x144>
				break;
				case (1):
				if (j == 0) return '2';
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <Keypad_getkey+0xd4>
 80005ec:	2332      	movs	r3, #50	; 0x32
 80005ee:	e037      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 1) return '5';
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d101      	bne.n	80005fa <Keypad_getkey+0xde>
 80005f6:	2335      	movs	r3, #53	; 0x35
 80005f8:	e032      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 2) return '8';
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d101      	bne.n	8000604 <Keypad_getkey+0xe8>
 8000600:	2338      	movs	r3, #56	; 0x38
 8000602:	e02d      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 3) return '0';
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d119      	bne.n	800063e <Keypad_getkey+0x122>
 800060a:	2330      	movs	r3, #48	; 0x30
 800060c:	e028      	b.n	8000660 <Keypad_getkey+0x144>
				break;
				case (2):
				if (j == 0) return '3';
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d101      	bne.n	8000618 <Keypad_getkey+0xfc>
 8000614:	2333      	movs	r3, #51	; 0x33
 8000616:	e023      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 1) return '6';
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d101      	bne.n	8000622 <Keypad_getkey+0x106>
 800061e:	2336      	movs	r3, #54	; 0x36
 8000620:	e01e      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 2) return '9';
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d101      	bne.n	800062c <Keypad_getkey+0x110>
 8000628:	2339      	movs	r3, #57	; 0x39
 800062a:	e019      	b.n	8000660 <Keypad_getkey+0x144>
				if (j == 3) return '#';
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d107      	bne.n	8000642 <Keypad_getkey+0x126>
 8000632:	2323      	movs	r3, #35	; 0x23
 8000634:	e014      	b.n	8000660 <Keypad_getkey+0x144>
					else if (j == 1) return '*';
					else if (j == 2) return '-';
					else if (j == 3) return '+';
				break;*/
				}
			}
 8000636:	bf00      	nop
 8000638:	e004      	b.n	8000644 <Keypad_getkey+0x128>
				break;
 800063a:	bf00      	nop
 800063c:	e002      	b.n	8000644 <Keypad_getkey+0x128>
				break;
 800063e:	bf00      	nop
 8000640:	e000      	b.n	8000644 <Keypad_getkey+0x128>
				break;
 8000642:	bf00      	nop
		for(j = 0; j < 4; j++)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b03      	cmp	r3, #3
 800064e:	dd90      	ble.n	8000572 <Keypad_getkey+0x56>
	for (i = 0; i < 3; i++)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b02      	cmp	r3, #2
 800065a:	f77f af65 	ble.w	8000528 <Keypad_getkey+0xc>
		}
	}
	return 'N';
 800065e:	234e      	movs	r3, #78	; 0x4e
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000018 	.word	0x20000018
 800066c:	40010800 	.word	0x40010800
 8000670:	20000008 	.word	0x20000008

08000674 <_delay_ms>:
#include "lcd.h"
GPIO_PinConfig_t LCD_pinconfig;


void _delay_ms(uint32_t time_ms)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	volatile uint32_t  i,j;
	for(i=0;i<time_ms;i++)
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	e00b      	b.n	800069a <_delay_ms+0x26>
		for(j=0 ; j<255 ; j++);
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	e002      	b.n	800068e <_delay_ms+0x1a>
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	3301      	adds	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	2bfe      	cmp	r3, #254	; 0xfe
 8000692:	d9f9      	bls.n	8000688 <_delay_ms+0x14>
	for(i=0;i<time_ms;i++)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d8ef      	bhi.n	8000682 <_delay_ms+0xe>

}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
	...

080006b0 <LCD_INIT>:



void LCD_INIT()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	MCAL_GPIO_Enable_ClocK(LCD_PORT);
 80006b4:	4861      	ldr	r0, [pc, #388]	; (800083c <LCD_INIT+0x18c>)
 80006b6:	f000 feb7 	bl	8001428 <MCAL_GPIO_Enable_ClocK>
	MCAL_GPIO_Enable_ClocK(LCD_CTRL);
 80006ba:	4860      	ldr	r0, [pc, #384]	; (800083c <LCD_INIT+0x18c>)
 80006bc:	f000 feb4 	bl	8001428 <MCAL_GPIO_Enable_ClocK>

	_delay_ms(20);
 80006c0:	2014      	movs	r0, #20
 80006c2:	f7ff ffd7 	bl	8000674 <_delay_ms>
	LCD_pinconfig.GPIO_PinNumber=EN_SWITCH;
 80006c6:	4b5e      	ldr	r3, [pc, #376]	; (8000840 <LCD_INIT+0x190>)
 80006c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006cc:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80006ce:	4b5c      	ldr	r3, [pc, #368]	; (8000840 <LCD_INIT+0x190>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 80006d4:	4b5a      	ldr	r3, [pc, #360]	; (8000840 <LCD_INIT+0x190>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_CTRL,&LCD_pinconfig);
 80006da:	4959      	ldr	r1, [pc, #356]	; (8000840 <LCD_INIT+0x190>)
 80006dc:	4857      	ldr	r0, [pc, #348]	; (800083c <LCD_INIT+0x18c>)
 80006de:	f000 ff99 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=RS_SWITCH;
 80006e2:	4b57      	ldr	r3, [pc, #348]	; (8000840 <LCD_INIT+0x190>)
 80006e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e8:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80006ea:	4b55      	ldr	r3, [pc, #340]	; (8000840 <LCD_INIT+0x190>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 80006f0:	4b53      	ldr	r3, [pc, #332]	; (8000840 <LCD_INIT+0x190>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_CTRL,&LCD_pinconfig);
 80006f6:	4952      	ldr	r1, [pc, #328]	; (8000840 <LCD_INIT+0x190>)
 80006f8:	4850      	ldr	r0, [pc, #320]	; (800083c <LCD_INIT+0x18c>)
 80006fa:	f000 ff8b 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=RW_SWITCH;
 80006fe:	4b50      	ldr	r3, [pc, #320]	; (8000840 <LCD_INIT+0x190>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 8000706:	4b4e      	ldr	r3, [pc, #312]	; (8000840 <LCD_INIT+0x190>)
 8000708:	2204      	movs	r2, #4
 800070a:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 800070c:	4b4c      	ldr	r3, [pc, #304]	; (8000840 <LCD_INIT+0x190>)
 800070e:	2201      	movs	r2, #1
 8000710:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_CTRL,&LCD_pinconfig);
 8000712:	494b      	ldr	r1, [pc, #300]	; (8000840 <LCD_INIT+0x190>)
 8000714:	4849      	ldr	r0, [pc, #292]	; (800083c <LCD_INIT+0x18c>)
 8000716:	f000 ff7d 	bl	8001614 <MCAL_GPIO_Init>

	//WRITE IN CONTROL PINS '0';
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000720:	4846      	ldr	r0, [pc, #280]	; (800083c <LCD_INIT+0x18c>)
 8000722:	f001 f82f 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072c:	4843      	ldr	r0, [pc, #268]	; (800083c <LCD_INIT+0x18c>)
 800072e:	f001 f829 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	4840      	ldr	r0, [pc, #256]	; (800083c <LCD_INIT+0x18c>)
 800073a:	f001 f823 	bl	8001784 <MCAL_GPIO_WritePin>
	//========================================================================

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_0;
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <LCD_INIT+0x190>)
 8000740:	2201      	movs	r2, #1
 8000742:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 8000744:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <LCD_INIT+0x190>)
 8000746:	2204      	movs	r2, #4
 8000748:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <LCD_INIT+0x190>)
 800074c:	2201      	movs	r2, #1
 800074e:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
 8000750:	493b      	ldr	r1, [pc, #236]	; (8000840 <LCD_INIT+0x190>)
 8000752:	483a      	ldr	r0, [pc, #232]	; (800083c <LCD_INIT+0x18c>)
 8000754:	f000 ff5e 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_1;
 8000758:	4b39      	ldr	r3, [pc, #228]	; (8000840 <LCD_INIT+0x190>)
 800075a:	2202      	movs	r2, #2
 800075c:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <LCD_INIT+0x190>)
 8000760:	2204      	movs	r2, #4
 8000762:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 8000764:	4b36      	ldr	r3, [pc, #216]	; (8000840 <LCD_INIT+0x190>)
 8000766:	2201      	movs	r2, #1
 8000768:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
 800076a:	4935      	ldr	r1, [pc, #212]	; (8000840 <LCD_INIT+0x190>)
 800076c:	4833      	ldr	r0, [pc, #204]	; (800083c <LCD_INIT+0x18c>)
 800076e:	f000 ff51 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_2;
 8000772:	4b33      	ldr	r3, [pc, #204]	; (8000840 <LCD_INIT+0x190>)
 8000774:	2204      	movs	r2, #4
 8000776:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 8000778:	4b31      	ldr	r3, [pc, #196]	; (8000840 <LCD_INIT+0x190>)
 800077a:	2204      	movs	r2, #4
 800077c:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 800077e:	4b30      	ldr	r3, [pc, #192]	; (8000840 <LCD_INIT+0x190>)
 8000780:	2201      	movs	r2, #1
 8000782:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
 8000784:	492e      	ldr	r1, [pc, #184]	; (8000840 <LCD_INIT+0x190>)
 8000786:	482d      	ldr	r0, [pc, #180]	; (800083c <LCD_INIT+0x18c>)
 8000788:	f000 ff44 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_3;
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <LCD_INIT+0x190>)
 800078e:	2208      	movs	r2, #8
 8000790:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <LCD_INIT+0x190>)
 8000794:	2204      	movs	r2, #4
 8000796:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <LCD_INIT+0x190>)
 800079a:	2201      	movs	r2, #1
 800079c:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
 800079e:	4928      	ldr	r1, [pc, #160]	; (8000840 <LCD_INIT+0x190>)
 80007a0:	4826      	ldr	r0, [pc, #152]	; (800083c <LCD_INIT+0x18c>)
 80007a2:	f000 ff37 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_4;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <LCD_INIT+0x190>)
 80007a8:	2210      	movs	r2, #16
 80007aa:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <LCD_INIT+0x190>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <LCD_INIT+0x190>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
 80007b8:	4921      	ldr	r1, [pc, #132]	; (8000840 <LCD_INIT+0x190>)
 80007ba:	4820      	ldr	r0, [pc, #128]	; (800083c <LCD_INIT+0x18c>)
 80007bc:	f000 ff2a 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_5;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <LCD_INIT+0x190>)
 80007c2:	2220      	movs	r2, #32
 80007c4:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <LCD_INIT+0x190>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <LCD_INIT+0x190>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
 80007d2:	491b      	ldr	r1, [pc, #108]	; (8000840 <LCD_INIT+0x190>)
 80007d4:	4819      	ldr	r0, [pc, #100]	; (800083c <LCD_INIT+0x18c>)
 80007d6:	f000 ff1d 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_6;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <LCD_INIT+0x190>)
 80007dc:	2240      	movs	r2, #64	; 0x40
 80007de:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <LCD_INIT+0x190>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <LCD_INIT+0x190>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
 80007ec:	4914      	ldr	r1, [pc, #80]	; (8000840 <LCD_INIT+0x190>)
 80007ee:	4813      	ldr	r0, [pc, #76]	; (800083c <LCD_INIT+0x18c>)
 80007f0:	f000 ff10 	bl	8001614 <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_7;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <LCD_INIT+0x190>)
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	801a      	strh	r2, [r3, #0]
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <LCD_INIT+0x190>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	605a      	str	r2, [r3, #4]
	LCD_pinconfig.GPIO_Speed=GPIO_Speed_10MHz;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <LCD_INIT+0x190>)
 8000802:	2201      	movs	r2, #1
 8000804:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
 8000806:	490e      	ldr	r1, [pc, #56]	; (8000840 <LCD_INIT+0x190>)
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LCD_INIT+0x18c>)
 800080a:	f000 ff03 	bl	8001614 <MCAL_GPIO_Init>

	_delay_ms(15);
 800080e:	200f      	movs	r0, #15
 8000810:	f7ff ff30 	bl	8000674 <_delay_ms>
	//MCAL_GPIO_WritePort(LCD_PORT, )
#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
#endif
#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
 8000814:	2002      	movs	r0, #2
 8000816:	f000 f857 	bl	80008c8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f000 f854 	bl	80008c8 <LCD_WRITE_COMMAND>
#endif
	LCD_clear_screen();
 8000820:	f000 f810 	bl	8000844 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_DISP_ON);
 8000824:	200c      	movs	r0, #12
 8000826:	f000 f84f 	bl	80008c8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800082a:	2006      	movs	r0, #6
 800082c:	f000 f84c 	bl	80008c8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	f000 f849 	bl	80008c8 <LCD_WRITE_COMMAND>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010c00 	.word	0x40010c00
 8000840:	20000078 	.word	0x20000078

08000844 <LCD_clear_screen>:


void LCD_clear_screen(){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000848:	2001      	movs	r0, #1
 800084a:	f000 f83d 	bl	80008c8 <LCD_WRITE_COMMAND>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LCD_lcd_kick>:
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0); //write mode

}
void LCD_lcd_kick()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, 1);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <LCD_lcd_kick+0x28>)
 8000860:	f000 ff90 	bl	8001784 <MCAL_GPIO_WritePin>
	_delay_ms(50);
 8000864:	2032      	movs	r0, #50	; 0x32
 8000866:	f7ff ff05 	bl	8000674 <_delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <LCD_lcd_kick+0x28>)
 8000872:	f000 ff87 	bl	8001784 <MCAL_GPIO_WritePin>

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010c00 	.word	0x40010c00

08000880 <LCD_GOTO_XY>:




void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d108      	bne.n	80008a8 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d805      	bhi.n	80008a8 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	3b80      	subs	r3, #128	; 0x80
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f810 	bl	80008c8 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d108      	bne.n	80008c0 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d805      	bhi.n	80008c0 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	3b40      	subs	r3, #64	; 0x40
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f804 	bl	80008c8 <LCD_WRITE_COMMAND>
		}
	}
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <LCD_WRITE_COMMAND>:




void LCD_WRITE_COMMAND(unsigned char command)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef FOUR_BIT_MODE
	//MCAL_GPIO_WritePort(LCD_PORT, (uint16_t)(command & 0xF0));


	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_4, (command & (0x10)) >> 4 );
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	111b      	asrs	r3, r3, #4
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	2110      	movs	r1, #16
 80008e2:	483b      	ldr	r0, [pc, #236]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 80008e4:	f000 ff4e 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_5, (command & (0x20)) >> 5 );
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	115b      	asrs	r3, r3, #5
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	2120      	movs	r1, #32
 80008f8:	4835      	ldr	r0, [pc, #212]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 80008fa:	f000 ff43 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_6, (command & (0x40)) >> 6 );
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	119b      	asrs	r3, r3, #6
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4830      	ldr	r0, [pc, #192]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 8000910:	f000 ff38 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_7, (command & (0x80)) >> 7 );
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	09db      	lsrs	r3, r3, #7
 8000918:	b2db      	uxtb	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	482c      	ldr	r0, [pc, #176]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 8000920:	f000 ff30 	bl	8001784 <MCAL_GPIO_WritePin>

	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092a:	4829      	ldr	r0, [pc, #164]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 800092c:	f000 ff2a 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	4826      	ldr	r0, [pc, #152]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 8000938:	f000 ff24 	bl	8001784 <MCAL_GPIO_WritePin>
	_delay_ms(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fe99 	bl	8000674 <_delay_ms>
	LCD_lcd_kick ();
 8000942:	f7ff ff87 	bl	8000854 <LCD_lcd_kick>
	//MCAL_GPIO_WritePort(LCD_PORT, (uint16_t)(command << 4) & 0xF0);

	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_4, (command  << 4 & (0x10)) >> 4 );
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	111b      	asrs	r3, r3, #4
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	2110      	movs	r1, #16
 8000958:	481d      	ldr	r0, [pc, #116]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 800095a:	f000 ff13 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_5, (command  << 4 & (0x20)) >> 5);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	115b      	asrs	r3, r3, #5
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	2120      	movs	r1, #32
 8000970:	4817      	ldr	r0, [pc, #92]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 8000972:	f000 ff07 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_6, (command  << 4 & (0x40)) >> 6);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	119b      	asrs	r3, r3, #6
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 800098a:	f000 fefb 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_7, (command  << 4 & (0x80)) >> 7);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	11db      	asrs	r3, r3, #7
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 80009a2:	f000 feef 	bl	8001784 <MCAL_GPIO_WritePin>

	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 80009ae:	f000 fee9 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <LCD_WRITE_COMMAND+0x108>)
 80009ba:	f000 fee3 	bl	8001784 <MCAL_GPIO_WritePin>
	_delay_ms(1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fe58 	bl	8000674 <_delay_ms>
	LCD_lcd_kick();
 80009c4:	f7ff ff46 	bl	8000854 <LCD_lcd_kick>

#endif

}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	//MCAL_GPIO_WritePort(LCD_PORT, (uint16_t)(character & 0xF0));

	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_4, (character & (0x10)) >> 4 );
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	111b      	asrs	r3, r3, #4
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	2110      	movs	r1, #16
 80009ee:	483b      	ldr	r0, [pc, #236]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 80009f0:	f000 fec8 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_5, (character & (0x20)) >> 5 );
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	115b      	asrs	r3, r3, #5
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	2120      	movs	r1, #32
 8000a04:	4835      	ldr	r0, [pc, #212]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000a06:	f000 febd 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_6, (character & (0x40)) >> 6 );
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	119b      	asrs	r3, r3, #6
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	4830      	ldr	r0, [pc, #192]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000a1c:	f000 feb2 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_7, (character & (0x80)) >> 7 );
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	09db      	lsrs	r3, r3, #7
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	482c      	ldr	r0, [pc, #176]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000a2c:	f000 feaa 	bl	8001784 <MCAL_GPIO_WritePin>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4829      	ldr	r0, [pc, #164]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000a38:	f000 fea4 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	4826      	ldr	r0, [pc, #152]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000a44:	f000 fe9e 	bl	8001784 <MCAL_GPIO_WritePin>
	_delay_ms(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fe13 	bl	8000674 <_delay_ms>
	LCD_lcd_kick();
 8000a4e:	f7ff ff01 	bl	8000854 <LCD_lcd_kick>
	//MCAL_GPIO_WritePort(LCD_PORT, (uint16_t)(character << 4) & 0xF0 );

	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_4, ( character << 4 & (0x10)) >> 4 );
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	111b      	asrs	r3, r3, #4
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	2110      	movs	r1, #16
 8000a64:	481d      	ldr	r0, [pc, #116]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000a66:	f000 fe8d 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_5, (character  << 4 & (0x20)) >> 5);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	011b      	lsls	r3, r3, #4
 8000a6e:	115b      	asrs	r3, r3, #5
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000a7e:	f000 fe81 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_6, (character  << 4 & (0x40)) >> 6);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	011b      	lsls	r3, r3, #4
 8000a86:	119b      	asrs	r3, r3, #6
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000a96:	f000 fe75 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, GPIO_PIN_7, (character  << 4 & (0x80)) >> 7);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	11db      	asrs	r3, r3, #7
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000aae:	f000 fe69 	bl	8001784 <MCAL_GPIO_WritePin>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000aba:	f000 fe63 	bl	8001784 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 1);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <LCD_WRITE_CHAR+0x108>)
 8000ac6:	f000 fe5d 	bl	8001784 <MCAL_GPIO_WritePin>
	_delay_ms(1);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fdd2 	bl	8000674 <_delay_ms>
	LCD_lcd_kick ();
 8000ad0:	f7ff fec0 	bl	8000854 <LCD_lcd_kick>

#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <LCD_WRITE_STRING>:


void LCD_WRITE_STRING(char* string){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
	while (*string != '\0')
 8000aec:	e01c      	b.n	8000b28 <LCD_WRITE_STRING+0x48>
	{
		count++;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff69 	bl	80009d4 <LCD_WRITE_CHAR>
		if (count == 16)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d104      	bne.n	8000b12 <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f7ff feb8 	bl	8000880 <LCD_GOTO_XY>
 8000b10:	e00a      	b.n	8000b28 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b20      	cmp	r3, #32
 8000b16:	d107      	bne.n	8000b28 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 8000b18:	f7ff fe94 	bl	8000844 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff feae 	bl	8000880 <LCD_GOTO_XY>
			count = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
	while (*string != '\0')
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1de      	bne.n	8000aee <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <RFID_CARD_ENTRY_INIT>:




void RFID_CARD_ENTRY_INIT(USART_TypeDef *USARTx)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	GBuart_ENTRY_cnfg.BaudRate=UART_BaudRate_9600;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b46:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b4a:	605a      	str	r2, [r3, #4]
	GBuart_ENTRY_cnfg.HwFlowCtl=UART_HwFlowCtl_NONE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	72da      	strb	r2, [r3, #11]
	GBuart_ENTRY_cnfg.IRQ_Enable=UART_IRQ_Enable_RXNEIE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b54:	2220      	movs	r2, #32
 8000b56:	731a      	strb	r2, [r3, #12]
	GBuart_ENTRY_cnfg.P_IRQ_CallBack=UartRXNEI_ENTRY_CALLBACK;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b5a:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <RFID_CARD_ENTRY_INIT+0x54>)
 8000b5c:	611a      	str	r2, [r3, #16]
	GBuart_ENTRY_cnfg.Parity=UART_Parity__NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	725a      	strb	r2, [r3, #9]
	GBuart_ENTRY_cnfg.Payload_Length=UART_Payload_Length_8B;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	721a      	strb	r2, [r3, #8]
	GBuart_ENTRY_cnfg.StopBits=UART_StopBits__1;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	729a      	strb	r2, [r3, #10]
	GBuart_ENTRY_cnfg.USART_Mode=UART_MODE_RX;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	701a      	strb	r2, [r3, #0]
	MCAL_UART_GPIO_Set_Pins(USARTx);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f001 f9c0 	bl	8001efc <MCAL_UART_GPIO_Set_Pins>
	MCAL_UART_Init(USARTx, &GBuart_ENTRY_cnfg);
 8000b7c:	4903      	ldr	r1, [pc, #12]	; (8000b8c <RFID_CARD_ENTRY_INIT+0x50>)
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f001 f8bc 	bl	8001cfc <MCAL_UART_Init>


}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000098 	.word	0x20000098
 8000b90:	08000dbd 	.word	0x08000dbd

08000b94 <RFID_CARD_EXIT_INIT>:



void RFID_CARD_EXIT_INIT(USART_TypeDef *USARTx)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	GBuart_EXIT_cnfg.BaudRate=UART_BaudRate_9600;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000b9e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ba2:	605a      	str	r2, [r3, #4]
	GBuart_EXIT_cnfg.HwFlowCtl=UART_HwFlowCtl_NONE;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	72da      	strb	r2, [r3, #11]
	GBuart_EXIT_cnfg.IRQ_Enable=UART_IRQ_Enable_RXNEIE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000bac:	2220      	movs	r2, #32
 8000bae:	731a      	strb	r2, [r3, #12]
	GBuart_EXIT_cnfg.P_IRQ_CallBack=UartRXNEI_EXIT_CALLBACK;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <RFID_CARD_EXIT_INIT+0x54>)
 8000bb4:	611a      	str	r2, [r3, #16]
	GBuart_EXIT_cnfg.Parity=UART_Parity__NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	725a      	strb	r2, [r3, #9]
	GBuart_EXIT_cnfg.Payload_Length=UART_Payload_Length_8B;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	721a      	strb	r2, [r3, #8]
	GBuart_EXIT_cnfg.StopBits=UART_StopBits__1;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	729a      	strb	r2, [r3, #10]
	GBuart_EXIT_cnfg.USART_Mode=UART_MODE_RX;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	701a      	strb	r2, [r3, #0]
	MCAL_UART_GPIO_Set_Pins(USARTx);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f001 f994 	bl	8001efc <MCAL_UART_GPIO_Set_Pins>
	MCAL_UART_Init(USARTx, &GBuart_EXIT_cnfg);
 8000bd4:	4903      	ldr	r1, [pc, #12]	; (8000be4 <RFID_CARD_EXIT_INIT+0x50>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f001 f890 	bl	8001cfc <MCAL_UART_Init>


}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000ac 	.word	0x200000ac
 8000be8:	08000e1d 	.word	0x08000e1d

08000bec <RFID_CARD_ENTRY_READ>:



void RFID_CARD_ENTRY_READ(char* ID_Buffer,uint8_t Length)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
	uint8_t i=0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<Length;i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e009      	b.n	8000c16 <RFID_CARD_ENTRY_READ+0x2a>
	{
		ID_Buffer[i]=RFID_ID_ENTRY_Buffer[i];
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	440b      	add	r3, r1
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <RFID_CARD_ENTRY_READ+0x40>)
 8000c0c:	5c8a      	ldrb	r2, [r1, r2]
 8000c0e:	701a      	strb	r2, [r3, #0]
	for(i=0;i<Length;i++)
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	3301      	adds	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	7bfa      	ldrb	r2, [r7, #15]
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d3f1      	bcc.n	8000c02 <RFID_CARD_ENTRY_READ+0x16>

	}

}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000084 	.word	0x20000084

08000c30 <RFID_CARD_EXIT_READ>:


void RFID_CARD_EXIT_READ(char* ID_Buffer,uint8_t Length)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	70fb      	strb	r3, [r7, #3]
	uint8_t i=0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<Length;i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e009      	b.n	8000c5a <RFID_CARD_EXIT_READ+0x2a>
	{
		ID_Buffer[i]=RFID_ID_EXIT_Buffer[i];
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <RFID_CARD_EXIT_READ+0x40>)
 8000c50:	5c8a      	ldrb	r2, [r1, r2]
 8000c52:	701a      	strb	r2, [r3, #0]
	for(i=0;i<Length;i++)
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	3301      	adds	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	7bfa      	ldrb	r2, [r7, #15]
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d3f1      	bcc.n	8000c46 <RFID_CARD_EXIT_READ+0x16>

	}

}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000088 	.word	0x20000088

08000c74 <RFID_CARD_ID_ENTRY_CHECK>:



DRIVER_ID_STATUS RFID_CARD_ID_ENTRY_CHECK(char* RFID_ID_Entry_Buffer,uint8_t ID_Length,uint8_t ID_Num)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
 8000c80:	4613      	mov	r3, r2
 8000c82:	70bb      	strb	r3, [r7, #2]
	uint8_t i,j;
	uint8_t L_Stop=0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	733b      	strb	r3, [r7, #12]
	DRIVER_ID_STATUS ID_State;


	for(j=0,RFID_ID_Address=16;j<ID_Num;j++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73bb      	strb	r3, [r7, #14]
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <RFID_CARD_ID_ENTRY_CHECK+0x94>)
 8000c8e:	2210      	movs	r2, #16
 8000c90:	801a      	strh	r2, [r3, #0]
 8000c92:	e02e      	b.n	8000cf2 <RFID_CARD_ID_ENTRY_CHECK+0x7e>
	{
		EEPROM_READSEQUENCE(SPI1,GPIOA,GPIO_PIN_4, EEPROM_ENTRY_ID,RFID_ID_Address,4);
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <RFID_CARD_ID_ENTRY_CHECK+0x94>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	9201      	str	r2, [sp, #4]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <RFID_CARD_ID_ENTRY_CHECK+0x98>)
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	491b      	ldr	r1, [pc, #108]	; (8000d10 <RFID_CARD_ID_ENTRY_CHECK+0x9c>)
 8000ca4:	481b      	ldr	r0, [pc, #108]	; (8000d14 <RFID_CARD_ID_ENTRY_CHECK+0xa0>)
 8000ca6:	f7ff fbad 	bl	8000404 <EEPROM_READSEQUENCE>
		for(i=0;i<ID_Length;i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e010      	b.n	8000cd2 <RFID_CARD_ID_ENTRY_CHECK+0x5e>
		{
			if(*(RFID_ID_Entry_Buffer + i) != EEPROM_ENTRY_ID[i])
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	4914      	ldr	r1, [pc, #80]	; (8000d0c <RFID_CARD_ID_ENTRY_CHECK+0x98>)
 8000cbc:	5ccb      	ldrb	r3, [r1, r3]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d002      	beq.n	8000cc8 <RFID_CARD_ID_ENTRY_CHECK+0x54>
			{
				ID_State=Unauthorized;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	737b      	strb	r3, [r7, #13]
				break;
 8000cc6:	e008      	b.n	8000cda <RFID_CARD_ID_ENTRY_CHECK+0x66>
			}
			ID_State=Authorized;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	737b      	strb	r3, [r7, #13]
		for(i=0;i<ID_Length;i++)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d3ea      	bcc.n	8000cb0 <RFID_CARD_ID_ENTRY_CHECK+0x3c>

		}

		if(ID_State==Authorized) break;
 8000cda:	7b7b      	ldrb	r3, [r7, #13]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00d      	beq.n	8000cfc <RFID_CARD_ID_ENTRY_CHECK+0x88>
		RFID_ID_Address+=16;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <RFID_CARD_ID_ENTRY_CHECK+0x94>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	3310      	adds	r3, #16
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <RFID_CARD_ID_ENTRY_CHECK+0x94>)
 8000cea:	801a      	strh	r2, [r3, #0]
	for(j=0,RFID_ID_Address=16;j<ID_Num;j++)
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	73bb      	strb	r3, [r7, #14]
 8000cf2:	7bba      	ldrb	r2, [r7, #14]
 8000cf4:	78bb      	ldrb	r3, [r7, #2]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d3cc      	bcc.n	8000c94 <RFID_CARD_ID_ENTRY_CHECK+0x20>
 8000cfa:	e000      	b.n	8000cfe <RFID_CARD_ID_ENTRY_CHECK+0x8a>
		if(ID_State==Authorized) break;
 8000cfc:	bf00      	nop
	}


	return ID_State;
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]

}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000024 	.word	0x20000024
 8000d0c:	2000008c 	.word	0x2000008c
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40013000 	.word	0x40013000

08000d18 <RFID_CARD_ID_EXIT_CHECK>:




DRIVER_ID_STATUS RFID_CARD_ID_EXIT_CHECK(char* RFID_ID_EXIT_Buffer,uint8_t ID_Length,uint8_t ID_Num)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
 8000d24:	4613      	mov	r3, r2
 8000d26:	70bb      	strb	r3, [r7, #2]
	uint8_t i,j;
	uint8_t L_Stop=0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	733b      	strb	r3, [r7, #12]
	DRIVER_ID_STATUS ID_State;


	for(j=0,RFID_ID_Address=16;j<ID_Num;j++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73bb      	strb	r3, [r7, #14]
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <RFID_CARD_ID_EXIT_CHECK+0x94>)
 8000d32:	2210      	movs	r2, #16
 8000d34:	801a      	strh	r2, [r3, #0]
 8000d36:	e02e      	b.n	8000d96 <RFID_CARD_ID_EXIT_CHECK+0x7e>
	{
		EEPROM_READSEQUENCE(SPI1,GPIOA,GPIO_PIN_4, EEPROM_EXIT_ID,RFID_ID_Address,4);
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <RFID_CARD_ID_EXIT_CHECK+0x94>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	9201      	str	r2, [sp, #4]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <RFID_CARD_ID_EXIT_CHECK+0x98>)
 8000d44:	2210      	movs	r2, #16
 8000d46:	491b      	ldr	r1, [pc, #108]	; (8000db4 <RFID_CARD_ID_EXIT_CHECK+0x9c>)
 8000d48:	481b      	ldr	r0, [pc, #108]	; (8000db8 <RFID_CARD_ID_EXIT_CHECK+0xa0>)
 8000d4a:	f7ff fb5b 	bl	8000404 <EEPROM_READSEQUENCE>
		for(i=0;i<ID_Length;i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e010      	b.n	8000d76 <RFID_CARD_ID_EXIT_CHECK+0x5e>
		{
			if(*(RFID_ID_EXIT_Buffer + i) != EEPROM_EXIT_ID[i])
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	4914      	ldr	r1, [pc, #80]	; (8000db0 <RFID_CARD_ID_EXIT_CHECK+0x98>)
 8000d60:	5ccb      	ldrb	r3, [r1, r3]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d002      	beq.n	8000d6c <RFID_CARD_ID_EXIT_CHECK+0x54>
			{
				ID_State=Unauthorized;
 8000d66:	2301      	movs	r3, #1
 8000d68:	737b      	strb	r3, [r7, #13]
				break;
 8000d6a:	e008      	b.n	8000d7e <RFID_CARD_ID_EXIT_CHECK+0x66>
			}
			ID_State=Authorized;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	737b      	strb	r3, [r7, #13]
		for(i=0;i<ID_Length;i++)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d3ea      	bcc.n	8000d54 <RFID_CARD_ID_EXIT_CHECK+0x3c>

		}

		if(ID_State==Authorized) break;
 8000d7e:	7b7b      	ldrb	r3, [r7, #13]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00d      	beq.n	8000da0 <RFID_CARD_ID_EXIT_CHECK+0x88>
		RFID_ID_Address+=16;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <RFID_CARD_ID_EXIT_CHECK+0x94>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	3310      	adds	r3, #16
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <RFID_CARD_ID_EXIT_CHECK+0x94>)
 8000d8e:	801a      	strh	r2, [r3, #0]
	for(j=0,RFID_ID_Address=16;j<ID_Num;j++)
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	3301      	adds	r3, #1
 8000d94:	73bb      	strb	r3, [r7, #14]
 8000d96:	7bba      	ldrb	r2, [r7, #14]
 8000d98:	78bb      	ldrb	r3, [r7, #2]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3cc      	bcc.n	8000d38 <RFID_CARD_ID_EXIT_CHECK+0x20>
 8000d9e:	e000      	b.n	8000da2 <RFID_CARD_ID_EXIT_CHECK+0x8a>
		if(ID_State==Authorized) break;
 8000da0:	bf00      	nop
	}


	return ID_State;
 8000da2:	7b7b      	ldrb	r3, [r7, #13]

}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000024 	.word	0x20000024
 8000db0:	20000090 	.word	0x20000090
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40013000 	.word	0x40013000

08000dbc <UartRXNEI_ENTRY_CALLBACK>:




void UartRXNEI_ENTRY_CALLBACK(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	static uint8_t Index=0;
	uint16_t RXNE_ENTRY_Buffer;

	MCAL_UART_ReceiveData(USART1,&RXNE_ENTRY_Buffer, disable);
 8000dc2:	1dbb      	adds	r3, r7, #6
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4810      	ldr	r0, [pc, #64]	; (8000e0c <UartRXNEI_ENTRY_CALLBACK+0x50>)
 8000dca:	f001 f85f 	bl	8001e8c <MCAL_UART_ReceiveData>
	RFID_ID_ENTRY_Buffer[Index]=(char)RXNE_ENTRY_Buffer;
 8000dce:	88f9      	ldrh	r1, [r7, #6]
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <UartRXNEI_ENTRY_CALLBACK+0x54>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	b2c9      	uxtb	r1, r1
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <UartRXNEI_ENTRY_CALLBACK+0x58>)
 8000dda:	5499      	strb	r1, [r3, r2]

	GB_S_ENTRY_READRFID=Stop_ReadRFID_ENTRY;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <UartRXNEI_ENTRY_CALLBACK+0x5c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]


	if(Index == 3)
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <UartRXNEI_ENTRY_CALLBACK+0x54>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d106      	bne.n	8000df8 <UartRXNEI_ENTRY_CALLBACK+0x3c>
	{
		GB_S_ENTRY_READRFID=Start_ReadRFID_ENTRY;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <UartRXNEI_ENTRY_CALLBACK+0x5c>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
		Index=0;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <UartRXNEI_ENTRY_CALLBACK+0x54>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	e005      	b.n	8000e04 <UartRXNEI_ENTRY_CALLBACK+0x48>
		return ;
	}

	Index++;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <UartRXNEI_ENTRY_CALLBACK+0x54>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <UartRXNEI_ENTRY_CALLBACK+0x54>)
 8000e02:	701a      	strb	r2, [r3, #0]


}
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	200000c0 	.word	0x200000c0
 8000e14:	20000084 	.word	0x20000084
 8000e18:	20000094 	.word	0x20000094

08000e1c <UartRXNEI_EXIT_CALLBACK>:


void UartRXNEI_EXIT_CALLBACK(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
	static uint8_t Index=0;
	uint16_t RXNE_EXIT_Buffer;

	MCAL_UART_ReceiveData(USART2,&RXNE_EXIT_Buffer, disable);
 8000e22:	1dbb      	adds	r3, r7, #6
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	4810      	ldr	r0, [pc, #64]	; (8000e6c <UartRXNEI_EXIT_CALLBACK+0x50>)
 8000e2a:	f001 f82f 	bl	8001e8c <MCAL_UART_ReceiveData>
	RFID_ID_EXIT_Buffer[Index]=(char)RXNE_EXIT_Buffer;
 8000e2e:	88f9      	ldrh	r1, [r7, #6]
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <UartRXNEI_EXIT_CALLBACK+0x54>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	b2c9      	uxtb	r1, r1
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <UartRXNEI_EXIT_CALLBACK+0x58>)
 8000e3a:	5499      	strb	r1, [r3, r2]

	GB_S_EXIT_READRFID=Stop_ReadRFID_EXIT;
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <UartRXNEI_EXIT_CALLBACK+0x5c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]



	if(Index == 3)
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <UartRXNEI_EXIT_CALLBACK+0x54>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d106      	bne.n	8000e58 <UartRXNEI_EXIT_CALLBACK+0x3c>
	{
		GB_S_EXIT_READRFID=Start_ReadRFID_EXIT;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <UartRXNEI_EXIT_CALLBACK+0x5c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
		Index=0;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <UartRXNEI_EXIT_CALLBACK+0x54>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	e005      	b.n	8000e64 <UartRXNEI_EXIT_CALLBACK+0x48>
		return ;
	}

	Index++;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <UartRXNEI_EXIT_CALLBACK+0x54>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <UartRXNEI_EXIT_CALLBACK+0x54>)
 8000e62:	701a      	strb	r2, [r3, #0]


}
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004400 	.word	0x40004400
 8000e70:	200000c1 	.word	0x200000c1
 8000e74:	20000088 	.word	0x20000088
 8000e78:	20000095 	.word	0x20000095

08000e7c <NVIC__EXTI_IRQ_ENABLE>:
 * @retval -none
 * Note-.....
 */

void NVIC__EXTI_IRQ_ENABLE(EXTI_PINCONFIG_t* EXTI_Config)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	EXTI->IMR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 8000e84:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <NVIC__EXTI_IRQ_ENABLE+0xdc>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	8812      	ldrh	r2, [r2, #0]
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	2201      	movs	r2, #1
 8000e90:	408a      	lsls	r2, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	4a30      	ldr	r2, [pc, #192]	; (8000f58 <NVIC__EXTI_IRQ_ENABLE+0xdc>)
 8000e96:	430b      	orrs	r3, r1
 8000e98:	6013      	str	r3, [r2, #0]
	switch(EXTI_Config->EXTI_Map_Pin.IVT_EXTI_IRQn)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7a9b      	ldrb	r3, [r3, #10]
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	d853      	bhi.n	8000f4a <NVIC__EXTI_IRQ_ENABLE+0xce>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <NVIC__EXTI_IRQ_ENABLE+0x2c>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ee9 	.word	0x08000ee9
 8000eac:	08000ef7 	.word	0x08000ef7
 8000eb0:	08000f05 	.word	0x08000f05
 8000eb4:	08000f13 	.word	0x08000f13
 8000eb8:	08000f21 	.word	0x08000f21
 8000ebc:	08000f2f 	.word	0x08000f2f
 8000ec0:	08000f2f 	.word	0x08000f2f
 8000ec4:	08000f2f 	.word	0x08000f2f
 8000ec8:	08000f2f 	.word	0x08000f2f
 8000ecc:	08000f2f 	.word	0x08000f2f
 8000ed0:	08000f3d 	.word	0x08000f3d
 8000ed4:	08000f3d 	.word	0x08000f3d
 8000ed8:	08000f3d 	.word	0x08000f3d
 8000edc:	08000f3d 	.word	0x08000f3d
 8000ee0:	08000f3d 	.word	0x08000f3d
 8000ee4:	08000f3d 	.word	0x08000f3d
	{

	case (EXTI0_IRQ):
						NVIC_IRQ6_EXTI0_ENABLE;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef2:	6013      	str	r3, [r2, #0]
						break;
 8000ef4:	e02a      	b.n	8000f4c <NVIC__EXTI_IRQ_ENABLE+0xd0>
	case (EXTI1_IRQ):
						NVIC_IRQ7_EXTI1_ENABLE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f00:	6013      	str	r3, [r2, #0]
						break;
 8000f02:	e023      	b.n	8000f4c <NVIC__EXTI_IRQ_ENABLE+0xd0>
	case (EXTI2_IRQ):
						NVIC_IRQ8_EXTI2_ENABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
						break;
 8000f10:	e01c      	b.n	8000f4c <NVIC__EXTI_IRQ_ENABLE+0xd0>
	case (EXTI3_IRQ):
						NVIC_IRQ9_EXTI3_ENABLE;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000f18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1c:	6013      	str	r3, [r2, #0]
						break;
 8000f1e:	e015      	b.n	8000f4c <NVIC__EXTI_IRQ_ENABLE+0xd0>

	case (EXTI4_IRQ):
						NVIC_IRQ10_EXTI4_ENABLE;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
						break;
 8000f2c:	e00e      	b.n	8000f4c <NVIC__EXTI_IRQ_ENABLE+0xd0>
	case (EXTI5_IRQ):
	case (EXTI6_IRQ):
	case (EXTI7_IRQ):
	case (EXTI8_IRQ):
	case (EXTI9_IRQ):
						NVIC_IRQ23_EXTI5_9_ENABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <NVIC__EXTI_IRQ_ENABLE+0xe0>)
 8000f34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f38:	6013      	str	r3, [r2, #0]
						break;
 8000f3a:	e007      	b.n	8000f4c <NVIC__EXTI_IRQ_ENABLE+0xd0>
	case (EXTI12_IRQ):
	case (EXTI13_IRQ):
	case (EXTI14_IRQ):
	case (EXTI15_IRQ):

						NVIC_IRQ40_EXTI10_15_ENABLE;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <NVIC__EXTI_IRQ_ENABLE+0xe4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <NVIC__EXTI_IRQ_ENABLE+0xe4>)
 8000f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f46:	6013      	str	r3, [r2, #0]
						break;
 8000f48:	e000      	b.n	8000f4c <NVIC__EXTI_IRQ_ENABLE+0xd0>
	default:
						break;
 8000f4a:	bf00      	nop


	}


}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40010400 	.word	0x40010400
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000e104 	.word	0xe000e104

08000f64 <NVIC__EXTI_IRQ_DISABLE>:
 * Note-.....
 */


void NVIC__EXTI_IRQ_DISABLE(EXTI_PINCONFIG_t* EXTI_Config)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

	EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <NVIC__EXTI_IRQ_DISABLE+0xe0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	8812      	ldrh	r2, [r2, #0]
 8000f74:	4611      	mov	r1, r2
 8000f76:	2201      	movs	r2, #1
 8000f78:	408a      	lsls	r2, r1
 8000f7a:	43d2      	mvns	r2, r2
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4a31      	ldr	r2, [pc, #196]	; (8001044 <NVIC__EXTI_IRQ_DISABLE+0xe0>)
 8000f80:	400b      	ands	r3, r1
 8000f82:	6013      	str	r3, [r2, #0]
	switch(EXTI_Config->EXTI_Map_Pin.IVT_EXTI_IRQn)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7a9b      	ldrb	r3, [r3, #10]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d854      	bhi.n	8001036 <NVIC__EXTI_IRQ_DISABLE+0xd2>
 8000f8c:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <NVIC__EXTI_IRQ_DISABLE+0x30>)
 8000f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f92:	bf00      	nop
 8000f94:	08000fd5 	.word	0x08000fd5
 8000f98:	08000fe3 	.word	0x08000fe3
 8000f9c:	08000ff1 	.word	0x08000ff1
 8000fa0:	08000fff 	.word	0x08000fff
 8000fa4:	0800100d 	.word	0x0800100d
 8000fa8:	0800101b 	.word	0x0800101b
 8000fac:	0800101b 	.word	0x0800101b
 8000fb0:	0800101b 	.word	0x0800101b
 8000fb4:	0800101b 	.word	0x0800101b
 8000fb8:	0800101b 	.word	0x0800101b
 8000fbc:	08001029 	.word	0x08001029
 8000fc0:	08001029 	.word	0x08001029
 8000fc4:	08001029 	.word	0x08001029
 8000fc8:	08001029 	.word	0x08001029
 8000fcc:	08001029 	.word	0x08001029
 8000fd0:	08001029 	.word	0x08001029
	{

	case (EXTI0_IRQ):
						NVIC_IRQ6_EXTI0_DISABLE;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8000fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fde:	6013      	str	r3, [r2, #0]
						break;
 8000fe0:	e02a      	b.n	8001038 <NVIC__EXTI_IRQ_DISABLE+0xd4>
	case (EXTI1_IRQ):
						NVIC_IRQ7_EXTI1_DISABLE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a18      	ldr	r2, [pc, #96]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8000fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fec:	6013      	str	r3, [r2, #0]
						break;
 8000fee:	e023      	b.n	8001038 <NVIC__EXTI_IRQ_DISABLE+0xd4>
	case (EXTI2_IRQ):
						NVIC_IRQ8_EXTI2_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8000ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
						break;
 8000ffc:	e01c      	b.n	8001038 <NVIC__EXTI_IRQ_DISABLE+0xd4>
	case (EXTI3_IRQ):
					    NVIC_IRQ9_EXTI3_DISABLE;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8001004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001008:	6013      	str	r3, [r2, #0]
						break;
 800100a:	e015      	b.n	8001038 <NVIC__EXTI_IRQ_DISABLE+0xd4>

	case (EXTI4_IRQ):
						NVIC_IRQ10_EXTI4_DISABLE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8001012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
						break;
 8001018:	e00e      	b.n	8001038 <NVIC__EXTI_IRQ_DISABLE+0xd4>
	case (EXTI5_IRQ):
	case (EXTI6_IRQ):
	case (EXTI7_IRQ):
	case (EXTI8_IRQ):
	case (EXTI9_IRQ):
						NVIC_IRQ23_EXTI5_9_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <NVIC__EXTI_IRQ_DISABLE+0xe4>)
 8001020:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001024:	6013      	str	r3, [r2, #0]
						break;
 8001026:	e007      	b.n	8001038 <NVIC__EXTI_IRQ_DISABLE+0xd4>
	case (EXTI12_IRQ):
	case (EXTI13_IRQ):
	case (EXTI14_IRQ):
	case (EXTI15_IRQ):

						NVIC_IRQ40_EXTI10_15_DISABLE;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <NVIC__EXTI_IRQ_DISABLE+0xe8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <NVIC__EXTI_IRQ_DISABLE+0xe8>)
 800102e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
						break;
 8001034:	e000      	b.n	8001038 <NVIC__EXTI_IRQ_DISABLE+0xd4>
	default:
						break;
 8001036:	bf00      	nop

	}

}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40010400 	.word	0x40010400
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000e104 	.word	0xe000e104

08001050 <MCAL_EXTI_Init>:
 * @param [in] - EXTI_PINCONFIG_t* EXTI_Config
 * @retval -none
 * Note-.....
 */
void MCAL_EXTI_Init(EXTI_PINCONFIG_t* EXTI_Config)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

	// Configure GPIO PIN As FLOATING Input PIN
	MCAL_GPIO_Enable_ClocK(EXTI_Config->EXTI_Map_Pin.GPIOX);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f9e3 	bl	8001428 <MCAL_GPIO_Enable_ClocK>

	GPIO_PinConfig_t GPIO_EXTI_Config;
	GPIO_EXTI_Config.GPIO_PinNumber=EXTI_Config->EXTI_Map_Pin.EXTI_Pin_Number;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	891b      	ldrh	r3, [r3, #8]
 8001066:	813b      	strh	r3, [r7, #8]
	GPIO_EXTI_Config.GPIO_Mode=GPIO_Mode_Inp_Floating;
 8001068:	2301      	movs	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
	GPIO_EXTI_Config.GPIO_Speed= GPIO_Speed_Reset_State;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Map_Pin.GPIOX,&GPIO_EXTI_Config);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f107 0208 	add.w	r2, r7, #8
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f000 faca 	bl	8001614 <MCAL_GPIO_Init>

	// Mapping Between GPIO AND EXTI by AFIO



	uint8_t AFIO_EXTICR_Index=EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number/4;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	b29b      	uxth	r3, r3
 8001088:	75fb      	strb	r3, [r7, #23]
	uint8_t EXTIx_Position= (EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number % 4)*4;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	75bb      	strb	r3, [r7, #22]
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~ (0xF <<EXTIx_Position) ;
 800109a:	4a54      	ldr	r2, [pc, #336]	; (80011ec <MCAL_EXTI_Init+0x19c>)
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	3302      	adds	r3, #2
 80010a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	210f      	movs	r1, #15
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	494e      	ldr	r1, [pc, #312]	; (80011ec <MCAL_EXTI_Init+0x19c>)
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	4002      	ands	r2, r0
 80010b6:	3302      	adds	r3, #2
 80010b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((EXTI_GPIOx(EXTI_Config->EXTI_Map_Pin.GPIOX) & 0xF ) << EXTIx_Position);
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <MCAL_EXTI_Init+0x19c>)
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MCAL_EXTI_Init+0x1a0>)
 80010cc:	428b      	cmp	r3, r1
 80010ce:	d016      	beq.n	80010fe <MCAL_EXTI_Init+0xae>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4947      	ldr	r1, [pc, #284]	; (80011f4 <MCAL_EXTI_Init+0x1a4>)
 80010d6:	428b      	cmp	r3, r1
 80010d8:	d00f      	beq.n	80010fa <MCAL_EXTI_Init+0xaa>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4946      	ldr	r1, [pc, #280]	; (80011f8 <MCAL_EXTI_Init+0x1a8>)
 80010e0:	428b      	cmp	r3, r1
 80010e2:	d008      	beq.n	80010f6 <MCAL_EXTI_Init+0xa6>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4944      	ldr	r1, [pc, #272]	; (80011fc <MCAL_EXTI_Init+0x1ac>)
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d101      	bne.n	80010f2 <MCAL_EXTI_Init+0xa2>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e006      	b.n	8001100 <MCAL_EXTI_Init+0xb0>
 80010f2:	2300      	movs	r3, #0
 80010f4:	e004      	b.n	8001100 <MCAL_EXTI_Init+0xb0>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <MCAL_EXTI_Init+0xb0>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <MCAL_EXTI_Init+0xb0>
 80010fe:	2300      	movs	r3, #0
 8001100:	7db9      	ldrb	r1, [r7, #22]
 8001102:	408b      	lsls	r3, r1
 8001104:	4618      	mov	r0, r3
 8001106:	4939      	ldr	r1, [pc, #228]	; (80011ec <MCAL_EXTI_Init+0x19c>)
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	4302      	orrs	r2, r0
 800110c:	3302      	adds	r3, #2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	8812      	ldrh	r2, [r2, #0]
 800111a:	4611      	mov	r1, r2
 800111c:	2201      	movs	r2, #1
 800111e:	408a      	lsls	r2, r1
 8001120:	43d2      	mvns	r2, r2
 8001122:	4611      	mov	r1, r2
 8001124:	4a36      	ldr	r2, [pc, #216]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 8001126:	400b      	ands	r3, r1
 8001128:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	4611      	mov	r1, r2
 8001134:	2201      	movs	r2, #1
 8001136:	408a      	lsls	r2, r1
 8001138:	43d2      	mvns	r2, r2
 800113a:	4611      	mov	r1, r2
 800113c:	4a30      	ldr	r2, [pc, #192]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 800113e:	400b      	ands	r3, r1
 8001140:	60d3      	str	r3, [r2, #12]

	//Configuration of EXTI
	if(EXTI_Config->EXTI_Trigger_State == EXTI_Rising_Trigger)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b1b      	ldrb	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10b      	bne.n	8001162 <MCAL_EXTI_Init+0x112>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	8812      	ldrh	r2, [r2, #0]
 8001152:	4611      	mov	r1, r2
 8001154:	2201      	movs	r2, #1
 8001156:	408a      	lsls	r2, r1
 8001158:	4611      	mov	r1, r2
 800115a:	4a29      	ldr	r2, [pc, #164]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 800115c:	430b      	orrs	r3, r1
 800115e:	6093      	str	r3, [r2, #8]
 8001160:	e029      	b.n	80011b6 <MCAL_EXTI_Init+0x166>
	}
	else if(EXTI_Config->EXTI_Trigger_State == EXTI_Falling_Trigger)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7b1b      	ldrb	r3, [r3, #12]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10b      	bne.n	8001182 <MCAL_EXTI_Init+0x132>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	4611      	mov	r1, r2
 8001174:	2201      	movs	r2, #1
 8001176:	408a      	lsls	r2, r1
 8001178:	4611      	mov	r1, r2
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 800117c:	430b      	orrs	r3, r1
 800117e:	60d3      	str	r3, [r2, #12]
 8001180:	e019      	b.n	80011b6 <MCAL_EXTI_Init+0x166>
	}
	else if(EXTI_Config->EXTI_Trigger_State == EXTI_Rising_Falling_Trigger)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7b1b      	ldrb	r3, [r3, #12]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d115      	bne.n	80011b6 <MCAL_EXTI_Init+0x166>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	8812      	ldrh	r2, [r2, #0]
 8001192:	4611      	mov	r1, r2
 8001194:	2201      	movs	r2, #1
 8001196:	408a      	lsls	r2, r1
 8001198:	4611      	mov	r1, r2
 800119a:	4a19      	ldr	r2, [pc, #100]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 800119c:	430b      	orrs	r3, r1
 800119e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number);
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	8812      	ldrh	r2, [r2, #0]
 80011a8:	4611      	mov	r1, r2
 80011aa:	2201      	movs	r2, #1
 80011ac:	408a      	lsls	r2, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MCAL_EXTI_Init+0x1b0>)
 80011b2:	430b      	orrs	r3, r1
 80011b4:	60d3      	str	r3, [r2, #12]
	}

	//CallBack Function.
	GP_FuncCallBack[EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number]= EXTI_Config->PF_IRQ_CALLBACK;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4a10      	ldr	r2, [pc, #64]	; (8001204 <MCAL_EXTI_Init+0x1b4>)
 80011c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Enable OR Disable EXTIx & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b5b      	ldrb	r3, [r3, #13]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d103      	bne.n	80011d6 <MCAL_EXTI_Init+0x186>
	{
		NVIC__EXTI_IRQ_ENABLE(EXTI_Config);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fe54 	bl	8000e7c <NVIC__EXTI_IRQ_ENABLE>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
	{
		NVIC__EXTI_IRQ_DISABLE(EXTI_Config);
	}

}
 80011d4:	e006      	b.n	80011e4 <MCAL_EXTI_Init+0x194>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7b5b      	ldrb	r3, [r3, #13]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <MCAL_EXTI_Init+0x194>
		NVIC__EXTI_IRQ_DISABLE(EXTI_Config);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fec0 	bl	8000f64 <NVIC__EXTI_IRQ_DISABLE>
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010000 	.word	0x40010000
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40011400 	.word	0x40011400
 8001200:	40010400 	.word	0x40010400
 8001204:	200000c4 	.word	0x200000c4

08001208 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	GP_FuncCallBack[0]();
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <EXTI0_IRQHandler+0x1c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4798      	blx	r3
	EXTI->PR |= (1 << 0);
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <EXTI0_IRQHandler+0x20>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <EXTI0_IRQHandler+0x20>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6153      	str	r3, [r2, #20]

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200000c4 	.word	0x200000c4
 8001228:	40010400 	.word	0x40010400

0800122c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	GP_FuncCallBack[1]();
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <EXTI1_IRQHandler+0x1c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4798      	blx	r3
	EXTI->PR |= (1 << 1);
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <EXTI1_IRQHandler+0x20>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <EXTI1_IRQHandler+0x20>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6153      	str	r3, [r2, #20]

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000c4 	.word	0x200000c4
 800124c:	40010400 	.word	0x40010400

08001250 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	GP_FuncCallBack[2]();
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <EXTI2_IRQHandler+0x1c>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4798      	blx	r3
	EXTI->PR |= (1 << 2);
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <EXTI2_IRQHandler+0x20>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <EXTI2_IRQHandler+0x20>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6153      	str	r3, [r2, #20]


}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000c4 	.word	0x200000c4
 8001270:	40010400 	.word	0x40010400

08001274 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	GP_FuncCallBack[3]();
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <EXTI3_IRQHandler+0x1c>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4798      	blx	r3
	EXTI->PR |= (1 << 3);
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <EXTI3_IRQHandler+0x20>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <EXTI3_IRQHandler+0x20>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6153      	str	r3, [r2, #20]

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000c4 	.word	0x200000c4
 8001294:	40010400 	.word	0x40010400

08001298 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	GP_FuncCallBack[4]();
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <EXTI4_IRQHandler+0x1c>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	4798      	blx	r3
	EXTI->PR |= (1 << 4);
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <EXTI4_IRQHandler+0x20>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <EXTI4_IRQHandler+0x20>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	6153      	str	r3, [r2, #20]

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200000c4 	.word	0x200000c4
 80012b8:	40010400 	.word	0x40010400

080012bc <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { GP_FuncCallBack[5]();   EXTI->PR |= (1 << 5); }
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <EXTI9_5_IRQHandler+0x22>
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <EXTI9_5_IRQHandler+0xa4>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	4798      	blx	r3
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<6)) { GP_FuncCallBack[6]();   EXTI->PR |= (1 << 6); }
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d008      	beq.n	80012fc <EXTI9_5_IRQHandler+0x40>
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <EXTI9_5_IRQHandler+0xa4>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4798      	blx	r3
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 80012f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fa:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<7)) { GP_FuncCallBack[7]();   EXTI->PR |= (1 << 7); }
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <EXTI9_5_IRQHandler+0x5e>
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <EXTI9_5_IRQHandler+0xa4>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	4798      	blx	r3
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<8)) { GP_FuncCallBack[8]();   EXTI->PR |= (1 << 8); }
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d008      	beq.n	8001338 <EXTI9_5_IRQHandler+0x7c>
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <EXTI9_5_IRQHandler+0xa4>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4798      	blx	r3
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 8001332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001336:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<9)) { GP_FuncCallBack[9]();   EXTI->PR |= (1 << 9); }
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <EXTI9_5_IRQHandler+0x9a>
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <EXTI9_5_IRQHandler+0xa4>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	4798      	blx	r3
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a03      	ldr	r2, [pc, #12]	; (800135c <EXTI9_5_IRQHandler+0xa0>)
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	6153      	str	r3, [r2, #20]
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40010400 	.word	0x40010400
 8001360:	200000c4 	.word	0x200000c4

08001364 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { GP_FuncCallBack[10]();   EXTI->PR |= (1 << 10); }
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <EXTI15_10_IRQHandler+0x22>
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <EXTI15_10_IRQHandler+0xc0>)
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	4798      	blx	r3
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 8001380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001384:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<11)) { GP_FuncCallBack[11]();   EXTI->PR |= (1 << 11); }
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138e:	2b00      	cmp	r3, #0
 8001390:	d008      	beq.n	80013a4 <EXTI15_10_IRQHandler+0x40>
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <EXTI15_10_IRQHandler+0xc0>)
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	4798      	blx	r3
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 800139e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a2:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<12)) { GP_FuncCallBack[12]();   EXTI->PR |= (1 << 12); }
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <EXTI15_10_IRQHandler+0x5e>
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <EXTI15_10_IRQHandler+0xc0>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4798      	blx	r3
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a19      	ldr	r2, [pc, #100]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c0:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<13)) { GP_FuncCallBack[13]();   EXTI->PR |= (1 << 13); }
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <EXTI15_10_IRQHandler+0x7c>
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <EXTI15_10_IRQHandler+0xc0>)
 80013d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d2:	4798      	blx	r3
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013de:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<14)) { GP_FuncCallBack[14]();   EXTI->PR |= (1 << 14); }
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <EXTI15_10_IRQHandler+0x9a>
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <EXTI15_10_IRQHandler+0xc0>)
 80013ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f0:	4798      	blx	r3
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<15)) { GP_FuncCallBack[15]();   EXTI->PR |= (1 << 15); }
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <EXTI15_10_IRQHandler+0xb8>
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <EXTI15_10_IRQHandler+0xc0>)
 800140c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140e:	4798      	blx	r3
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	4a02      	ldr	r2, [pc, #8]	; (8001420 <EXTI15_10_IRQHandler+0xbc>)
 8001416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141a:	6153      	str	r3, [r2, #20]

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40010400 	.word	0x40010400
 8001424:	200000c4 	.word	0x200000c4

08001428 <MCAL_GPIO_Enable_ClocK>:
 * @retval -Not
 * Note-.....
 */

void MCAL_GPIO_Enable_ClocK(GPIO_TypedDef* GPIOx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(  GPIOx ==  GPIOA)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <MCAL_GPIO_Enable_ClocK+0x68>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d106      	bne.n	8001446 <MCAL_GPIO_Enable_ClocK+0x1e>
	{
		GPIOA_CLOCK_ENABLE;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MCAL_GPIO_Enable_ClocK+0x6c>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a15      	ldr	r2, [pc, #84]	; (8001494 <MCAL_GPIO_Enable_ClocK+0x6c>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
	}
	else
	{
		//DoNothing
	}
}
 8001444:	e01f      	b.n	8001486 <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOB)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <MCAL_GPIO_Enable_ClocK+0x70>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d106      	bne.n	800145c <MCAL_GPIO_Enable_ClocK+0x34>
		GPIOB_CLOCK_ENABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MCAL_GPIO_Enable_ClocK+0x6c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <MCAL_GPIO_Enable_ClocK+0x6c>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6193      	str	r3, [r2, #24]
}
 800145a:	e014      	b.n	8001486 <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOC)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <MCAL_GPIO_Enable_ClocK+0x74>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d106      	bne.n	8001472 <MCAL_GPIO_Enable_ClocK+0x4a>
		GPIOC_CLOCK_ENABLE;
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MCAL_GPIO_Enable_ClocK+0x6c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <MCAL_GPIO_Enable_ClocK+0x6c>)
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	6193      	str	r3, [r2, #24]
}
 8001470:	e009      	b.n	8001486 <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOD)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <MCAL_GPIO_Enable_ClocK+0x78>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d105      	bne.n	8001486 <MCAL_GPIO_Enable_ClocK+0x5e>
		GPIOD_CLOCK_ENABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MCAL_GPIO_Enable_ClocK+0x6c>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <MCAL_GPIO_Enable_ClocK+0x6c>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	6193      	str	r3, [r2, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40010800 	.word	0x40010800
 8001494:	40021000 	.word	0x40021000
 8001498:	40010c00 	.word	0x40010c00
 800149c:	40011000 	.word	0x40011000
 80014a0:	40011400 	.word	0x40011400

080014a4 <Get_Pos_CRLH>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio
 * @retval -Suitable Pos for Config_Register [uint8_t]
 * */

uint8_t Get_Pos_CRLH(uint16_t PinNumber)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b4:	f000 80a5 	beq.w	8001602 <Get_Pos_CRLH+0x15e>
 80014b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014bc:	f300 80a3 	bgt.w	8001606 <Get_Pos_CRLH+0x162>
 80014c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014c4:	f000 809b 	beq.w	80015fe <Get_Pos_CRLH+0x15a>
 80014c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014cc:	f300 809b 	bgt.w	8001606 <Get_Pos_CRLH+0x162>
 80014d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d4:	f000 8091 	beq.w	80015fa <Get_Pos_CRLH+0x156>
 80014d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014dc:	f300 8093 	bgt.w	8001606 <Get_Pos_CRLH+0x162>
 80014e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e4:	f000 8087 	beq.w	80015f6 <Get_Pos_CRLH+0x152>
 80014e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ec:	f300 808b 	bgt.w	8001606 <Get_Pos_CRLH+0x162>
 80014f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014f4:	d07d      	beq.n	80015f2 <Get_Pos_CRLH+0x14e>
 80014f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014fa:	f300 8084 	bgt.w	8001606 <Get_Pos_CRLH+0x162>
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001502:	d074      	beq.n	80015ee <Get_Pos_CRLH+0x14a>
 8001504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001508:	dc7d      	bgt.n	8001606 <Get_Pos_CRLH+0x162>
 800150a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800150e:	d06c      	beq.n	80015ea <Get_Pos_CRLH+0x146>
 8001510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001514:	dc77      	bgt.n	8001606 <Get_Pos_CRLH+0x162>
 8001516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800151a:	d064      	beq.n	80015e6 <Get_Pos_CRLH+0x142>
 800151c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001520:	dc71      	bgt.n	8001606 <Get_Pos_CRLH+0x162>
 8001522:	2b80      	cmp	r3, #128	; 0x80
 8001524:	d05d      	beq.n	80015e2 <Get_Pos_CRLH+0x13e>
 8001526:	2b80      	cmp	r3, #128	; 0x80
 8001528:	dc6d      	bgt.n	8001606 <Get_Pos_CRLH+0x162>
 800152a:	2b20      	cmp	r3, #32
 800152c:	dc48      	bgt.n	80015c0 <Get_Pos_CRLH+0x11c>
 800152e:	2b00      	cmp	r3, #0
 8001530:	dd69      	ble.n	8001606 <Get_Pos_CRLH+0x162>
 8001532:	3b01      	subs	r3, #1
 8001534:	2b1f      	cmp	r3, #31
 8001536:	d866      	bhi.n	8001606 <Get_Pos_CRLH+0x162>
 8001538:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <Get_Pos_CRLH+0x9c>)
 800153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153e:	bf00      	nop
 8001540:	080015c7 	.word	0x080015c7
 8001544:	080015cb 	.word	0x080015cb
 8001548:	08001607 	.word	0x08001607
 800154c:	080015cf 	.word	0x080015cf
 8001550:	08001607 	.word	0x08001607
 8001554:	08001607 	.word	0x08001607
 8001558:	08001607 	.word	0x08001607
 800155c:	080015d3 	.word	0x080015d3
 8001560:	08001607 	.word	0x08001607
 8001564:	08001607 	.word	0x08001607
 8001568:	08001607 	.word	0x08001607
 800156c:	08001607 	.word	0x08001607
 8001570:	08001607 	.word	0x08001607
 8001574:	08001607 	.word	0x08001607
 8001578:	08001607 	.word	0x08001607
 800157c:	080015d7 	.word	0x080015d7
 8001580:	08001607 	.word	0x08001607
 8001584:	08001607 	.word	0x08001607
 8001588:	08001607 	.word	0x08001607
 800158c:	08001607 	.word	0x08001607
 8001590:	08001607 	.word	0x08001607
 8001594:	08001607 	.word	0x08001607
 8001598:	08001607 	.word	0x08001607
 800159c:	08001607 	.word	0x08001607
 80015a0:	08001607 	.word	0x08001607
 80015a4:	08001607 	.word	0x08001607
 80015a8:	08001607 	.word	0x08001607
 80015ac:	08001607 	.word	0x08001607
 80015b0:	08001607 	.word	0x08001607
 80015b4:	08001607 	.word	0x08001607
 80015b8:	08001607 	.word	0x08001607
 80015bc:	080015db 	.word	0x080015db
 80015c0:	2b40      	cmp	r3, #64	; 0x40
 80015c2:	d00c      	beq.n	80015de <Get_Pos_CRLH+0x13a>
 80015c4:	e01f      	b.n	8001606 <Get_Pos_CRLH+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e01e      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80015ca:	2304      	movs	r3, #4
 80015cc:	e01c      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80015ce:	2308      	movs	r3, #8
 80015d0:	e01a      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80015d2:	230c      	movs	r3, #12
 80015d4:	e018      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80015d6:	2310      	movs	r3, #16
 80015d8:	e016      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80015da:	2314      	movs	r3, #20
 80015dc:	e014      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80015de:	2318      	movs	r3, #24
 80015e0:	e012      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80015e2:	231c      	movs	r3, #28
 80015e4:	e010      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e00e      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 80015ea:	2304      	movs	r3, #4
 80015ec:	e00c      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80015ee:	2308      	movs	r3, #8
 80015f0:	e00a      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80015f2:	230c      	movs	r3, #12
 80015f4:	e008      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80015f6:	2310      	movs	r3, #16
 80015f8:	e006      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80015fa:	2314      	movs	r3, #20
 80015fc:	e004      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80015fe:	2318      	movs	r3, #24
 8001600:	e002      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8001602:	231c      	movs	r3, #28
 8001604:	e000      	b.n	8001608 <Get_Pos_CRLH+0x164>
		break;

	default:
		return 0;
 8001606:	2300      	movs	r3, #0


	}

}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <MCAL_GPIO_Init>:
 * Note-You must Create Instant from "GPIO_PinConfig_t" Structure,
 * Before using This func "MCAL_GPIO_Init" and pass it to @param [in] -Address of the PinConfig
 */

void MCAL_GPIO_Init(GPIO_TypedDef* GPIOx, GPIO_PinConfig_t* PinConfig )
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]

	volatile uint32_t* Reg_Config= NULL;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]

	Reg_Config = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &(GPIOx->CRL):  &(GPIOx->CRH) ;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d801      	bhi.n	800162e <MCAL_GPIO_Init+0x1a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	e001      	b.n	8001632 <MCAL_GPIO_Init+0x1e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
	*Reg_Config &= ~(0xF << Get_Pos_CRLH(PinConfig->GPIO_PinNumber) );
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff33 	bl	80014a4 <Get_Pos_CRLH>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	230f      	movs	r3, #15
 8001644:	4093      	lsls	r3, r2
 8001646:	43da      	mvns	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	401a      	ands	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]


	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b04      	cmp	r3, #4
 8001658:	d00b      	beq.n	8001672 <MCAL_GPIO_Init+0x5e>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d007      	beq.n	8001672 <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8001666:	2b06      	cmp	r3, #6
 8001668:	d003      	beq.n	8001672 <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d117      	bne.n	80016a2 <MCAL_GPIO_Init+0x8e>
	{
		*Reg_Config |= (((((PinConfig->GPIO_Mode - 4) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	3b04      	subs	r3, #4
 8001678:	009a      	lsls	r2, r3, #2
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4313      	orrs	r3, r2
 8001680:	f003 040f 	and.w	r4, r3, #15
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff0b 	bl	80014a4 <Get_Pos_CRLH>
 800168e:	4603      	mov	r3, r0
 8001690:	fa04 f203 	lsl.w	r2, r4, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	431a      	orrs	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	bf00      	nop

		}

	}

}
 80016a0:	e058      	b.n	8001754 <MCAL_GPIO_Init+0x140>
		if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_up )
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d11c      	bne.n	80016e4 <MCAL_GPIO_Init+0xd0>
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	8812      	ldrh	r2, [r2, #0]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	009a      	lsls	r2, r3, #2
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	f003 040f 	and.w	r4, r3, #15
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fee9 	bl	80014a4 <Get_Pos_CRLH>
 80016d2:	4603      	mov	r3, r0
 80016d4:	fa04 f203 	lsl.w	r2, r4, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	e037      	b.n	8001754 <MCAL_GPIO_Init+0x140>
		else if (PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_down)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d11e      	bne.n	800172a <MCAL_GPIO_Init+0x116>
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	8812      	ldrh	r2, [r2, #0]
 80016f4:	43d2      	mvns	r2, r2
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode - 1) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	3b01      	subs	r3, #1
 8001702:	009a      	lsls	r2, r3, #2
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4313      	orrs	r3, r2
 800170a:	f003 040f 	and.w	r4, r3, #15
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fec6 	bl	80014a4 <Get_Pos_CRLH>
 8001718:	4603      	mov	r3, r0
 800171a:	fa04 f203 	lsl.w	r2, r4, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	e014      	b.n	8001754 <MCAL_GPIO_Init+0x140>
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009a      	lsls	r2, r3, #2
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4313      	orrs	r3, r2
 8001736:	f003 040f 	and.w	r4, r3, #15
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff feb0 	bl	80014a4 <Get_Pos_CRLH>
 8001744:	4603      	mov	r3, r0
 8001746:	fa04 f203 	lsl.w	r2, r4, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}

0800175c <MCAL_GPIO_ReadPin>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio,
 * @retval -State of Pin, 0 or 1
 * Note-..........................................................
 */
uint8_t  MCAL_GPIO_ReadPin(GPIO_TypedDef* GPIOx,uint16_t PinNumber )
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET) return (uint8_t)GPIO_PIN_SET;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MCAL_GPIO_ReadPin+0x1c>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <MCAL_GPIO_ReadPin+0x1e>
	else return (uint8_t)GPIO_PIN_RESET;
 8001778:	2300      	movs	r3, #0

}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <MCAL_GPIO_WritePin>:
 * @param [in] - Set "Value" which is 0 or 1,
 * @retval -NOT......
 * Note-..........................................................
 */
void MCAL_GPIO_WritePin(GPIO_TypedDef* GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]

	if(Value == (uint8_t) GPIO_PIN_SET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d103      	bne.n	80017a2 <MCAL_GPIO_WritePin+0x1e>
	{
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15), you do not need any or "|" with Atomic Bit Register BSRR
		GPIOx->BSRR = (uint32_t)PinNumber;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	611a      	str	r2, [r3, #16]
	else
	{
		//Bits 31:16 BRy: Port x Reset bit y (y= 0 .. 15),  you do not need any or "|" with Atomic Bit Register BSRR
		GPIOx->BSRR = (uint32_t)(PinNumber << 16);
	}
}
 80017a0:	e004      	b.n	80017ac <MCAL_GPIO_WritePin+0x28>
		GPIOx->BSRR = (uint32_t)(PinNumber << 16);
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
	...

080017b8 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d00a      	beq.n	80017e0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d80a      	bhi.n	80017e4 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d002      	beq.n	80017dc <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 80017d6:	e005      	b.n	80017e4 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
	{
	case 0:

		return HSI_RC_Clk ;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80017da:	e003      	b.n	80017e4 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 80017de:	e001      	b.n	80017e4 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 80017e2:	e7ff      	b.n	80017e4 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	}

}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000
 80017f0:	007a1200 	.word	0x007a1200
 80017f4:	00f42400 	.word	0x00f42400

080017f8 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 80017fc:	f7ff ffdc 	bl	80017b8 <MCAL_RCC_GetSYS_CLCKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <MCAL_RCC_GetHCLKFreq+0x20>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	4903      	ldr	r1, [pc, #12]	; (800181c <MCAL_RCC_GetHCLKFreq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	08002ab0 	.word	0x08002ab0

08001820 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8001824:	f7ff ffe8 	bl	80017f8 <MCAL_RCC_GetHCLKFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4903      	ldr	r1, [pc, #12]	; (8001844 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	08002aa8 	.word	0x08002aa8

08001848 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 800184c:	f7ff ffd4 	bl	80017f8 <MCAL_RCC_GetHCLKFreq>
 8001850:	4602      	mov	r2, r0
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0adb      	lsrs	r3, r3, #11
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	4903      	ldr	r1, [pc, #12]	; (800186c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800185e:	5ccb      	ldrb	r3, [r1, r3]
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	08002aa8 	.word	0x08002aa8

08001870 <MCAL_SPI_Init>:
}



void MCAL_SPI_Init(SPI_TypeDef *SPIx, SPI_Config_t* SPI_Config)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	//Safety for register, Using this technique for protect the peripheral form working before the full configurations
	//uint16_t tempCR1_reg = 0 ;
	//uint16_t tempCR2_reg = 0 ;

	if (SPIx == SPI1) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <MCAL_SPI_Init+0x120>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d109      	bne.n	8001896 <MCAL_SPI_Init+0x26>
		G_SPI_Config[0] = SPI_Config;
 8001882:	4a44      	ldr	r2, [pc, #272]	; (8001994 <MCAL_SPI_Init+0x124>)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 8001888:	4b43      	ldr	r3, [pc, #268]	; (8001998 <MCAL_SPI_Init+0x128>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a42      	ldr	r2, [pc, #264]	; (8001998 <MCAL_SPI_Init+0x128>)
 800188e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	e00c      	b.n	80018b0 <MCAL_SPI_Init+0x40>
	}
	else if (SPIx == SPI2) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a40      	ldr	r2, [pc, #256]	; (800199c <MCAL_SPI_Init+0x12c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d108      	bne.n	80018b0 <MCAL_SPI_Init+0x40>
		G_SPI_Config[1] = SPI_Config;
 800189e:	4a3d      	ldr	r2, [pc, #244]	; (8001994 <MCAL_SPI_Init+0x124>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80018a4:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <MCAL_SPI_Init+0x128>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <MCAL_SPI_Init+0x128>)
 80018aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ae:	61d3      	str	r3, [r2, #28]
	}

	//Set Master or Slave
	SPIx->CR1 |= SPI_Config->SPI_Mode ;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	8812      	ldrh	r2, [r2, #0]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]

	//Set Communication Mode
	SPIx->CR1 |= SPI_Config->Communication_Mode ;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	8852      	ldrh	r2, [r2, #2]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	601a      	str	r2, [r3, #0]

	//Set Data size
	SPIx->CR1 |= SPI_Config->Data_Size ;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	88d2      	ldrh	r2, [r2, #6]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	601a      	str	r2, [r3, #0]

	//Set Data format
	SPIx->CR1 |= SPI_Config->Data_Order ;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	8892      	ldrh	r2, [r2, #4]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	601a      	str	r2, [r3, #0]

	//Set Clock Polarity
	SPIx->CR1 |= SPI_Config->CLKPolarity ;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	8912      	ldrh	r2, [r2, #8]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	601a      	str	r2, [r3, #0]

	//Set Clock Phase
	SPIx->CR1 |= SPI_Config->CLKPhase ;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	8952      	ldrh	r2, [r2, #10]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	601a      	str	r2, [r3, #0]

	//Set Slave Select Management NSS
	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable) {
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	899b      	ldrh	r3, [r3, #12]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d107      	bne.n	800191c <MCAL_SPI_Init+0xac>
		SPIx->CR2 |= SPI_Config->NSS ;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	8992      	ldrh	r2, [r2, #12]
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	e006      	b.n	800192a <MCAL_SPI_Init+0xba>
	}
	else if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_disable) {
		SPIx->CR2 &= SPI_Config->NSS ;
	}
	else {
		SPIx->CR1 |= SPI_Config->NSS ;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	8992      	ldrh	r2, [r2, #12]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]
	}

	//Set BoudRate Pre-scaler
	SPIx->CR1 |= SPI_Config->BaudRate_Prescaler ;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	89d2      	ldrh	r2, [r2, #14]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]

	if (SPI_Config->IRQ_Enable != SPI_IRQ_Disable) {
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	8a1b      	ldrh	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01b      	beq.n	8001978 <MCAL_SPI_Init+0x108>

		SPIx->CR2 |= SPI_Config->IRQ_Enable ;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	8a12      	ldrh	r2, [r2, #16]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	605a      	str	r2, [r3, #4]

		if (SPIx == SPI1) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <MCAL_SPI_Init+0x120>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d106      	bne.n	8001964 <MCAL_SPI_Init+0xf4>
			NVIC_IRQ35_SPI1_Enable();
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MCAL_SPI_Init+0x130>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <MCAL_SPI_Init+0x130>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e009      	b.n	8001978 <MCAL_SPI_Init+0x108>
		}
		else if (SPIx == SPI2) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a0d      	ldr	r2, [pc, #52]	; (800199c <MCAL_SPI_Init+0x12c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d105      	bne.n	8001978 <MCAL_SPI_Init+0x108>
			NVIC_IRQ36_SPI2_Enable();
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MCAL_SPI_Init+0x130>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <MCAL_SPI_Init+0x130>)
 8001972:	f043 0310 	orr.w	r3, r3, #16
 8001976:	6013      	str	r3, [r2, #0]
		}
	}


	// SPE enable
	SPIx->CR1 |= (uint16_t)(1 << 6) ;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	601a      	str	r2, [r3, #0]

	//SPIx->CR1 = tempCR1_reg ;
	//SPIx->CR2 = tempCR2_reg ;
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40013000 	.word	0x40013000
 8001994:	20000104 	.word	0x20000104
 8001998:	40021000 	.word	0x40021000
 800199c:	40003800 	.word	0x40003800
 80019a0:	e000e104 	.word	0xe000e104

080019a4 <MCAL_SPI_GPIO_Set_Pins>:
	}
}


void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef *SPIx)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t SPI_GPIO_Config ;
	AFIO_CLOCK_ENABLE;
 80019ac:	4b84      	ldr	r3, [pc, #528]	; (8001bc0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a83      	ldr	r2, [pc, #524]	; (8001bc0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6193      	str	r3, [r2, #24]
	if (SPIx == SPI1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a82      	ldr	r2, [pc, #520]	; (8001bc4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d177      	bne.n	8001ab0 <MCAL_SPI_GPIO_Set_Pins+0x10c>
			SPI1_NSS 	PA4
			SPI1_SCK 	PA5
			SPI1_MISO 	PA6
			SPI1_MOSI	PA7
		 */
		GPIOA_CLOCK_ENABLE;
 80019c0:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a7e      	ldr	r2, [pc, #504]	; (8001bc0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]

		if (G_SPI_Config[0]->SPI_Mode == SPI_MASTER_MODE) {
 80019cc:	4b7e      	ldr	r3, [pc, #504]	; (8001bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d136      	bne.n	8001a44 <MCAL_SPI_GPIO_Set_Pins+0xa0>
			SPI1_MISO 	PA6		Input floating / Input pull-up
			SPI1_MOSI	PA7		Alternate function push-pull
			 */

			// SPI1_NSS
			switch (G_SPI_Config[0]->NSS) {
 80019d6:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	899b      	ldrh	r3, [r3, #12]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d10c      	bne.n	80019fa <MCAL_SPI_GPIO_Set_Pins+0x56>
				SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
				break ;

			case SPI_NSS_Hard_Master_SS_output_enable :
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 80019e0:	2310      	movs	r3, #16
 80019e2:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 80019e4:	2306      	movs	r3, #6
 80019e6:	613b      	str	r3, [r7, #16]
				SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_10MHz;
 80019e8:	2301      	movs	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4619      	mov	r1, r3
 80019f2:	4876      	ldr	r0, [pc, #472]	; (8001bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 80019f4:	f7ff fe0e 	bl	8001614 <MCAL_GPIO_Init>
				break ;
 80019f8:	bf00      	nop
			}

			// SPI1_SCK
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 80019fa:	2320      	movs	r3, #32
 80019fc:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 80019fe:	2306      	movs	r3, #6
 8001a00:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_10MHz;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	486f      	ldr	r0, [pc, #444]	; (8001bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8001a0e:	f7ff fe01 	bl	8001614 <MCAL_GPIO_Init>

			/* PA6 : SPI1_MISO */
			/* Full duplex / master Input floating / Input pull-up */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8001a16:	2301      	movs	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	4869      	ldr	r0, [pc, #420]	; (8001bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8001a26:	f7ff fdf5 	bl	8001614 <MCAL_GPIO_Init>

			/* PA7 : SPI1_MOSI */
			/* Full duplex / master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_10MHz;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4863      	ldr	r0, [pc, #396]	; (8001bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8001a3e:	f7ff fde9 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
		}

	}
}
 8001a42:	e0b8      	b.n	8001bb6 <MCAL_SPI_GPIO_Set_Pins+0x212>
			if (G_SPI_Config[0]->NSS == SPI_NSS_Hard_Slave) {
 8001a44:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	899b      	ldrh	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10b      	bne.n	8001a66 <MCAL_SPI_GPIO_Set_Pins+0xc2>
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8001a52:	2301      	movs	r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
				SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	4619      	mov	r1, r3
 8001a60:	485a      	ldr	r0, [pc, #360]	; (8001bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8001a62:	f7ff fdd7 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 8001a66:	2320      	movs	r3, #32
 8001a68:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4619      	mov	r1, r3
 8001a78:	4854      	ldr	r0, [pc, #336]	; (8001bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8001a7a:	f7ff fdcb 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 8001a7e:	2340      	movs	r3, #64	; 0x40
 8001a80:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8001a82:	2306      	movs	r3, #6
 8001a84:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_10MHz;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	4619      	mov	r1, r3
 8001a90:	484e      	ldr	r0, [pc, #312]	; (8001bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8001a92:	f7ff fdbf 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4848      	ldr	r0, [pc, #288]	; (8001bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8001aaa:	f7ff fdb3 	bl	8001614 <MCAL_GPIO_Init>
}
 8001aae:	e082      	b.n	8001bb6 <MCAL_SPI_GPIO_Set_Pins+0x212>
	else if (SPIx == SPI2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a47      	ldr	r2, [pc, #284]	; (8001bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d17e      	bne.n	8001bb6 <MCAL_SPI_GPIO_Set_Pins+0x212>
		GPIOB_CLOCK_ENABLE;
 8001ab8:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	6193      	str	r3, [r2, #24]
		if (G_SPI_Config[1]->SPI_Mode == SPI_MASTER_MODE) {
 8001ac4:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d13a      	bne.n	8001b44 <MCAL_SPI_GPIO_Set_Pins+0x1a0>
			switch (G_SPI_Config[1]->NSS) {
 8001ace:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	899b      	ldrh	r3, [r3, #12]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d10d      	bne.n	8001af4 <MCAL_SPI_GPIO_Set_Pins+0x150>
				SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_AF_push_pull ;
 8001ad8:	2306      	movs	r3, #6
 8001ada:	613b      	str	r3, [r7, #16]
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12 ;
 8001adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae0:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_10MHz ;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	4839      	ldr	r0, [pc, #228]	; (8001bd4 <MCAL_SPI_GPIO_Set_Pins+0x230>)
 8001aee:	f7ff fd91 	bl	8001614 <MCAL_GPIO_Init>
				break ;
 8001af2:	bf00      	nop
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_AF_push_pull ;
 8001af4:	2306      	movs	r3, #6
 8001af6:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13 ;
 8001af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afc:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_10MHz ;
 8001afe:	2301      	movs	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	4832      	ldr	r0, [pc, #200]	; (8001bd4 <MCAL_SPI_GPIO_Set_Pins+0x230>)
 8001b0a:	f7ff fd83 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14 ;
 8001b12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b16:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	482c      	ldr	r0, [pc, #176]	; (8001bd4 <MCAL_SPI_GPIO_Set_Pins+0x230>)
 8001b24:	f7ff fd76 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_AF_push_pull ;
 8001b28:	2306      	movs	r3, #6
 8001b2a:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15 ;
 8001b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b30:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_10MHz ;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <MCAL_SPI_GPIO_Set_Pins+0x230>)
 8001b3e:	f7ff fd69 	bl	8001614 <MCAL_GPIO_Init>
}
 8001b42:	e038      	b.n	8001bb6 <MCAL_SPI_GPIO_Set_Pins+0x212>
			if (G_SPI_Config[1]->NSS == SPI_NSS_Hard_Slave) {
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	899b      	ldrh	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <MCAL_SPI_GPIO_Set_Pins+0x1c4>
				SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12 ;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	481c      	ldr	r0, [pc, #112]	; (8001bd4 <MCAL_SPI_GPIO_Set_Pins+0x230>)
 8001b64:	f7ff fd56 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13 ;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <MCAL_SPI_GPIO_Set_Pins+0x230>)
 8001b7e:	f7ff fd49 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_AF_push_pull ;
 8001b82:	2306      	movs	r3, #6
 8001b84:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14 ;
 8001b86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b8a:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_10MHz ;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <MCAL_SPI_GPIO_Set_Pins+0x230>)
 8001b98:	f7ff fd3c 	bl	8001614 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15 ;
 8001ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ba4:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_Speed = GPIO_Speed_Reset_State;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <MCAL_SPI_GPIO_Set_Pins+0x230>)
 8001bb2:	f7ff fd2f 	bl	8001614 <MCAL_GPIO_Init>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40013000 	.word	0x40013000
 8001bc8:	20000104 	.word	0x20000104
 8001bcc:	40010800 	.word	0x40010800
 8001bd0:	40003800 	.word	0x40003800
 8001bd4:	40010c00 	.word	0x40010c00

08001bd8 <MCAL_SPI_SendData>:


void MCAL_SPI_SendData(SPI_TypeDef *SPIx, uint16_t *data_buffer,Polling_MECH Polling)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	71fb      	strb	r3, [r7, #7]
	if (Polling == SPIenable) {
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d106      	bne.n	8001bfa <MCAL_SPI_SendData+0x22>
		/*
		 *  TXE: Transmit buffer empty
			0: Tx buffer not empty
			1: Tx buffer empty
		 */
		while (!(SPIx->SR & (uint16_t)(1 << 1))) ;
 8001bec:	bf00      	nop
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f9      	beq.n	8001bee <MCAL_SPI_SendData+0x16>
	}
	SPIx->DR = *data_buffer ;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	60da      	str	r2, [r3, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <MCAL_SPI_ReceiveData>:


void MCAL_SPI_ReceiveData(SPI_TypeDef *SPIx, uint16_t *data_buffer ,Polling_MECH Polling)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71fb      	strb	r3, [r7, #7]
	if (Polling == SPIenable) {
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d106      	bne.n	8001c30 <MCAL_SPI_ReceiveData+0x22>
		/*
		 *  RXNE: Receive buffer not empty
			0: Rx buffer empty
			1: Rx buffer not empty
		 */
		while (!(SPIx->SR & (uint16_t)(1 << 0))) ;
 8001c22:	bf00      	nop
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f9      	beq.n	8001c24 <MCAL_SPI_ReceiveData+0x16>
	}
	*data_buffer = SPIx->DR ;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	801a      	strh	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <SPI1_IRQHandler>:



//---ISR-------

void SPI1_IRQHandler (void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI1->SR & (1 << 1)) >> 1 ) ;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <SPI1_IRQHandler+0x54>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	793b      	ldrb	r3, [r7, #4]
 8001c58:	f362 0300 	bfi	r3, r2, #0, #1
 8001c5c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1 << 0)) >> 0 ) ;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <SPI1_IRQHandler+0x54>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	793b      	ldrb	r3, [r7, #4]
 8001c6a:	f362 0341 	bfi	r3, r2, #1, #1
 8001c6e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1 << 4)) >> 4 ) ;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <SPI1_IRQHandler+0x54>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	793b      	ldrb	r3, [r7, #4]
 8001c7e:	f362 0382 	bfi	r3, r2, #2, #1
 8001c82:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[0]->IRQ_CallBack(irq_src) ;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SPI1_IRQHandler+0x58>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	7938      	ldrb	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40013000 	.word	0x40013000
 8001c9c:	20000104 	.word	0x20000104

08001ca0 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI2->SR & (1 << 1)) >> 1 ) ;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <SPI2_IRQHandler+0x54>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	085b      	lsrs	r3, r3, #1
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	793b      	ldrb	r3, [r7, #4]
 8001cb4:	f362 0300 	bfi	r3, r2, #0, #1
 8001cb8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1 << 0)) >> 0 ) ;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <SPI2_IRQHandler+0x54>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	793b      	ldrb	r3, [r7, #4]
 8001cc6:	f362 0341 	bfi	r3, r2, #1, #1
 8001cca:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1 << 4)) >> 4 ) ;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <SPI2_IRQHandler+0x54>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	793b      	ldrb	r3, [r7, #4]
 8001cda:	f362 0382 	bfi	r3, r2, #2, #1
 8001cde:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[1]->IRQ_CallBack(irq_src) ;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <SPI2_IRQHandler+0x58>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	7938      	ldrb	r0, [r7, #4]
 8001ce8:	4798      	blx	r3

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40003800 	.word	0x40003800
 8001cf8:	20000104 	.word	0x20000104

08001cfc <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <MCAL_UART_Init+0x174>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d109      	bne.n	8001d22 <MCAL_UART_Init+0x26>
	{
		Global_UART_Config[0]=UART_Config;
 8001d0e:	4a59      	ldr	r2, [pc, #356]	; (8001e74 <MCAL_UART_Init+0x178>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6013      	str	r3, [r2, #0]
		RCC_USART1_CLK_EN();
 8001d14:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <MCAL_UART_Init+0x17c>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <MCAL_UART_Init+0x17c>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	e01a      	b.n	8001d58 <MCAL_UART_Init+0x5c>
	}
	else if ( USARTx == USART2 )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a55      	ldr	r2, [pc, #340]	; (8001e7c <MCAL_UART_Init+0x180>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d109      	bne.n	8001d3e <MCAL_UART_Init+0x42>
	{
		Global_UART_Config[1]=UART_Config;
 8001d2a:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <MCAL_UART_Init+0x178>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6053      	str	r3, [r2, #4]
		RCC_USART2_CLK_EN();
 8001d30:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <MCAL_UART_Init+0x17c>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <MCAL_UART_Init+0x17c>)
 8001d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3a:	61d3      	str	r3, [r2, #28]
 8001d3c:	e00c      	b.n	8001d58 <MCAL_UART_Init+0x5c>
	}
	else if ( USARTx == USART3 )
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <MCAL_UART_Init+0x184>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d108      	bne.n	8001d58 <MCAL_UART_Init+0x5c>
	{
		Global_UART_Config[2]=UART_Config;
 8001d46:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <MCAL_UART_Init+0x178>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6093      	str	r3, [r2, #8]
		RCC_USART3_CLK_EN();
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <MCAL_UART_Init+0x17c>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	4a49      	ldr	r2, [pc, #292]	; (8001e78 <MCAL_UART_Init+0x17c>)
 8001d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d56:	61d3      	str	r3, [r2, #28]



	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	7a12      	ldrb	r2, [r2, #8]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	7a52      	ldrb	r2, [r2, #9]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	7a92      	ldrb	r2, [r2, #10]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	7ad2      	ldrb	r2, [r2, #11]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a30      	ldr	r2, [pc, #192]	; (8001e70 <MCAL_UART_Init+0x174>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d103      	bne.n	8001dba <MCAL_UART_Init+0xbe>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8001db2:	f7ff fd49 	bl	8001848 <MCAL_RCC_GetPCLK2Freq>
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	e002      	b.n	8001dc0 <MCAL_UART_Init+0xc4>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8001dba:	f7ff fd31 	bl	8001820 <MCAL_RCC_GetPCLK1Freq>
 8001dbe:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	0119      	lsls	r1, r3, #4
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df0:	2064      	movs	r0, #100	; 0x64
 8001df2:	fb00 f303 	mul.w	r3, r0, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <MCAL_UART_Init+0x188>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	430b      	orrs	r3, r1
 8001e08:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	7b1b      	ldrb	r3, [r3, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d026      	beq.n	8001e66 <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	7b12      	ldrb	r2, [r2, #12]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <MCAL_UART_Init+0x174>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d106      	bne.n	8001e3c <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_Enable ;
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MCAL_UART_Init+0x18c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <MCAL_UART_Init+0x18c>)
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 8001e3a:	e014      	b.n	8001e66 <MCAL_UART_Init+0x16a>
		else if ( USARTx == USART2 )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <MCAL_UART_Init+0x180>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d106      	bne.n	8001e52 <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_Enable ;
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MCAL_UART_Init+0x18c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <MCAL_UART_Init+0x18c>)
 8001e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	e009      	b.n	8001e66 <MCAL_UART_Init+0x16a>
		else if ( USARTx == USART3 )
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <MCAL_UART_Init+0x184>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d105      	bne.n	8001e66 <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_Enable ;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MCAL_UART_Init+0x18c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <MCAL_UART_Init+0x18c>)
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	6013      	str	r3, [r2, #0]
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40013800 	.word	0x40013800
 8001e74:	2000010c 	.word	0x2000010c
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40004800 	.word	0x40004800
 8001e84:	51eb851f 	.word	0x51eb851f
 8001e88:	e000e104 	.word	0xe000e104

08001e8c <MCAL_UART_ReceiveData>:
}



void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	4613      	mov	r3, r2
 8001e98:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE flag is set in the SR
	if (PollingEn == enable)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d106      	bne.n	8001eae <MCAL_UART_ReceiveData+0x22>
	{
		while( ! (USARTx->SR & 1<<5 ));
 8001ea0:	bf00      	nop
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f9      	beq.n	8001ea2 <MCAL_UART_ReceiveData+0x16>
		}

	}else
	{
		//This is 8bit data
		if ( Global_UART_Config[0]->Parity ==UART_Parity__NONE || Global_UART_Config[1]->Parity ==UART_Parity__NONE
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MCAL_UART_ReceiveData+0x6c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	7a5b      	ldrb	r3, [r3, #9]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <MCAL_UART_ReceiveData+0x40>
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MCAL_UART_ReceiveData+0x6c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	7a5b      	ldrb	r3, [r3, #9]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d004      	beq.n	8001ecc <MCAL_UART_ReceiveData+0x40>
				|| Global_UART_Config[2]->Parity ==UART_Parity__NONE)
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <MCAL_UART_ReceiveData+0x6c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	7a5b      	ldrb	r3, [r3, #9]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <MCAL_UART_ReceiveData+0x50>
		{
			//no parity So all 8bit are considered data
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF ) ;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	e008      	b.n	8001eee <MCAL_UART_ReceiveData+0x62>

		}else
		{
			//Parity is used, so,7 bits will be of user data and 1 bit is parity
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	801a      	strh	r2, [r3, #0]

		}
	}


}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	2000010c 	.word	0x2000010c

08001efc <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;
	AFIO_CLOCK_ENABLE;
 8001f04:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <MCAL_UART_GPIO_Set_Pins+0xe8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <MCAL_UART_GPIO_Set_Pins+0xe8>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6193      	str	r3, [r2, #24]

	if ( USARTx == USART1 )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a35      	ldr	r2, [pc, #212]	; (8001fe8 <MCAL_UART_GPIO_Set_Pins+0xec>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d11a      	bne.n	8001f4e <MCAL_UART_GPIO_Set_Pins+0x52>
		//PA12 RTS

		//GPIOA_CLOCK_ENABLE;

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8001f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8001f1e:	2306      	movs	r3, #6
 8001f20:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	482f      	ldr	r0, [pc, #188]	; (8001fec <MCAL_UART_GPIO_Set_Pins+0xf0>)
 8001f2e:	f7ff fb71 	bl	8001614 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	4829      	ldr	r0, [pc, #164]	; (8001fec <MCAL_UART_GPIO_Set_Pins+0xf0>)
 8001f48:	f7ff fb64 	bl	8001614 <MCAL_GPIO_Init>
			PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8001f4c:	e046      	b.n	8001fdc <MCAL_UART_GPIO_Set_Pins+0xe0>
	else if ( USARTx == USART2 )
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <MCAL_UART_GPIO_Set_Pins+0xf4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d118      	bne.n	8001f88 <MCAL_UART_GPIO_Set_Pins+0x8c>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8001f56:	2304      	movs	r3, #4
 8001f58:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	4619      	mov	r1, r3
 8001f68:	4820      	ldr	r0, [pc, #128]	; (8001fec <MCAL_UART_GPIO_Set_Pins+0xf0>)
 8001f6a:	f7ff fb53 	bl	8001614 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8001f6e:	2308      	movs	r3, #8
 8001f70:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 8001f72:	2301      	movs	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481a      	ldr	r0, [pc, #104]	; (8001fec <MCAL_UART_GPIO_Set_Pins+0xf0>)
 8001f82:	f7ff fb47 	bl	8001614 <MCAL_GPIO_Init>
}
 8001f86:	e029      	b.n	8001fdc <MCAL_UART_GPIO_Set_Pins+0xe0>
	else if ( USARTx == USART3 )
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <MCAL_UART_GPIO_Set_Pins+0xf8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d125      	bne.n	8001fdc <MCAL_UART_GPIO_Set_Pins+0xe0>
		GPIOA_CLOCK_ENABLE;
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <MCAL_UART_GPIO_Set_Pins+0xe8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <MCAL_UART_GPIO_Set_Pins+0xe8>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6193      	str	r3, [r2, #24]
		GPIOB_CLOCK_ENABLE;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <MCAL_UART_GPIO_Set_Pins+0xe8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <MCAL_UART_GPIO_Set_Pins+0xe8>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	6193      	str	r3, [r2, #24]
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fac:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8001fae:	2306      	movs	r3, #6
 8001fb0:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8001fbe:	f7ff fb29 	bl	8001614 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8001fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8001fd8:	f7ff fb1c 	bl	8001614 <MCAL_GPIO_Init>
}
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40004400 	.word	0x40004400
 8001ff4:	40004800 	.word	0x40004800
 8001ff8:	40010c00 	.word	0x40010c00

08001ffc <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0

	Global_UART_Config[0]->P_IRQ_CallBack () ;
 8002000:	4b02      	ldr	r3, [pc, #8]	; (800200c <USART1_IRQHandler+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	4798      	blx	r3

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000010c 	.word	0x2000010c

08002010 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	Global_UART_Config[1]->P_IRQ_CallBack () ;
 8002014:	4b02      	ldr	r3, [pc, #8]	; (8002020 <USART2_IRQHandler+0x10>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	4798      	blx	r3

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2000010c 	.word	0x2000010c

08002024 <USART3_IRQHandler>:


void USART3_IRQHandler (void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	Global_UART_Config[2]->P_IRQ_CallBack () ;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <USART3_IRQHandler+0x10>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	4798      	blx	r3

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000010c 	.word	0x2000010c

08002038 <EXTI15_CALLBACK>:
void EXTI_CALLBACK(void);
//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


void EXTI15_CALLBACK(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	//||||||||||||||||||||||||||||||||||||||||||||||Admin_Control||||||||||||||||||||||||||||||||||||||||||||||||||//
	Admin_Control();
 800203c:	f000 fb1e 	bl	800267c <Admin_Control>
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <main>:


int main(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0


	//|||||||||||||||||||||EXTI_Init.................................||||||||||||||||||||||||||||||||||||||||||||||//
	EXTI_AFIO_MAPPING_t EXTI_MAP=EXTI15PA15;
 800204a:	4a25      	ldr	r2, [pc, #148]	; (80020e0 <main+0x9c>)
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	ca07      	ldmia	r2, {r0, r1, r2}
 8002052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_PINCONFIG_t EXTI_Confg;
	EXTI_Confg.EXTI_Map_Pin=EXTI_MAP;
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800205c:	ca07      	ldmia	r2, {r0, r1, r2}
 800205e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Confg.EXTI_Trigger_State=EXTI_Falling_Trigger;
 8002062:	2301      	movs	r3, #1
 8002064:	743b      	strb	r3, [r7, #16]
	EXTI_Confg.IRQ_EN=EXTI_IRQ_ENABLE;
 8002066:	2301      	movs	r3, #1
 8002068:	747b      	strb	r3, [r7, #17]
	EXTI_Confg.PF_IRQ_CALLBACK=EXTI15_CALLBACK;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <main+0xa0>)
 800206c:	617b      	str	r3, [r7, #20]
	MCAL_EXTI_Init(&EXTI_Confg);
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ffed 	bl	8001050 <MCAL_EXTI_Init>
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


	//||||||||||||||||||||||||||||||||LCD_INIT.................................||||||||||||||||||||||||||||||||||||//
	LCD_INIT();
 8002076:	f7fe fb1b 	bl	80006b0 <LCD_INIT>
	LCD_clear_screen();
 800207a:	f7fe fbe3 	bl	8000844 <LCD_clear_screen>
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//

	//||||||||||||||||||||||||||||||||Gate_Entry_Init .........................||||||||||||||||||||||||||||||||||||//
	Gate_Entry_Init();
 800207e:	f000 fa0b 	bl	8002498 <Gate_Entry_Init>
	Gate_EXIT_Init();
 8002082:	f000 fa37 	bl	80024f4 <Gate_EXIT_Init>
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//



	//||||||||||||||||||||||||||||||||EEPROM_SPI_INIT .........................||||||||||||||||||||||||||||||||||||//
	EEPROM_NSS_INIT(GPIOA, GPIO_PIN_4);
 8002086:	2110      	movs	r1, #16
 8002088:	4817      	ldr	r0, [pc, #92]	; (80020e8 <main+0xa4>)
 800208a:	f7fe f935 	bl	80002f8 <EEPROM_NSS_INIT>
	EEPROM_SPI_INTT(SPI1);
 800208e:	4817      	ldr	r0, [pc, #92]	; (80020ec <main+0xa8>)
 8002090:	f7fe f902 	bl	8000298 <EEPROM_SPI_INTT>
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//



	//|||||||||||||||||||||7_Segment_BCD_INIT.................................||||||||||||||||||||||||||||||||||||//
	Seven_SegmentBCD_Init(GPIOB);
 8002094:	4816      	ldr	r0, [pc, #88]	; (80020f0 <main+0xac>)
 8002096:	f7fe f86b 	bl	8000170 <Seven_SegmentBCD_Init>
	Seven_SegmentBCD_Display(GPIOB, Dig3);
 800209a:	2103      	movs	r1, #3
 800209c:	4814      	ldr	r0, [pc, #80]	; (80020f0 <main+0xac>)
 800209e:	f7fe f8ad 	bl	80001fc <Seven_SegmentBCD_Display>
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


	//|||||||||||||||||||||BUZZER_INIT & LED.................................||||||||||||||||||||||||||||||||||||||//
	BUZZER_INIT(GPIOB,GPIO_PIN_11);
 80020a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <main+0xac>)
 80020a8:	f000 fa52 	bl	8002550 <BUZZER_INIT>
	LED_INIT(GPIOB,GPIO_PIN_3);
 80020ac:	2108      	movs	r1, #8
 80020ae:	4810      	ldr	r0, [pc, #64]	; (80020f0 <main+0xac>)
 80020b0:	f000 fa87 	bl	80025c2 <LED_INIT>
	BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_off);
 80020b4:	2201      	movs	r2, #1
 80020b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ba:	480d      	ldr	r0, [pc, #52]	; (80020f0 <main+0xac>)
 80020bc:	f000 fa61 	bl	8002582 <BUZZER_Turn>
	LED_Turn(GPIOB, GPIO_PIN_3, Turn_On);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2108      	movs	r1, #8
 80020c4:	480a      	ldr	r0, [pc, #40]	; (80020f0 <main+0xac>)
 80020c6:	f000 fa95 	bl	80025f4 <LED_Turn>
	//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||//


	//||||||||||||||||||||||||||||||||RFID_CARD_ENTRY_INIT .........................|||||||||||||||||||||||||||||||//
	RFID_CARD_ENTRY_INIT(USART1);
 80020ca:	480a      	ldr	r0, [pc, #40]	; (80020f4 <main+0xb0>)
 80020cc:	f7fe fd36 	bl	8000b3c <RFID_CARD_ENTRY_INIT>
	RFID_CARD_EXIT_INIT(USART2);
 80020d0:	4809      	ldr	r0, [pc, #36]	; (80020f8 <main+0xb4>)
 80020d2:	f7fe fd5f 	bl	8000b94 <RFID_CARD_EXIT_INIT>
	//||||||||||||||||||||||||||||||||Loop..........................|||||||||||||||||||||||||||||||||||||||||||||//
	while(1)
	{

		//||||||||||||||||||||||||Read RFID_CARD_ENTRY & Checking........................||||||||||||||||||||||||//
		RFID_ENTRY();
 80020d6:	f000 f811 	bl	80020fc <RFID_ENTRY>
		//||||||||||||||||||||||||||||||||||||||Read RFID_CARD_ENTRY & Checking||||||||||||||||||||||||||||||||||//

		//||||||||||||||||||||||||Read RFID_CARD_EXIT & Checking........................||||||||||||||||||||||||//
		RFID_EXIT();
 80020da:	f000 f91f 	bl	800231c <RFID_EXIT>
		RFID_ENTRY();
 80020de:	e7fa      	b.n	80020d6 <main+0x92>
 80020e0:	080029d8 	.word	0x080029d8
 80020e4:	08002039 	.word	0x08002039
 80020e8:	40010800 	.word	0x40010800
 80020ec:	40013000 	.word	0x40013000
 80020f0:	40010c00 	.word	0x40010c00
 80020f4:	40013800 	.word	0x40013800
 80020f8:	40004400 	.word	0x40004400

080020fc <RFID_ENTRY>:
}



void RFID_ENTRY(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
	//RCC_USART1_CLK_EN();
	if(GB_S_ENTRY_READRFID == Start_ReadRFID_ENTRY)
 8002102:	4b77      	ldr	r3, [pc, #476]	; (80022e0 <RFID_ENTRY+0x1e4>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	f040 8097 	bne.w	800223a <RFID_ENTRY+0x13e>
	{
		RFID_CARD_ENTRY_READ(Driver_ENTRY_ID, DriverID_Length);
 800210c:	2104      	movs	r1, #4
 800210e:	4875      	ldr	r0, [pc, #468]	; (80022e4 <RFID_ENTRY+0x1e8>)
 8002110:	f7fe fd6c 	bl	8000bec <RFID_CARD_ENTRY_READ>
		ID_ENTRY_Status=RFID_CARD_ID_ENTRY_CHECK(Driver_ENTRY_ID, DriverID_Length, IDs_Num);
 8002114:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <RFID_ENTRY+0x1ec>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	2104      	movs	r1, #4
 800211c:	4871      	ldr	r0, [pc, #452]	; (80022e4 <RFID_ENTRY+0x1e8>)
 800211e:	f7fe fda9 	bl	8000c74 <RFID_CARD_ID_ENTRY_CHECK>
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	4b71      	ldr	r3, [pc, #452]	; (80022ec <RFID_ENTRY+0x1f0>)
 8002128:	701a      	strb	r2, [r3, #0]

		switch(ID_ENTRY_Status)
 800212a:	4b70      	ldr	r3, [pc, #448]	; (80022ec <RFID_ENTRY+0x1f0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <RFID_ENTRY+0x3c>
 8002132:	2b01      	cmp	r3, #1
 8002134:	d03b      	beq.n	80021ae <RFID_ENTRY+0xb2>


			GATE_ENTRY_COMMAND(GATE_CLOSE);
			break;
		default:
			break;
 8002136:	e07c      	b.n	8002232 <RFID_ENTRY+0x136>
			Available_Slots--;
 8002138:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <RFID_ENTRY+0x1f4>)
 800213a:	f993 3000 	ldrsb.w	r3, [r3]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	b25a      	sxtb	r2, r3
 8002146:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <RFID_ENTRY+0x1f4>)
 8002148:	701a      	strb	r2, [r3, #0]
			Seven_SegmentBCD_Display(GPIOB , Available_Slots);
 800214a:	4b69      	ldr	r3, [pc, #420]	; (80022f0 <RFID_ENTRY+0x1f4>)
 800214c:	f993 3000 	ldrsb.w	r3, [r3]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4619      	mov	r1, r3
 8002154:	4867      	ldr	r0, [pc, #412]	; (80022f4 <RFID_ENTRY+0x1f8>)
 8002156:	f7fe f851 	bl	80001fc <Seven_SegmentBCD_Display>
			LCD_GOTO_XY(1, 0);
 800215a:	2100      	movs	r1, #0
 800215c:	2001      	movs	r0, #1
 800215e:	f7fe fb8f 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("EN_ID:");
 8002162:	4865      	ldr	r0, [pc, #404]	; (80022f8 <RFID_ENTRY+0x1fc>)
 8002164:	f7fe fcbc 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_WRITE_STRING(Driver_ENTRY_ID);
 8002168:	485e      	ldr	r0, [pc, #376]	; (80022e4 <RFID_ENTRY+0x1e8>)
 800216a:	f7fe fcb9 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(2, 1);
 800216e:	2101      	movs	r1, #1
 8002170:	2002      	movs	r0, #2
 8002172:	f7fe fb85 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("Authorized");
 8002176:	4861      	ldr	r0, [pc, #388]	; (80022fc <RFID_ENTRY+0x200>)
 8002178:	f7fe fcb2 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(1, 0);
 800217c:	2100      	movs	r1, #0
 800217e:	2001      	movs	r0, #1
 8002180:	f7fe fb7e 	bl	8000880 <LCD_GOTO_XY>
			if((Available_Slots + 1) >0 )
 8002184:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <RFID_ENTRY+0x1f4>)
 8002186:	f993 3000 	ldrsb.w	r3, [r3]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db50      	blt.n	8002230 <RFID_ENTRY+0x134>
				GATE_ENTRY_COMMAND(GATE_OPEN);
 800218e:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <RFID_ENTRY+0x204>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f000 f99b 	bl	80024d0 <GATE_ENTRY_COMMAND>
				Delay_ms(250000);
 800219a:	485a      	ldr	r0, [pc, #360]	; (8002304 <RFID_ENTRY+0x208>)
 800219c:	f000 fbac 	bl	80028f8 <Delay_ms>
				GATE_ENTRY_COMMAND(GATE_CLOSE);
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <RFID_ENTRY+0x20c>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f992 	bl	80024d0 <GATE_ENTRY_COMMAND>
			break;
 80021ac:	e040      	b.n	8002230 <RFID_ENTRY+0x134>
			LCD_GOTO_XY(1, 0);
 80021ae:	2100      	movs	r1, #0
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7fe fb65 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("EN_ID:");
 80021b6:	4850      	ldr	r0, [pc, #320]	; (80022f8 <RFID_ENTRY+0x1fc>)
 80021b8:	f7fe fc92 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_WRITE_STRING(Driver_ENTRY_ID);
 80021bc:	4849      	ldr	r0, [pc, #292]	; (80022e4 <RFID_ENTRY+0x1e8>)
 80021be:	f7fe fc8f 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(2, 1);
 80021c2:	2101      	movs	r1, #1
 80021c4:	2002      	movs	r0, #2
 80021c6:	f7fe fb5b 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("Un_Authorized");
 80021ca:	4850      	ldr	r0, [pc, #320]	; (800230c <RFID_ENTRY+0x210>)
 80021cc:	f7fe fc88 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(1, 0);
 80021d0:	2100      	movs	r1, #0
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7fe fb54 	bl	8000880 <LCD_GOTO_XY>
			for(int i=0;i<3;i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	e01e      	b.n	800221c <RFID_ENTRY+0x120>
				BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_on);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e4:	4843      	ldr	r0, [pc, #268]	; (80022f4 <RFID_ENTRY+0x1f8>)
 80021e6:	f000 f9cc 	bl	8002582 <BUZZER_Turn>
				LED_Turn(GPIOB, GPIO_PIN_3, Turn_Off);
 80021ea:	2201      	movs	r2, #1
 80021ec:	2108      	movs	r1, #8
 80021ee:	4841      	ldr	r0, [pc, #260]	; (80022f4 <RFID_ENTRY+0x1f8>)
 80021f0:	f000 fa00 	bl	80025f4 <LED_Turn>
				Delay_ms(100000);
 80021f4:	4846      	ldr	r0, [pc, #280]	; (8002310 <RFID_ENTRY+0x214>)
 80021f6:	f000 fb7f 	bl	80028f8 <Delay_ms>
				BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_off);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002200:	483c      	ldr	r0, [pc, #240]	; (80022f4 <RFID_ENTRY+0x1f8>)
 8002202:	f000 f9be 	bl	8002582 <BUZZER_Turn>
				LED_Turn(GPIOB, GPIO_PIN_3, Turn_On);
 8002206:	2200      	movs	r2, #0
 8002208:	2108      	movs	r1, #8
 800220a:	483a      	ldr	r0, [pc, #232]	; (80022f4 <RFID_ENTRY+0x1f8>)
 800220c:	f000 f9f2 	bl	80025f4 <LED_Turn>
				Delay_ms(100000);
 8002210:	483f      	ldr	r0, [pc, #252]	; (8002310 <RFID_ENTRY+0x214>)
 8002212:	f000 fb71 	bl	80028f8 <Delay_ms>
			for(int i=0;i<3;i++)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3301      	adds	r3, #1
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	dddd      	ble.n	80021de <RFID_ENTRY+0xe2>
			GATE_ENTRY_COMMAND(GATE_CLOSE);
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <RFID_ENTRY+0x20c>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f951 	bl	80024d0 <GATE_ENTRY_COMMAND>
			break;
 800222e:	e000      	b.n	8002232 <RFID_ENTRY+0x136>
			break;
 8002230:	bf00      	nop
		}
		GB_S_ENTRY_READRFID=Stop_ReadRFID_ENTRY;
 8002232:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <RFID_ENTRY+0x1e4>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e005      	b.n	8002246 <RFID_ENTRY+0x14a>

	}

	else
	{
		Delay_ms(1000);
 800223a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800223e:	f000 fb5b 	bl	80028f8 <Delay_ms>
		LCD_clear_screen();
 8002242:	f7fe faff 	bl	8000844 <LCD_clear_screen>
	}


	if(Available_Slots < 0)
 8002246:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <RFID_ENTRY+0x1f4>)
 8002248:	f993 3000 	ldrsb.w	r3, [r3]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da43      	bge.n	80022d8 <RFID_ENTRY+0x1dc>
	{
		Available_Slots=0;
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <RFID_ENTRY+0x1f4>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
		Seven_SegmentBCD_Display(GPIOB , Available_Slots);
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <RFID_ENTRY+0x1f4>)
 8002258:	f993 3000 	ldrsb.w	r3, [r3]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4619      	mov	r1, r3
 8002260:	4824      	ldr	r0, [pc, #144]	; (80022f4 <RFID_ENTRY+0x1f8>)
 8002262:	f7fd ffcb 	bl	80001fc <Seven_SegmentBCD_Display>

		LCD_WRITE_STRING("Please Wait.....");
 8002266:	482b      	ldr	r0, [pc, #172]	; (8002314 <RFID_ENTRY+0x218>)
 8002268:	f7fe fc3a 	bl	8000ae0 <LCD_WRITE_STRING>
		LCD_GOTO_XY(2, 0);
 800226c:	2100      	movs	r1, #0
 800226e:	2002      	movs	r0, #2
 8002270:	f7fe fb06 	bl	8000880 <LCD_GOTO_XY>
		LCD_WRITE_STRING("Unavailable Slot");
 8002274:	4828      	ldr	r0, [pc, #160]	; (8002318 <RFID_ENTRY+0x21c>)
 8002276:	f7fe fc33 	bl	8000ae0 <LCD_WRITE_STRING>
		LCD_GOTO_XY(1, 0);
 800227a:	2100      	movs	r1, #0
 800227c:	2001      	movs	r0, #1
 800227e:	f7fe faff 	bl	8000880 <LCD_GOTO_XY>

		for(int i=0;i<3;i++)
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	e01e      	b.n	80022c6 <RFID_ENTRY+0x1ca>
		{
			BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_on);
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228e:	4819      	ldr	r0, [pc, #100]	; (80022f4 <RFID_ENTRY+0x1f8>)
 8002290:	f000 f977 	bl	8002582 <BUZZER_Turn>
			LED_Turn(GPIOB, GPIO_PIN_3, Turn_Off);
 8002294:	2201      	movs	r2, #1
 8002296:	2108      	movs	r1, #8
 8002298:	4816      	ldr	r0, [pc, #88]	; (80022f4 <RFID_ENTRY+0x1f8>)
 800229a:	f000 f9ab 	bl	80025f4 <LED_Turn>
			Delay_ms(100000);
 800229e:	481c      	ldr	r0, [pc, #112]	; (8002310 <RFID_ENTRY+0x214>)
 80022a0:	f000 fb2a 	bl	80028f8 <Delay_ms>
			BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_off);
 80022a4:	2201      	movs	r2, #1
 80022a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022aa:	4812      	ldr	r0, [pc, #72]	; (80022f4 <RFID_ENTRY+0x1f8>)
 80022ac:	f000 f969 	bl	8002582 <BUZZER_Turn>
			LED_Turn(GPIOB, GPIO_PIN_3, Turn_On);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2108      	movs	r1, #8
 80022b4:	480f      	ldr	r0, [pc, #60]	; (80022f4 <RFID_ENTRY+0x1f8>)
 80022b6:	f000 f99d 	bl	80025f4 <LED_Turn>
			Delay_ms(100000);
 80022ba:	4815      	ldr	r0, [pc, #84]	; (8002310 <RFID_ENTRY+0x214>)
 80022bc:	f000 fb1c 	bl	80028f8 <Delay_ms>
		for(int i=0;i<3;i++)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	dddd      	ble.n	8002288 <RFID_ENTRY+0x18c>
		}
		Delay_ms(10000);
 80022cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80022d0:	f000 fb12 	bl	80028f8 <Delay_ms>
		LCD_clear_screen();
 80022d4:	f7fe fab6 	bl	8000844 <LCD_clear_screen>
	}


}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000094 	.word	0x20000094
 80022e4:	20000118 	.word	0x20000118
 80022e8:	20000029 	.word	0x20000029
 80022ec:	20000120 	.word	0x20000120
 80022f0:	20000028 	.word	0x20000028
 80022f4:	40010c00 	.word	0x40010c00
 80022f8:	080029e4 	.word	0x080029e4
 80022fc:	080029ec 	.word	0x080029ec
 8002300:	20000026 	.word	0x20000026
 8002304:	0003d090 	.word	0x0003d090
 8002308:	20000122 	.word	0x20000122
 800230c:	080029f8 	.word	0x080029f8
 8002310:	000186a0 	.word	0x000186a0
 8002314:	08002a08 	.word	0x08002a08
 8002318:	08002a1c 	.word	0x08002a1c

0800231c <RFID_EXIT>:



void RFID_EXIT(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
	//RCC_USART2_CLK_EN();
	if(GB_S_EXIT_READRFID == Start_ReadRFID_EXIT)
 8002322:	4b50      	ldr	r3, [pc, #320]	; (8002464 <RFID_EXIT+0x148>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	f040 8091 	bne.w	800244e <RFID_EXIT+0x132>
	{
		RFID_CARD_EXIT_READ(Driver_EXIT_ID, DriverID_Length);
 800232c:	2104      	movs	r1, #4
 800232e:	484e      	ldr	r0, [pc, #312]	; (8002468 <RFID_EXIT+0x14c>)
 8002330:	f7fe fc7e 	bl	8000c30 <RFID_CARD_EXIT_READ>
		ID_EXIT_Status=RFID_CARD_ID_EXIT_CHECK(Driver_EXIT_ID, DriverID_Length, IDs_Num);
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <RFID_EXIT+0x150>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	2104      	movs	r1, #4
 800233c:	484a      	ldr	r0, [pc, #296]	; (8002468 <RFID_EXIT+0x14c>)
 800233e:	f7fe fceb 	bl	8000d18 <RFID_CARD_ID_EXIT_CHECK>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <RFID_EXIT+0x154>)
 8002348:	701a      	strb	r2, [r3, #0]

		switch(ID_EXIT_Status)
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <RFID_EXIT+0x154>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <RFID_EXIT+0x3c>
 8002352:	2b01      	cmp	r3, #1
 8002354:	d036      	beq.n	80023c4 <RFID_EXIT+0xa8>


			GATE_EXIT_COMMAND(GATE_CLOSE);
			break;
		default:
			break;
 8002356:	e076      	b.n	8002446 <RFID_EXIT+0x12a>
			Available_Slots++;
 8002358:	4b46      	ldr	r3, [pc, #280]	; (8002474 <RFID_EXIT+0x158>)
 800235a:	f993 3000 	ldrsb.w	r3, [r3]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	b25a      	sxtb	r2, r3
 8002366:	4b43      	ldr	r3, [pc, #268]	; (8002474 <RFID_EXIT+0x158>)
 8002368:	701a      	strb	r2, [r3, #0]
			Seven_SegmentBCD_Display(GPIOB , Available_Slots);
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <RFID_EXIT+0x158>)
 800236c:	f993 3000 	ldrsb.w	r3, [r3]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	4840      	ldr	r0, [pc, #256]	; (8002478 <RFID_EXIT+0x15c>)
 8002376:	f7fd ff41 	bl	80001fc <Seven_SegmentBCD_Display>
			LCD_GOTO_XY(1, 0);
 800237a:	2100      	movs	r1, #0
 800237c:	2001      	movs	r0, #1
 800237e:	f7fe fa7f 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("EX_ID:");
 8002382:	483e      	ldr	r0, [pc, #248]	; (800247c <RFID_EXIT+0x160>)
 8002384:	f7fe fbac 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_WRITE_STRING(Driver_EXIT_ID);
 8002388:	4837      	ldr	r0, [pc, #220]	; (8002468 <RFID_EXIT+0x14c>)
 800238a:	f7fe fba9 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(2, 1);
 800238e:	2101      	movs	r1, #1
 8002390:	2002      	movs	r0, #2
 8002392:	f7fe fa75 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("Authorized");
 8002396:	483a      	ldr	r0, [pc, #232]	; (8002480 <RFID_EXIT+0x164>)
 8002398:	f7fe fba2 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(1, 0);
 800239c:	2100      	movs	r1, #0
 800239e:	2001      	movs	r0, #1
 80023a0:	f7fe fa6e 	bl	8000880 <LCD_GOTO_XY>
			GATE_EXIT_COMMAND(GATE_OPEN);
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <RFID_EXIT+0x168>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f8be 	bl	800252c <GATE_EXIT_COMMAND>
			Delay_ms(250000);
 80023b0:	4835      	ldr	r0, [pc, #212]	; (8002488 <RFID_EXIT+0x16c>)
 80023b2:	f000 faa1 	bl	80028f8 <Delay_ms>
			GATE_EXIT_COMMAND(GATE_CLOSE);
 80023b6:	4b35      	ldr	r3, [pc, #212]	; (800248c <RFID_EXIT+0x170>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f8b5 	bl	800252c <GATE_EXIT_COMMAND>
			break;
 80023c2:	e040      	b.n	8002446 <RFID_EXIT+0x12a>
			LCD_GOTO_XY(1, 0);
 80023c4:	2100      	movs	r1, #0
 80023c6:	2001      	movs	r0, #1
 80023c8:	f7fe fa5a 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("EX_ID:");
 80023cc:	482b      	ldr	r0, [pc, #172]	; (800247c <RFID_EXIT+0x160>)
 80023ce:	f7fe fb87 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_WRITE_STRING(Driver_EXIT_ID);
 80023d2:	4825      	ldr	r0, [pc, #148]	; (8002468 <RFID_EXIT+0x14c>)
 80023d4:	f7fe fb84 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(2, 1);
 80023d8:	2101      	movs	r1, #1
 80023da:	2002      	movs	r0, #2
 80023dc:	f7fe fa50 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("Un_Authorized");
 80023e0:	482b      	ldr	r0, [pc, #172]	; (8002490 <RFID_EXIT+0x174>)
 80023e2:	f7fe fb7d 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(1, 0);
 80023e6:	2100      	movs	r1, #0
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7fe fa49 	bl	8000880 <LCD_GOTO_XY>
			for(int i=0;i<3;i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	e01e      	b.n	8002432 <RFID_EXIT+0x116>
				BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_on);
 80023f4:	2200      	movs	r2, #0
 80023f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023fa:	481f      	ldr	r0, [pc, #124]	; (8002478 <RFID_EXIT+0x15c>)
 80023fc:	f000 f8c1 	bl	8002582 <BUZZER_Turn>
				LED_Turn(GPIOB, GPIO_PIN_3, Turn_Off);
 8002400:	2201      	movs	r2, #1
 8002402:	2108      	movs	r1, #8
 8002404:	481c      	ldr	r0, [pc, #112]	; (8002478 <RFID_EXIT+0x15c>)
 8002406:	f000 f8f5 	bl	80025f4 <LED_Turn>
				Delay_ms(100000);
 800240a:	4822      	ldr	r0, [pc, #136]	; (8002494 <RFID_EXIT+0x178>)
 800240c:	f000 fa74 	bl	80028f8 <Delay_ms>
				BUZZER_Turn(GPIOB,GPIO_PIN_11,Turn_off);
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002416:	4818      	ldr	r0, [pc, #96]	; (8002478 <RFID_EXIT+0x15c>)
 8002418:	f000 f8b3 	bl	8002582 <BUZZER_Turn>
				LED_Turn(GPIOB, GPIO_PIN_3, Turn_On);
 800241c:	2200      	movs	r2, #0
 800241e:	2108      	movs	r1, #8
 8002420:	4815      	ldr	r0, [pc, #84]	; (8002478 <RFID_EXIT+0x15c>)
 8002422:	f000 f8e7 	bl	80025f4 <LED_Turn>
				Delay_ms(100000);
 8002426:	481b      	ldr	r0, [pc, #108]	; (8002494 <RFID_EXIT+0x178>)
 8002428:	f000 fa66 	bl	80028f8 <Delay_ms>
			for(int i=0;i<3;i++)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3301      	adds	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	dddd      	ble.n	80023f4 <RFID_EXIT+0xd8>
			GATE_EXIT_COMMAND(GATE_CLOSE);
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <RFID_EXIT+0x170>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f874 	bl	800252c <GATE_EXIT_COMMAND>
			break;
 8002444:	bf00      	nop
		}
		GB_S_EXIT_READRFID =Stop_ReadRFID_EXIT;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <RFID_EXIT+0x148>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
		LCD_clear_screen();
	}



}
 800244c:	e005      	b.n	800245a <RFID_EXIT+0x13e>
		Delay_ms(1000);
 800244e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002452:	f000 fa51 	bl	80028f8 <Delay_ms>
		LCD_clear_screen();
 8002456:	f7fe f9f5 	bl	8000844 <LCD_clear_screen>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000095 	.word	0x20000095
 8002468:	2000011c 	.word	0x2000011c
 800246c:	20000029 	.word	0x20000029
 8002470:	20000121 	.word	0x20000121
 8002474:	20000028 	.word	0x20000028
 8002478:	40010c00 	.word	0x40010c00
 800247c:	08002a30 	.word	0x08002a30
 8002480:	080029ec 	.word	0x080029ec
 8002484:	20000026 	.word	0x20000026
 8002488:	0003d090 	.word	0x0003d090
 800248c:	20000122 	.word	0x20000122
 8002490:	080029f8 	.word	0x080029f8
 8002494:	000186a0 	.word	0x000186a0

08002498 <Gate_Entry_Init>:



void Gate_Entry_Init()
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t Entry_cnfg;
	Entry_cnfg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 800249e:	2304      	movs	r3, #4
 80024a0:	60bb      	str	r3, [r7, #8]
	Entry_cnfg.GPIO_PinNumber=GPIO_PIN_0;
 80024a2:	2301      	movs	r3, #1
 80024a4:	80bb      	strh	r3, [r7, #4]
	Entry_cnfg.GPIO_Speed=GPIO_Speed_10MHz;
 80024a6:	2301      	movs	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]

	MCAL_GPIO_Enable_ClocK(GPIOB);
 80024aa:	4808      	ldr	r0, [pc, #32]	; (80024cc <Gate_Entry_Init+0x34>)
 80024ac:	f7fe ffbc 	bl	8001428 <MCAL_GPIO_Enable_ClocK>
	MCAL_GPIO_Init(GPIOB, &Entry_cnfg);
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4805      	ldr	r0, [pc, #20]	; (80024cc <Gate_Entry_Init+0x34>)
 80024b6:	f7ff f8ad 	bl	8001614 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2101      	movs	r1, #1
 80024be:	4803      	ldr	r0, [pc, #12]	; (80024cc <Gate_Entry_Init+0x34>)
 80024c0:	f7ff f960 	bl	8001784 <MCAL_GPIO_WritePin>

}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40010c00 	.word	0x40010c00

080024d0 <GATE_ENTRY_COMMAND>:


void GATE_ENTRY_COMMAND(uint8_t Command)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, Command);
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	461a      	mov	r2, r3
 80024de:	2101      	movs	r1, #1
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <GATE_ENTRY_COMMAND+0x20>)
 80024e2:	f7ff f94f 	bl	8001784 <MCAL_GPIO_WritePin>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40010c00 	.word	0x40010c00

080024f4 <Gate_EXIT_Init>:




void Gate_EXIT_Init()
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t Entry_cnfg;
	Entry_cnfg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80024fa:	2304      	movs	r3, #4
 80024fc:	60bb      	str	r3, [r7, #8]
	Entry_cnfg.GPIO_PinNumber=GPIO_PIN_1;
 80024fe:	2302      	movs	r3, #2
 8002500:	80bb      	strh	r3, [r7, #4]
	Entry_cnfg.GPIO_Speed=GPIO_Speed_10MHz;
 8002502:	2301      	movs	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]

	MCAL_GPIO_Enable_ClocK(GPIOB);
 8002506:	4808      	ldr	r0, [pc, #32]	; (8002528 <Gate_EXIT_Init+0x34>)
 8002508:	f7fe ff8e 	bl	8001428 <MCAL_GPIO_Enable_ClocK>
	MCAL_GPIO_Init(GPIOB, &Entry_cnfg);
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	; (8002528 <Gate_EXIT_Init+0x34>)
 8002512:	f7ff f87f 	bl	8001614 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	2102      	movs	r1, #2
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <Gate_EXIT_Init+0x34>)
 800251c:	f7ff f932 	bl	8001784 <MCAL_GPIO_WritePin>

}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40010c00 	.word	0x40010c00

0800252c <GATE_EXIT_COMMAND>:


void GATE_EXIT_COMMAND(uint8_t Command)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, Command);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	461a      	mov	r2, r3
 800253a:	2102      	movs	r1, #2
 800253c:	4803      	ldr	r0, [pc, #12]	; (800254c <GATE_EXIT_COMMAND+0x20>)
 800253e:	f7ff f921 	bl	8001784 <MCAL_GPIO_WritePin>

}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40010c00 	.word	0x40010c00

08002550 <BUZZER_INIT>:



void BUZZER_INIT(GPIO_TypedDef* GPIOx , uint16_t PinNumber)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
	MCAL_GPIO_Enable_ClocK(GPIOx);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe ff63 	bl	8001428 <MCAL_GPIO_Enable_ClocK>
	GPIO_PinConfig_t Buzzer_confg;
	Buzzer_confg.GPIO_PinNumber=PinNumber;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	81bb      	strh	r3, [r7, #12]
	Buzzer_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 8002566:	2304      	movs	r3, #4
 8002568:	613b      	str	r3, [r7, #16]
	Buzzer_confg.GPIO_Speed=GPIO_Speed_10MHz;
 800256a:	2301      	movs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]

	MCAL_GPIO_Init(GPIOx, &Buzzer_confg);
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff f84d 	bl	8001614 <MCAL_GPIO_Init>

}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <BUZZER_Turn>:

void BUZZER_Turn(GPIO_TypedDef* GPIOx,uint16_t PinNumber,Buzzer_State B_statte)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	807b      	strh	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	707b      	strb	r3, [r7, #1]
	switch(B_statte)
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <BUZZER_Turn+0x1c>
 8002598:	2b01      	cmp	r3, #1
 800259a:	d007      	beq.n	80025ac <BUZZER_Turn+0x2a>
	case Turn_Off:
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET);
		break;

	default:
		break;
 800259c:	e00d      	b.n	80025ba <BUZZER_Turn+0x38>
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET);
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff f8ed 	bl	8001784 <MCAL_GPIO_WritePin>
		break;
 80025aa:	e006      	b.n	80025ba <BUZZER_Turn+0x38>
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET);
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	2200      	movs	r2, #0
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff f8e6 	bl	8001784 <MCAL_GPIO_WritePin>
		break;
 80025b8:	bf00      	nop

	}

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <LED_INIT>:



void LED_INIT(GPIO_TypedDef* GPIOx , uint16_t PinNumber)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	807b      	strh	r3, [r7, #2]

	MCAL_GPIO_Enable_ClocK(GPIOx);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe ff2a 	bl	8001428 <MCAL_GPIO_Enable_ClocK>
	GPIO_PinConfig_t Buzzer_confg;
	Buzzer_confg.GPIO_PinNumber=PinNumber;
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	81bb      	strh	r3, [r7, #12]
	Buzzer_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
 80025d8:	2304      	movs	r3, #4
 80025da:	613b      	str	r3, [r7, #16]
	Buzzer_confg.GPIO_Speed=GPIO_Speed_10MHz;
 80025dc:	2301      	movs	r3, #1
 80025de:	617b      	str	r3, [r7, #20]

	MCAL_GPIO_Init(GPIOx, &Buzzer_confg);
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff f814 	bl	8001614 <MCAL_GPIO_Init>


}
 80025ec:	bf00      	nop
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <LED_Turn>:
void LED_Turn(GPIO_TypedDef* GPIOx,uint16_t PinNumber,LED_State L_statte)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
 8002600:	4613      	mov	r3, r2
 8002602:	707b      	strb	r3, [r7, #1]
	switch(L_statte)
 8002604:	787b      	ldrb	r3, [r7, #1]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <LED_Turn+0x1c>
 800260a:	2b01      	cmp	r3, #1
 800260c:	d007      	beq.n	800261e <LED_Turn+0x2a>
	case Turn_off:
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET);
		break;

	default:
		break;
 800260e:	e00d      	b.n	800262c <LED_Turn+0x38>
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_SET);
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	2201      	movs	r2, #1
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff f8b4 	bl	8001784 <MCAL_GPIO_WritePin>
		break;
 800261c:	e006      	b.n	800262c <LED_Turn+0x38>
		MCAL_GPIO_WritePin(GPIOx, PinNumber, GPIO_PIN_RESET);
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	2200      	movs	r2, #0
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff f8ad 	bl	8001784 <MCAL_GPIO_WritePin>
		break;
 800262a:	bf00      	nop

	}



}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <Password_Check>:



Password_Status Password_Check(char* Password_KEYPAD,uint8_t Pass_Length,char* Password_EEPROM)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	460b      	mov	r3, r1
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	for(i=0;i<Pass_Length;i++)
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]
 8002646:	e00e      	b.n	8002666 <Password_Check+0x32>
	{
		if(*(Password_KEYPAD++) != *(Password_EEPROM++))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	60fa      	str	r2, [r7, #12]
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	6079      	str	r1, [r7, #4]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <Password_Check+0x2c>
		{
			return Wrong ;
 800265c:	2301      	movs	r3, #1
 800265e:	e007      	b.n	8002670 <Password_Check+0x3c>
	for(i=0;i<Pass_Length;i++)
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	3301      	adds	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
 8002666:	7dfa      	ldrb	r2, [r7, #23]
 8002668:	7afb      	ldrb	r3, [r7, #11]
 800266a:	429a      	cmp	r2, r3
 800266c:	d3ec      	bcc.n	8002648 <Password_Check+0x14>
			break;
		}
	}
	return Right;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <Admin_Control>:




void Admin_Control(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af02      	add	r7, sp, #8
	Password_Status Pass_s;

	LCD_GOTO_XY(1, 0);
 8002682:	2100      	movs	r1, #0
 8002684:	2001      	movs	r0, #1
 8002686:	f7fe f8fb 	bl	8000880 <LCD_GOTO_XY>
	LCD_WRITE_STRING("Password: ");
 800268a:	4889      	ldr	r0, [pc, #548]	; (80028b0 <Admin_Control+0x234>)
 800268c:	f7fe fa28 	bl	8000ae0 <LCD_WRITE_STRING>


	while(1)
	{

		Keypad_char=Keypad_getkey();
 8002690:	f7fd ff44 	bl	800051c <Keypad_getkey>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	4b86      	ldr	r3, [pc, #536]	; (80028b4 <Admin_Control+0x238>)
 800269a:	701a      	strb	r2, [r3, #0]

		switch (Keypad_char)
 800269c:	4b85      	ldr	r3, [pc, #532]	; (80028b4 <Admin_Control+0x238>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b23      	cmp	r3, #35	; 0x23
 80026a2:	d002      	beq.n	80026aa <Admin_Control+0x2e>
 80026a4:	2b4e      	cmp	r3, #78	; 0x4e
 80026a6:	d103      	bne.n	80026b0 <Admin_Control+0x34>
		{
		case 'N':
			break;
 80026a8:	e0e0      	b.n	800286c <Admin_Control+0x1f0>
		case '#':
			LCD_clear_screen();
 80026aa:	f7fe f8cb 	bl	8000844 <LCD_clear_screen>
			break;
 80026ae:	e0dd      	b.n	800286c <Admin_Control+0x1f0>
		default:

			Keypad_Pass[Keypad_Counter]=Keypad_char;
 80026b0:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <Admin_Control+0x23c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b7f      	ldr	r3, [pc, #508]	; (80028b4 <Admin_Control+0x238>)
 80026b8:	7819      	ldrb	r1, [r3, #0]
 80026ba:	4b80      	ldr	r3, [pc, #512]	; (80028bc <Admin_Control+0x240>)
 80026bc:	5499      	strb	r1, [r3, r2]
			if(Keypad_Counter==3)
 80026be:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <Admin_Control+0x23c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	f040 80cb 	bne.w	800285e <Admin_Control+0x1e2>
			{
				Loop2_Stop=1;
 80026c8:	4b7d      	ldr	r3, [pc, #500]	; (80028c0 <Admin_Control+0x244>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
				EEPROM_READSEQUENCE(SPI1,GPIOA,GPIO_PIN_4, PasswordRx_Buff,Password_ADDRESS,4);
 80026ce:	2304      	movs	r3, #4
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2300      	movs	r3, #0
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <Admin_Control+0x248>)
 80026d8:	2210      	movs	r2, #16
 80026da:	497b      	ldr	r1, [pc, #492]	; (80028c8 <Admin_Control+0x24c>)
 80026dc:	487b      	ldr	r0, [pc, #492]	; (80028cc <Admin_Control+0x250>)
 80026de:	f7fd fe91 	bl	8000404 <EEPROM_READSEQUENCE>
				Pass_s=Password_Check(Keypad_Pass, 4 ,PasswordRx_Buff);
 80026e2:	4a78      	ldr	r2, [pc, #480]	; (80028c4 <Admin_Control+0x248>)
 80026e4:	2104      	movs	r1, #4
 80026e6:	4875      	ldr	r0, [pc, #468]	; (80028bc <Admin_Control+0x240>)
 80026e8:	f7ff ffa4 	bl	8002634 <Password_Check>
 80026ec:	4603      	mov	r3, r0
 80026ee:	707b      	strb	r3, [r7, #1]

				switch(Pass_s)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <Admin_Control+0x82>
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	f000 809d 	beq.w	8002836 <Admin_Control+0x1ba>
 80026fc:	e0b0      	b.n	8002860 <Admin_Control+0x1e4>
				{
				case Right:
					LCD_GOTO_XY(1, 0);
 80026fe:	2100      	movs	r1, #0
 8002700:	2001      	movs	r0, #1
 8002702:	f7fe f8bd 	bl	8000880 <LCD_GOTO_XY>
					LCD_WRITE_STRING("Pass is Right");
 8002706:	4872      	ldr	r0, [pc, #456]	; (80028d0 <Admin_Control+0x254>)
 8002708:	f7fe f9ea 	bl	8000ae0 <LCD_WRITE_STRING>
					LCD_GOTO_XY(1, 0);
 800270c:	2100      	movs	r1, #0
 800270e:	2001      	movs	r0, #1
 8002710:	f7fe f8b6 	bl	8000880 <LCD_GOTO_XY>
					LCD_WRITE_STRING("Enter the num of IDs:");
 8002714:	486f      	ldr	r0, [pc, #444]	; (80028d4 <Admin_Control+0x258>)
 8002716:	f7fe f9e3 	bl	8000ae0 <LCD_WRITE_STRING>

					while(1)
					{
						Keypad_char=Keypad_getkey();
 800271a:	f7fd feff 	bl	800051c <Keypad_getkey>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	4b64      	ldr	r3, [pc, #400]	; (80028b4 <Admin_Control+0x238>)
 8002724:	701a      	strb	r2, [r3, #0]
						switch (Keypad_char)
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <Admin_Control+0x238>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b23      	cmp	r3, #35	; 0x23
 800272c:	d002      	beq.n	8002734 <Admin_Control+0xb8>
 800272e:	2b4e      	cmp	r3, #78	; 0x4e
 8002730:	d103      	bne.n	800273a <Admin_Control+0xbe>
						{
						case 'N':
							break;
 8002732:	e076      	b.n	8002822 <Admin_Control+0x1a6>
						case '#':
							LCD_clear_screen();
 8002734:	f7fe f886 	bl	8000844 <LCD_clear_screen>
							break;
 8002738:	e073      	b.n	8002822 <Admin_Control+0x1a6>
						default:
							Loop_Stop=1;
 800273a:	4b67      	ldr	r3, [pc, #412]	; (80028d8 <Admin_Control+0x25c>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
							LCD_GOTO_XY(2, 7);
 8002740:	2107      	movs	r1, #7
 8002742:	2002      	movs	r0, #2
 8002744:	f7fe f89c 	bl	8000880 <LCD_GOTO_XY>
							LCD_WRITE_CHAR(Keypad_char);
 8002748:	4b5a      	ldr	r3, [pc, #360]	; (80028b4 <Admin_Control+0x238>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe f941 	bl	80009d4 <LCD_WRITE_CHAR>
							Keypad_Integer=Keypad_char-48;
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <Admin_Control+0x238>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	3b30      	subs	r3, #48	; 0x30
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b60      	ldr	r3, [pc, #384]	; (80028dc <Admin_Control+0x260>)
 800275c:	701a      	strb	r2, [r3, #0]

							LCD_clear_screen();
 800275e:	f7fe f871 	bl	8000844 <LCD_clear_screen>

							for(uint16_t i =0 ,ID_Address= 16 , j=Keypad_Integer; i<Keypad_Integer; i++)
 8002762:	2300      	movs	r3, #0
 8002764:	80fb      	strh	r3, [r7, #6]
 8002766:	2310      	movs	r3, #16
 8002768:	80bb      	strh	r3, [r7, #4]
 800276a:	4b5c      	ldr	r3, [pc, #368]	; (80028dc <Admin_Control+0x260>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	e050      	b.n	8002814 <Admin_Control+0x198>
							{
								LCD_GOTO_XY(1, 0);
 8002772:	2100      	movs	r1, #0
 8002774:	2001      	movs	r0, #1
 8002776:	f7fe f883 	bl	8000880 <LCD_GOTO_XY>
								LCD_WRITE_STRING("Enter ID");
 800277a:	4859      	ldr	r0, [pc, #356]	; (80028e0 <Admin_Control+0x264>)
 800277c:	f7fe f9b0 	bl	8000ae0 <LCD_WRITE_STRING>
								LCD_WRITE_CHAR(((Keypad_Integer - j--)+49));
 8002780:	4b56      	ldr	r3, [pc, #344]	; (80028dc <Admin_Control+0x260>)
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	1e59      	subs	r1, r3, #1
 8002788:	8079      	strh	r1, [r7, #2]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3331      	adds	r3, #49	; 0x31
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe f91d 	bl	80009d4 <LCD_WRITE_CHAR>

								while(1)
								{
									Keypad_char=Keypad_getkey();
 800279a:	f7fd febf 	bl	800051c <Keypad_getkey>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <Admin_Control+0x238>)
 80027a4:	701a      	strb	r2, [r3, #0]
									switch (Keypad_char)
 80027a6:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <Admin_Control+0x238>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b23      	cmp	r3, #35	; 0x23
 80027ac:	d002      	beq.n	80027b4 <Admin_Control+0x138>
 80027ae:	2b4e      	cmp	r3, #78	; 0x4e
 80027b0:	d103      	bne.n	80027ba <Admin_Control+0x13e>
									{
									case 'N':
										break;
 80027b2:	e021      	b.n	80027f8 <Admin_Control+0x17c>
									case '#':
										LCD_clear_screen();
 80027b4:	f7fe f846 	bl	8000844 <LCD_clear_screen>
										break;
 80027b8:	e01e      	b.n	80027f8 <Admin_Control+0x17c>
									default:
										Keypad_ID[Keypad_IDs_Counter]=Keypad_char;
 80027ba:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <Admin_Control+0x268>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <Admin_Control+0x238>)
 80027c2:	7819      	ldrb	r1, [r3, #0]
 80027c4:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <Admin_Control+0x26c>)
 80027c6:	5499      	strb	r1, [r3, r2]
										if(Keypad_IDs_Counter==3)
 80027c8:	4b46      	ldr	r3, [pc, #280]	; (80028e4 <Admin_Control+0x268>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d10d      	bne.n	80027ec <Admin_Control+0x170>
										{

											//Add Id in EEPROM.......................
											EEPROM_WRITESEQUENCE(SPI1,GPIOA,GPIO_PIN_4,Keypad_ID,ID_Address,4);
 80027d0:	2304      	movs	r3, #4
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	88bb      	ldrh	r3, [r7, #4]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <Admin_Control+0x26c>)
 80027da:	2210      	movs	r2, #16
 80027dc:	493a      	ldr	r1, [pc, #232]	; (80028c8 <Admin_Control+0x24c>)
 80027de:	483b      	ldr	r0, [pc, #236]	; (80028cc <Admin_Control+0x250>)
 80027e0:	f7fd fe3a 	bl	8000458 <EEPROM_WRITESEQUENCE>

											Keypad_IDs_Counter=4;
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <Admin_Control+0x268>)
 80027e6:	2204      	movs	r2, #4
 80027e8:	701a      	strb	r2, [r3, #0]
											break;
 80027ea:	e005      	b.n	80027f8 <Admin_Control+0x17c>
										}

										Keypad_IDs_Counter++;
 80027ec:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <Admin_Control+0x268>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <Admin_Control+0x268>)
 80027f6:	701a      	strb	r2, [r3, #0]
									}

									if(Keypad_IDs_Counter==4)
 80027f8:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <Admin_Control+0x268>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d1cc      	bne.n	800279a <Admin_Control+0x11e>
									{
										Keypad_IDs_Counter=0;
 8002800:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <Admin_Control+0x268>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
										break;
 8002806:	bf00      	nop
									}

								}

								ID_Address=ID_Address+16;
 8002808:	88bb      	ldrh	r3, [r7, #4]
 800280a:	3310      	adds	r3, #16
 800280c:	80bb      	strh	r3, [r7, #4]
							for(uint16_t i =0 ,ID_Address= 16 , j=Keypad_Integer; i<Keypad_Integer; i++)
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	3301      	adds	r3, #1
 8002812:	80fb      	strh	r3, [r7, #6]
 8002814:	4b31      	ldr	r3, [pc, #196]	; (80028dc <Admin_Control+0x260>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	429a      	cmp	r2, r3
 800281e:	d3a8      	bcc.n	8002772 <Admin_Control+0xf6>

							}

							break;
 8002820:	bf00      	nop

						}

						if(Loop_Stop==1)
 8002822:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <Admin_Control+0x25c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	f47f af77 	bne.w	800271a <Admin_Control+0x9e>
						{

							Loop_Stop=0;
 800282c:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <Admin_Control+0x25c>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]

							break;
 8002832:	bf00      	nop
						}

					}

					break;
 8002834:	e014      	b.n	8002860 <Admin_Control+0x1e4>


				case Wrong:
					LCD_GOTO_XY(1, 0);
 8002836:	2100      	movs	r1, #0
 8002838:	2001      	movs	r0, #1
 800283a:	f7fe f821 	bl	8000880 <LCD_GOTO_XY>
					LCD_WRITE_STRING("Pass Is Wrong");
 800283e:	482b      	ldr	r0, [pc, #172]	; (80028ec <Admin_Control+0x270>)
 8002840:	f7fe f94e 	bl	8000ae0 <LCD_WRITE_STRING>
					LCD_clear_screen();
 8002844:	f7fd fffe 	bl	8000844 <LCD_clear_screen>
					LCD_GOTO_XY(1, 0);
 8002848:	2100      	movs	r1, #0
 800284a:	2001      	movs	r0, #1
 800284c:	f7fe f818 	bl	8000880 <LCD_GOTO_XY>
					LCD_WRITE_STRING("Password: ");
 8002850:	4817      	ldr	r0, [pc, #92]	; (80028b0 <Admin_Control+0x234>)
 8002852:	f7fe f945 	bl	8000ae0 <LCD_WRITE_STRING>

					Loop2_Stop=0;
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <Admin_Control+0x244>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
					break;
 800285c:	e000      	b.n	8002860 <Admin_Control+0x1e4>

				}
			}
 800285e:	bf00      	nop


			Keypad_Counter++;
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <Admin_Control+0x23c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <Admin_Control+0x23c>)
 800286a:	701a      	strb	r2, [r3, #0]

		}

		if(Loop2_Stop==1)
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <Admin_Control+0x244>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	f47f af0d 	bne.w	8002690 <Admin_Control+0x14>
		{

			Loop2_Stop=0;
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <Admin_Control+0x244>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
			LCD_GOTO_XY(1, 0);
 800287c:	2100      	movs	r1, #0
 800287e:	2001      	movs	r0, #1
 8002880:	f7fd fffe 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("Load---->Done");
 8002884:	481a      	ldr	r0, [pc, #104]	; (80028f0 <Admin_Control+0x274>)
 8002886:	f7fe f92b 	bl	8000ae0 <LCD_WRITE_STRING>
			Delay_ms(5000);
 800288a:	f241 3088 	movw	r0, #5000	; 0x1388
 800288e:	f000 f833 	bl	80028f8 <Delay_ms>
			LCD_GOTO_XY(1, 0);
 8002892:	2100      	movs	r1, #0
 8002894:	2001      	movs	r0, #1
 8002896:	f7fd fff3 	bl	8000880 <LCD_GOTO_XY>
			LCD_WRITE_STRING("Admin_Page>exit");
 800289a:	4816      	ldr	r0, [pc, #88]	; (80028f4 <Admin_Control+0x278>)
 800289c:	f7fe f920 	bl	8000ae0 <LCD_WRITE_STRING>
			LCD_clear_screen();
 80028a0:	f7fd ffd0 	bl	8000844 <LCD_clear_screen>

			break;
 80028a4:	bf00      	nop
		}

	}

}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	08002a38 	.word	0x08002a38
 80028b4:	20000128 	.word	0x20000128
 80028b8:	2000012a 	.word	0x2000012a
 80028bc:	2000012c 	.word	0x2000012c
 80028c0:	20000135 	.word	0x20000135
 80028c4:	20000124 	.word	0x20000124
 80028c8:	40010800 	.word	0x40010800
 80028cc:	40013000 	.word	0x40013000
 80028d0:	08002a44 	.word	0x08002a44
 80028d4:	08002a54 	.word	0x08002a54
 80028d8:	20000134 	.word	0x20000134
 80028dc:	20000129 	.word	0x20000129
 80028e0:	08002a6c 	.word	0x08002a6c
 80028e4:	2000012b 	.word	0x2000012b
 80028e8:	20000130 	.word	0x20000130
 80028ec:	08002a78 	.word	0x08002a78
 80028f0:	08002a88 	.word	0x08002a88
 80028f4:	08002a98 	.word	0x08002a98

080028f8 <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;
	for(int i =0 ;i<time_ms;i++)
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e003      	b.n	800290e <Delay_ms+0x16>
	{
		__asm__("nop");
 8002906:	bf00      	nop
	for(int i =0 ;i<time_ms;i++)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3301      	adds	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d8f7      	bhi.n	8002906 <Delay_ms+0xe>

	}

}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
	...

08002924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002924:	480d      	ldr	r0, [pc, #52]	; (800295c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002928:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800292c:	480c      	ldr	r0, [pc, #48]	; (8002960 <LoopForever+0x6>)
  ldr r1, =_edata
 800292e:	490d      	ldr	r1, [pc, #52]	; (8002964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <LoopForever+0xe>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002944:	4c0a      	ldr	r4, [pc, #40]	; (8002970 <LoopForever+0x16>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002952:	f000 f811 	bl	8002978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002956:	f7ff fb75 	bl	8002044 <main>

0800295a <LoopForever>:

LoopForever:
  b LoopForever
 800295a:	e7fe      	b.n	800295a <LoopForever>
  ldr   r0, =_estack
 800295c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002968:	08002ac8 	.word	0x08002ac8
  ldr r2, =_sbss
 800296c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002970:	20000138 	.word	0x20000138

08002974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC1_2_IRQHandler>
	...

08002978 <__libc_init_array>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	2600      	movs	r6, #0
 800297c:	4d0c      	ldr	r5, [pc, #48]	; (80029b0 <__libc_init_array+0x38>)
 800297e:	4c0d      	ldr	r4, [pc, #52]	; (80029b4 <__libc_init_array+0x3c>)
 8002980:	1b64      	subs	r4, r4, r5
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	42a6      	cmp	r6, r4
 8002986:	d109      	bne.n	800299c <__libc_init_array+0x24>
 8002988:	f000 f81a 	bl	80029c0 <_init>
 800298c:	2600      	movs	r6, #0
 800298e:	4d0a      	ldr	r5, [pc, #40]	; (80029b8 <__libc_init_array+0x40>)
 8002990:	4c0a      	ldr	r4, [pc, #40]	; (80029bc <__libc_init_array+0x44>)
 8002992:	1b64      	subs	r4, r4, r5
 8002994:	10a4      	asrs	r4, r4, #2
 8002996:	42a6      	cmp	r6, r4
 8002998:	d105      	bne.n	80029a6 <__libc_init_array+0x2e>
 800299a:	bd70      	pop	{r4, r5, r6, pc}
 800299c:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a0:	4798      	blx	r3
 80029a2:	3601      	adds	r6, #1
 80029a4:	e7ee      	b.n	8002984 <__libc_init_array+0xc>
 80029a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029aa:	4798      	blx	r3
 80029ac:	3601      	adds	r6, #1
 80029ae:	e7f2      	b.n	8002996 <__libc_init_array+0x1e>
 80029b0:	08002ac0 	.word	0x08002ac0
 80029b4:	08002ac0 	.word	0x08002ac0
 80029b8:	08002ac0 	.word	0x08002ac0
 80029bc:	08002ac4 	.word	0x08002ac4

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
