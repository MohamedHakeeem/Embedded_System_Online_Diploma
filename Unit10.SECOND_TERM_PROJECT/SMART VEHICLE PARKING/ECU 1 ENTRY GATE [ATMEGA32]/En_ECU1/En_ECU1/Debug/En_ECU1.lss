
En_ECU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110d  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007db  00000000  00000000  00001ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ff  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000513  00000000  00000000  000030d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000035e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_10>
  2c:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  74:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TOIE_Callback>:
void SERVO_RUN(void);


void TOIE_Callback()
{	
	MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	68 e0       	ldi	r22, 0x08	; 8
  80:	86 e3       	ldi	r24, 0x36	; 54
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
  88:	08 95       	ret

0000008a <SERVO_INIT>:




void SERVO_INIT(void)
{
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	29 97       	sbiw	r28, 0x09	; 9
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
	GPIO_PinConfig_t pwmgpio_cnfg;
	pwmgpio_cnfg.GPIO_Mode=GPIO_Mode_Out_push_pull;
  a0:	13 e0       	ldi	r17, 0x03	; 3
  a2:	1a 83       	std	Y+2, r17	; 0x02
	pwmgpio_cnfg.GPIO_PinNumber=GPIO_PIN_3;
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(GPIOB,&pwmgpio_cnfg);
  a8:	be 01       	movw	r22, r28
  aa:	6f 5f       	subi	r22, 0xFF	; 255
  ac:	7f 4f       	sbci	r23, 0xFF	; 255
  ae:	86 e3       	ldi	r24, 0x36	; 54
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>

	MCAL_PWM_SETCALLBACK_OVF_INTERRUPT(TOIE_Callback);
  b6:	8e e3       	ldi	r24, 0x3E	; 62
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 4a 01 	call	0x294	; 0x294 <MCAL_PWM_SETCALLBACK_OVF_INTERRUPT>

	PWM_CONFIG_T PWM_config;
	PWM_config.CLCK=PWM_PRESC_CLCK64; //------> 125000z ------>T(CLK)=8*10^(-6) -------->T(Periodic)=2ms
  be:	1e 83       	std	Y+6, r17	; 0x06
	PWM_config.MODE=PH_CORRECT_PWM;
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	8b 83       	std	Y+3, r24	; 0x03
	PWM_config.STATE=PWM_NON_INVERTING;
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	8f 83       	std	Y+7, r24	; 0x07
	PWM_config.OCM_INTERRUPT=PWM_OCIE_DISABLE;
  c8:	1c 82       	std	Y+4, r1	; 0x04
	PWM_config.OVF_INTERRUPT=PWM_TOIE_ENABLE;
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	1d 83       	std	Y+5, r17	; 0x05

	MCAL_PWM_SET_CMP_VALUE(0);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 47 01 	call	0x28e	; 0x28e <MCAL_PWM_SET_CMP_VALUE>
	MCAL_PWM_INIT(&PWM_config);
  d4:	ce 01       	movw	r24, r28
  d6:	03 96       	adiw	r24, 0x03	; 3
  d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <MCAL_PWM_INIT>
	
	
	GPIO_PinConfig_t Gpio_cnfg;
	Gpio_cnfg.GPIO_Mode=GPIO_Mode_Inp_Floating;
  dc:	19 87       	std	Y+9, r17	; 0x09
	Gpio_cnfg.GPIO_PinNumber=GPIO_PIN_0;
  de:	18 87       	std	Y+8, r17	; 0x08
	MCAL_GPIO_Init(GPIOA,&Gpio_cnfg);
  e0:	be 01       	movw	r22, r28
  e2:	68 5f       	subi	r22, 0xF8	; 248
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	89 e3       	ldi	r24, 0x39	; 57
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
	

	Gpio_cnfg.GPIO_Mode=GPIO_Mode_Inp_Floating;
  ee:	19 87       	std	Y+9, r17	; 0x09
	Gpio_cnfg.GPIO_PinNumber=GPIO_PIN_1;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	88 87       	std	Y+8, r24	; 0x08
	MCAL_GPIO_Init(GPIOA,&Gpio_cnfg);
  f4:	be 01       	movw	r22, r28
  f6:	68 5f       	subi	r22, 0xF8	; 248
  f8:	7f 4f       	sbci	r23, 0xFF	; 255
  fa:	89 e3       	ldi	r24, 0x39	; 57
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
	
	
	
}
 102:	29 96       	adiw	r28, 0x09	; 9
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	08 95       	ret

00000116 <SERVO_RUN>:


void SERVO_RUN(void)
{
	Gate_entry_state=MCAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	89 e3       	ldi	r24, 0x39	; 57
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 df 00 	call	0x1be	; 0x1be <MCAL_GPIO_ReadPin>
 120:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Gate_entry_state>
	IR_state=MCAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	89 e3       	ldi	r24, 0x39	; 57
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 df 00 	call	0x1be	; 0x1be <MCAL_GPIO_ReadPin>
 12e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(Gate_entry_state==GPIO_PIN_SET)
 132:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Gate_entry_state>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	d1 f4       	brne	.+52     	; 0x16e <SERVO_RUN+0x58>
	{
		//Open the gate ..... servo.
		//to get 90 degree , so you should make duty cycle equal........1.5ms on the periodic time
		//But for Proteus, I tuned the angles for the servo .....................
		MCAL_PWM_SET_CMP_VALUE(94);
 13a:	8e e5       	ldi	r24, 0x5E	; 94
 13c:	0e 94 47 01 	call	0x28e	; 0x28e <MCAL_PWM_SET_CMP_VALUE>
		
		while(!MCAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_RESET || !MCAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) ==GPIO_PIN_RESET );
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	89 e3       	ldi	r24, 0x39	; 57
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 df 00 	call	0x1be	; 0x1be <MCAL_GPIO_ReadPin>
 14a:	81 11       	cpse	r24, r1
 14c:	f9 cf       	rjmp	.-14     	; 0x140 <SERVO_RUN+0x2a>
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	89 e3       	ldi	r24, 0x39	; 57
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 df 00 	call	0x1be	; 0x1be <MCAL_GPIO_ReadPin>
 158:	81 11       	cpse	r24, r1
 15a:	f2 cf       	rjmp	.-28     	; 0x140 <SERVO_RUN+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	83 ec       	ldi	r24, 0xC3	; 195
 15e:	99 e0       	ldi	r25, 0x09	; 9
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <SERVO_RUN+0x4a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <SERVO_RUN+0x50>
 166:	00 00       	nop
		_delay_ms(10);
		MCAL_PWM_SET_CMP_VALUE(0);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 47 01 	call	0x28e	; 0x28e <MCAL_PWM_SET_CMP_VALUE>
 16e:	08 95       	ret

00000170 <main>:


int main()
{

	SERVO_INIT();
 170:	0e 94 45 00 	call	0x8a	; 0x8a <SERVO_INIT>
	while(1)
	{
		SERVO_RUN();
 174:	0e 94 8b 00 	call	0x116	; 0x116 <SERVO_RUN>
 178:	fd cf       	rjmp	.-6      	; 0x174 <main+0x4>

0000017a <MCAL_GPIO_Init>:
 * Note-..........................................................
 */
uint8_t MCAL_GPIO_ReadPort(GPIO_TypedDef* GPIOx)
{
	return (uint8_t)(GPIOx->PIN);
}
 17a:	fc 01       	movw	r30, r24
 17c:	db 01       	movw	r26, r22
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	9c 91       	ld	r25, X
 182:	11 97       	sbiw	r26, 0x01	; 1
 184:	91 30       	cpi	r25, 0x01	; 1
 186:	31 f4       	brne	.+12     	; 0x194 <MCAL_GPIO_Init+0x1a>
 188:	91 81       	ldd	r25, Z+1	; 0x01
 18a:	8c 91       	ld	r24, X
 18c:	80 95       	com	r24
 18e:	89 23       	and	r24, r25
 190:	81 83       	std	Z+1, r24	; 0x01
 192:	08 95       	ret
 194:	92 30       	cpi	r25, 0x02	; 2
 196:	59 f4       	brne	.+22     	; 0x1ae <MCAL_GPIO_Init+0x34>
 198:	91 81       	ldd	r25, Z+1	; 0x01
 19a:	db 01       	movw	r26, r22
 19c:	8c 91       	ld	r24, X
 19e:	80 95       	com	r24
 1a0:	89 23       	and	r24, r25
 1a2:	81 83       	std	Z+1, r24	; 0x01
 1a4:	92 81       	ldd	r25, Z+2	; 0x02
 1a6:	8c 91       	ld	r24, X
 1a8:	89 2b       	or	r24, r25
 1aa:	82 83       	std	Z+2, r24	; 0x02
 1ac:	08 95       	ret
 1ae:	93 30       	cpi	r25, 0x03	; 3
 1b0:	29 f4       	brne	.+10     	; 0x1bc <MCAL_GPIO_Init+0x42>
 1b2:	91 81       	ldd	r25, Z+1	; 0x01
 1b4:	db 01       	movw	r26, r22
 1b6:	8c 91       	ld	r24, X
 1b8:	89 2b       	or	r24, r25
 1ba:	81 83       	std	Z+1, r24	; 0x01
 1bc:	08 95       	ret

000001be <MCAL_GPIO_ReadPin>:
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	86 23       	and	r24, r22
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <MCAL_GPIO_ReadPin+0xa>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret

000001ca <MCAL_GPIO_WritePin>:
 * @param [in] - Set "Value" which is 0 or 1,
 * @retval -NOT......
 * Note-..........................................................
 */
void MCAL_GPIO_WritePin(GPIO_TypedDef* GPIOx,uint8_t PinNumber , uint8_t Value)
{
 1ca:	fc 01       	movw	r30, r24

	if(Value == (uint8_t) GPIO_PIN_SET)
 1cc:	41 30       	cpi	r20, 0x01	; 1
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <MCAL_GPIO_WritePin+0xe>
	{
		GPIOx->PORT |= (uint8_t)PinNumber;
 1d0:	82 81       	ldd	r24, Z+2	; 0x02
 1d2:	68 2b       	or	r22, r24
 1d4:	62 83       	std	Z+2, r22	; 0x02
 1d6:	08 95       	ret
	}

	else
	{
		GPIOx->PORT &= ~(uint8_t)(PinNumber);
 1d8:	92 81       	ldd	r25, Z+2	; 0x02
 1da:	60 95       	com	r22
 1dc:	69 23       	and	r22, r25
 1de:	62 83       	std	Z+2, r22	; 0x02
 1e0:	08 95       	ret

000001e2 <MCAL_PWM_INIT>:
}

void MCAL_PWM_SETCALLBACK_CMP_INTERRUPT(PTR_VoidFuncVoid_t CALLBACK)
{

	CALLBACK_CMP=CALLBACK;
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <MCAL_PWM_INIT+0x6>
 1e6:	4f c0       	rjmp	.+158    	; 0x286 <MCAL_PWM_INIT+0xa4>
 1e8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <PWM_CONFIG+0x1>
 1ec:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <PWM_CONFIG>
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	88 34       	cpi	r24, 0x48	; 72
 1f6:	11 f0       	breq	.+4      	; 0x1fc <MCAL_PWM_INIT+0x1a>
 1f8:	80 34       	cpi	r24, 0x40	; 64
 1fa:	19 f4       	brne	.+6      	; 0x202 <MCAL_PWM_INIT+0x20>
 1fc:	93 b7       	in	r25, 0x33	; 51
 1fe:	89 2b       	or	r24, r25
 200:	83 bf       	out	0x33, r24	; 51
 202:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PWM_CONFIG>
 206:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PWM_CONFIG+0x1>
 20a:	83 81       	ldd	r24, Z+3	; 0x03
 20c:	88 30       	cpi	r24, 0x08	; 8
 20e:	18 f4       	brcc	.+6      	; 0x216 <MCAL_PWM_INIT+0x34>
 210:	93 b7       	in	r25, 0x33	; 51
 212:	89 2b       	or	r24, r25
 214:	83 bf       	out	0x33, r24	; 51
 216:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PWM_CONFIG>
 21a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PWM_CONFIG+0x1>
 21e:	81 81       	ldd	r24, Z+1	; 0x01
 220:	88 23       	and	r24, r24
 222:	11 f0       	breq	.+4      	; 0x228 <MCAL_PWM_INIT+0x46>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	69 f4       	brne	.+26     	; 0x242 <MCAL_PWM_INIT+0x60>
 228:	99 b7       	in	r25, 0x39	; 57
 22a:	89 2b       	or	r24, r25
 22c:	89 bf       	out	0x39, r24	; 57
 22e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PWM_CONFIG>
 232:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PWM_CONFIG+0x1>
 236:	81 81       	ldd	r24, Z+1	; 0x01
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	19 f4       	brne	.+6      	; 0x242 <MCAL_PWM_INIT+0x60>
 23c:	8f b7       	in	r24, 0x3f	; 63
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	8f bf       	out	0x3f, r24	; 63
 242:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PWM_CONFIG>
 246:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PWM_CONFIG+0x1>
 24a:	82 81       	ldd	r24, Z+2	; 0x02
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	68 f4       	brcc	.+26     	; 0x26a <MCAL_PWM_INIT+0x88>
 250:	99 b7       	in	r25, 0x39	; 57
 252:	89 2b       	or	r24, r25
 254:	89 bf       	out	0x39, r24	; 57
 256:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PWM_CONFIG>
 25a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PWM_CONFIG+0x1>
 25e:	82 81       	ldd	r24, Z+2	; 0x02
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	19 f4       	brne	.+6      	; 0x26a <MCAL_PWM_INIT+0x88>
 264:	8f b7       	in	r24, 0x3f	; 63
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8f bf       	out	0x3f, r24	; 63
 26a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PWM_CONFIG>
 26e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PWM_CONFIG+0x1>
 272:	84 81       	ldd	r24, Z+4	; 0x04
 274:	80 33       	cpi	r24, 0x30	; 48
 276:	11 f0       	breq	.+4      	; 0x27c <MCAL_PWM_INIT+0x9a>
 278:	80 32       	cpi	r24, 0x20	; 32
 27a:	39 f4       	brne	.+14     	; 0x28a <MCAL_PWM_INIT+0xa8>
 27c:	93 b7       	in	r25, 0x33	; 51
 27e:	89 2b       	or	r24, r25
 280:	83 bf       	out	0x33, r24	; 51
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret

0000028e <MCAL_PWM_SET_CMP_VALUE>:
 28e:	8c bf       	out	0x3c, r24	; 60
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret

00000294 <MCAL_PWM_SETCALLBACK_OVF_INTERRUPT>:
 294:	08 95       	ret

00000296 <__vector_10>:


//Please Comment ISR OF TIMER in Case of using the TIMER DRIVER , VICE VERSA

ISR(TIMER0_COMP_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	NUM_COM++;
 2b8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <NUM_COM>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <NUM_COM>
	CALLBACK_CMP();
 2c2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <CALLBACK_CMP>
 2c6:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <CALLBACK_CMP+0x1>
 2ca:	09 95       	icall
}
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	NUM_OVF++;
 310:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <NUM_OVF>
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <NUM_OVF>
	CALLBACK_OVF();
 31a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <CALLBACK_OVF>
 31e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <CALLBACK_OVF+0x1>
 322:	09 95       	icall
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
