/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>



#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



typedef volatile unsigned int vuint32_t ;


// register address
#define GPIOA_BASE 0x40010800
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)


#define RCC_BASE  0X40021000
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_BASE + 0x18)
#define RCC_CR    *(volatile uint32_t *)(RCC_BASE + 0x00)
#define RCC_CFGR    *(volatile uint32_t *)(RCC_BASE + 0x04)




int main(void)
{

	//	Bit 24 PLLON: PLL enable
	//	Set and cleared by software to enable PLL.
	//	Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
	//	PLL clock is used as system clock or is selected to become the system clock. Software
	//	must disable the USB OTG FS clock before clearing this bit.
	//	0: PLL OFF
	//	1: PLL ON

	RCC_CR |= (1 << 24);

	//	Bit 16 PLLSRC: PLL entry clock source
	//	Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
	//	disabled.
	//	0: HSI oscillator clock / 2 selected as PLL input clock
	//	1: Clock from PREDIV1 selected as PLL input clock

	RCC_CFGR |= (0 << 16);





	//	Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	//	Set and cleared by software to control the division factor of the APB Low speed clock (PCLK1).
	//	0xx: HCLK not divided
	//	100: HCLK divided by 2
	//	101: HCLK divided by 4
	//	110: HCLK divided by 8
	//	111: HCLK divided by 16
	RCC_CFGR |= (0b100 << 8);

	//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	//	Set and cleared by software to control the division factor of the APB High speed clock (PCLK2).
	//	0xx: HCLK not divided
	//	100: HCLK divided by 2
	//	101: HCLK divided by 4
	//	110: HCLK divided by 8
	//	111: HCLK divided by 16
	RCC_CFGR |= (0b101 << 11);



	//	Bits 1:0 SW[1:0]: System clock Switch
	//	Set and cleared by software to select SYSCLK source.
	//	Set by hardware to force HSI selection when leaving Stop and Standby mode or in case of failure of
	//	the HSE oscillator used directly or indirectly as system clock (if the Clock Security System is
	//	enabled).
	//	00: HSI selected as system clock
	//	01: HSE selected as system clock
	//	10: PLL selected as system clock
	//	11: Not allowed

	RCC_CFGR |= (0b00<<0);




	//	HSION: Internal high-speed clock enable
	//	Set and cleared by software.
	//	Set by hardware to force the internal 8 MHz RC oscillator ON when leaving Stop or Standby
	//	mode or in case of failure of the external 3-25 MHz oscillator used directly or indirectly as
	//	system clock. This bit can not be cleared if the internal 8 MHz RC is used directly or
	//	indirectly as system clock or is selected to become the system clock.
	//	0: Internal 8 MHz RC oscillator OFF
	//	1: Internal 8 MHz RC oscillator O

	RCC_CR |= (1<<0);



	//Enable RCC_CLOCK PORTA
	RCC_APB2ENR |= (1 << 2);



	//Init GPIOA
	GPIOA_CRH &= 0xFF0FFFFF;
	GPIOA_CRH |= 0x00200000;

	while(1)
	{
		GPIOA_ODR |= 1<<13 ;
		for (int i = 0; i < 5000; i++); // arbitrary delay
		GPIOA_ODR &= ~(1<<13) ;
		for (int i = 0; i < 5000; i++); // arbitrary delay
	}



}







