
lab1_unit6_lesson3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000160  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000290  08000298  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000290  08000290  00010298  2**0
                  CONTENTS
  4 .ARM          00000000  08000290  08000290  00010298  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000290  08000298  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000290  08000290  00010290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000294  08000294  00010294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000298  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000298  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000101  00000000  00000000  000102c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000008f  00000000  00000000  000103c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  000104a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d69  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007c4  00000000  00000000  00012239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007c32  00000000  00000000  000129fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001a62f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001a680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000278 	.word	0x08000278

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000278 	.word	0x08000278

08000170 <main>:




int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	//Init GPIOA
	GPIOA_CRH &= 0xFF0FFFFF;
 8000176:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <main+0x64>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a16      	ldr	r2, [pc, #88]	; (80001d4 <main+0x64>)
 800017c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000180:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 8000182:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <main+0x64>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a13      	ldr	r2, [pc, #76]	; (80001d4 <main+0x64>)
 8000188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800018c:	6013      	str	r3, [r2, #0]

	while(1)
	{
		GPIOA_ODR |= 1<<13 ;
 800018e:	4b12      	ldr	r3, [pc, #72]	; (80001d8 <main+0x68>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a11      	ldr	r2, [pc, #68]	; (80001d8 <main+0x68>)
 8000194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000198:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 5000; i++); // arbitrary delay
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
 800019e:	e002      	b.n	80001a6 <main+0x36>
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3301      	adds	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f241 3287 	movw	r2, #4999	; 0x1387
 80001ac:	4293      	cmp	r3, r2
 80001ae:	ddf7      	ble.n	80001a0 <main+0x30>
		GPIOA_ODR &= ~(1<<13) ;
 80001b0:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <main+0x68>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a08      	ldr	r2, [pc, #32]	; (80001d8 <main+0x68>)
 80001b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001ba:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 5000; i++); // arbitrary delay
 80001bc:	2300      	movs	r3, #0
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	e002      	b.n	80001c8 <main+0x58>
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	3301      	adds	r3, #1
 80001c6:	603b      	str	r3, [r7, #0]
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	f241 3287 	movw	r2, #4999	; 0x1387
 80001ce:	4293      	cmp	r3, r2
 80001d0:	ddf7      	ble.n	80001c2 <main+0x52>
		GPIOA_ODR |= 1<<13 ;
 80001d2:	e7dc      	b.n	800018e <main+0x1e>
 80001d4:	40010804 	.word	0x40010804
 80001d8:	4001080c 	.word	0x4001080c

080001dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001dc:	480d      	ldr	r0, [pc, #52]	; (8000214 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e4:	480c      	ldr	r0, [pc, #48]	; (8000218 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e6:	490d      	ldr	r1, [pc, #52]	; (800021c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <LoopForever+0xe>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001ec:	e002      	b.n	80001f4 <LoopCopyDataInit>

080001ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001f2:	3304      	adds	r3, #4

080001f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f8:	d3f9      	bcc.n	80001ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001fa:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001fc:	4c0a      	ldr	r4, [pc, #40]	; (8000228 <LoopForever+0x16>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000200:	e001      	b.n	8000206 <LoopFillZerobss>

08000202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000204:	3204      	adds	r2, #4

08000206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000208:	d3fb      	bcc.n	8000202 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800020a:	f000 f811 	bl	8000230 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020e:	f7ff ffaf 	bl	8000170 <main>

08000212 <LoopForever>:

LoopForever:
  b LoopForever
 8000212:	e7fe      	b.n	8000212 <LoopForever>
  ldr   r0, =_estack
 8000214:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800021c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000220:	08000298 	.word	0x08000298
  ldr r2, =_sbss
 8000224:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000228:	2000001c 	.word	0x2000001c

0800022c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800022c:	e7fe      	b.n	800022c <ADC1_2_IRQHandler>
	...

08000230 <__libc_init_array>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2600      	movs	r6, #0
 8000234:	4d0c      	ldr	r5, [pc, #48]	; (8000268 <__libc_init_array+0x38>)
 8000236:	4c0d      	ldr	r4, [pc, #52]	; (800026c <__libc_init_array+0x3c>)
 8000238:	1b64      	subs	r4, r4, r5
 800023a:	10a4      	asrs	r4, r4, #2
 800023c:	42a6      	cmp	r6, r4
 800023e:	d109      	bne.n	8000254 <__libc_init_array+0x24>
 8000240:	f000 f81a 	bl	8000278 <_init>
 8000244:	2600      	movs	r6, #0
 8000246:	4d0a      	ldr	r5, [pc, #40]	; (8000270 <__libc_init_array+0x40>)
 8000248:	4c0a      	ldr	r4, [pc, #40]	; (8000274 <__libc_init_array+0x44>)
 800024a:	1b64      	subs	r4, r4, r5
 800024c:	10a4      	asrs	r4, r4, #2
 800024e:	42a6      	cmp	r6, r4
 8000250:	d105      	bne.n	800025e <__libc_init_array+0x2e>
 8000252:	bd70      	pop	{r4, r5, r6, pc}
 8000254:	f855 3b04 	ldr.w	r3, [r5], #4
 8000258:	4798      	blx	r3
 800025a:	3601      	adds	r6, #1
 800025c:	e7ee      	b.n	800023c <__libc_init_array+0xc>
 800025e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000262:	4798      	blx	r3
 8000264:	3601      	adds	r6, #1
 8000266:	e7f2      	b.n	800024e <__libc_init_array+0x1e>
 8000268:	08000290 	.word	0x08000290
 800026c:	08000290 	.word	0x08000290
 8000270:	08000290 	.word	0x08000290
 8000274:	08000294 	.word	0x08000294

08000278 <_init>:
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	bf00      	nop
 800027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027e:	bc08      	pop	{r3}
 8000280:	469e      	mov	lr, r3
 8000282:	4770      	bx	lr

08000284 <_fini>:
 8000284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000286:	bf00      	nop
 8000288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028a:	bc08      	pop	{r3}
 800028c:	469e      	mov	lr, r3
 800028e:	4770      	bx	lr
