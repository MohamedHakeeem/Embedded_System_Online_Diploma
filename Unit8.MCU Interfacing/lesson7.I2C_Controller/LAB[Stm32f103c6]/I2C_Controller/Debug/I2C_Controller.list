
I2C_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fe4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001114  08001114  00011114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001134  08001134  0001113c  2**0
                  CONTENTS
  4 .ARM          00000000  08001134  08001134  0001113c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001134  0800113c  0001113c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001134  08001134  00011134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001138  08001138  00011138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001113c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000000  0800113c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  0800113c  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001113c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000277f  00000000  00000000  00011165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b92  00000000  00000000  000138e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000012ce  00000000  00000000  00014476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  00015748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000258  00000000  00000000  00015a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037fd  00000000  00000000  00015c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005200  00000000  00000000  0001947d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cc87  00000000  00000000  0001e67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002b304  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000984  00000000  00000000  0002b354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080010fc 	.word	0x080010fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080010fc 	.word	0x080010fc

08000170 <HAL_EEPROM_Init>:




void HAL_EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//PB6 : SCL
	//PB7 : SDA

	I2C_Config_t I2C_Config;

	I2C_Config.General_Call = I2C_General_Call_Enabled;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	617b      	str	r3, [r7, #20]
	I2C_Config.ACK_Control = I2C_ACK_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	613b      	str	r3, [r7, #16]
	I2C_Config.I2C_ClockSpeed = I2C_SCLK_SM_100KHz;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C_Config.I2C_Mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60bb      	str	r3, [r7, #8]
	I2C_Config.Ptr_Slave_EV_IRQ_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_Config.Stretch_Mode = I2C_Stretch_Mode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60fb      	str	r3, [r7, #12]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 8000192:	f000 fc1b 	bl	80009cc <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_Config);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 800019c:	f000 fb06 	bl	80007ac <MCAL_I2C_Init>




}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <HAL_EEPROM_Write_NBytes>:


uint8_t HAL_EEPROM_Write_NBytes (uint32_t Memory_Address , uint8_t* Bytes , uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0ca      	sub	sp, #296	; 0x128
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80001ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80001be:	6018      	str	r0, [r3, #0]
 80001c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80001c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80001c8:	6019      	str	r1, [r3, #0]
 80001ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80001ce:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80001d2:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t Buffer[265];
	Buffer[0]= (uint8_t)(Memory_Address>>8);	//Upper Bytes Memory Address
 80001d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80001d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	0a1b      	lsrs	r3, r3, #8
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80001e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001ea:	701a      	strb	r2, [r3, #0]
	Buffer[1]= (uint8_t)(Memory_Address);		//Lower Bytes Memory Address
 80001ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80001f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80001fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000200:	705a      	strb	r2, [r3, #1]

	for(i=2;i<(Data_Length+2);i++)
 8000202:	2302      	movs	r3, #2
 8000204:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8000208:	e015      	b.n	8000236 <HAL_EEPROM_Write_NBytes+0x86>
	{
		Buffer[i]= Bytes[i-2];
 800020a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800020e:	3b02      	subs	r3, #2
 8000210:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000214:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000218:	6812      	ldr	r2, [r2, #0]
 800021a:	441a      	add	r2, r3
 800021c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000220:	7811      	ldrb	r1, [r2, #0]
 8000222:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000226:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800022a:	54d1      	strb	r1, [r2, r3]
	for(i=2;i<(Data_Length+2);i++)
 800022c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000230:	3301      	adds	r3, #1
 8000232:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8000236:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800023a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	1c5a      	adds	r2, r3, #1
 8000242:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000246:	429a      	cmp	r2, r3
 8000248:	dadf      	bge.n	800020a <HAL_EEPROM_Write_NBytes+0x5a>
	}

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_SLAVE_ADDRESS, Buffer, (Data_Length+2), withSTOP, No_Repeated_Start);
 800024a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800024e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3302      	adds	r3, #2
 8000256:	4619      	mov	r1, r3
 8000258:	f107 0214 	add.w	r2, r7, #20
 800025c:	2301      	movs	r3, #1
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	2300      	movs	r3, #0
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	460b      	mov	r3, r1
 8000266:	212a      	movs	r1, #42	; 0x2a
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <HAL_EEPROM_Write_NBytes+0xcc>)
 800026a:	f000 fc07 	bl	8000a7c <MCAL_I2C_MASTER_TX>

	return 0;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40005400 	.word	0x40005400

08000280 <HAL_EEPROM_Read_NBytes>:
uint8_t HAL_EEPROM_Read_NBytes (uint32_t Memory_Address , uint8_t* Bytes , uint8_t Data_Length)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	4613      	mov	r3, r2
 800028c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0]= (uint8_t)(Memory_Address>>8);	//Upper Bytes Memory Address
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0a1b      	lsrs	r3, r3, #8
 8000292:	b2db      	uxtb	r3, r3
 8000294:	753b      	strb	r3, [r7, #20]
	Buffer[1]= (uint8_t)(Memory_Address);		//Lower Bytes Memory Address
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_SLAVE_ADDRESS, Buffer, 2, withoutSTOP, No_Repeated_Start); //Write Address
 800029c:	f107 0214 	add.w	r2, r7, #20
 80002a0:	2301      	movs	r3, #1
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2301      	movs	r3, #1
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2302      	movs	r3, #2
 80002aa:	212a      	movs	r1, #42	; 0x2a
 80002ac:	4808      	ldr	r0, [pc, #32]	; (80002d0 <HAL_EEPROM_Read_NBytes+0x50>)
 80002ae:	f000 fbe5 	bl	8000a7c <MCAL_I2C_MASTER_TX>

	MCAL_I2C_MASTER_RX(I2C1, EEPROM_SLAVE_ADDRESS, Bytes, Data_Length, withSTOP, Repeated_Start);	//Read Data
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2200      	movs	r2, #0
 80002b6:	9201      	str	r2, [sp, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	9200      	str	r2, [sp, #0]
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	212a      	movs	r1, #42	; 0x2a
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <HAL_EEPROM_Read_NBytes+0x50>)
 80002c2:	f000 fc2f 	bl	8000b24 <MCAL_I2C_MASTER_RX>

	return 0;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40005400 	.word	0x40005400

080002d4 <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	GP_FuncCallBack[0]();
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <EXTI0_IRQHandler+0x1c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4798      	blx	r3
	EXTI->PR |= (1 << 0);
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <EXTI0_IRQHandler+0x20>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <EXTI0_IRQHandler+0x20>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6153      	str	r3, [r2, #20]

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	40010400 	.word	0x40010400

080002f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	GP_FuncCallBack[1]();
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <EXTI1_IRQHandler+0x1c>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4798      	blx	r3
	EXTI->PR |= (1 << 1);
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <EXTI1_IRQHandler+0x20>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a04      	ldr	r2, [pc, #16]	; (8000318 <EXTI1_IRQHandler+0x20>)
 8000308:	f043 0302 	orr.w	r3, r3, #2
 800030c:	6153      	str	r3, [r2, #20]

}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000001c 	.word	0x2000001c
 8000318:	40010400 	.word	0x40010400

0800031c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	GP_FuncCallBack[2]();
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <EXTI2_IRQHandler+0x1c>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4798      	blx	r3
	EXTI->PR |= (1 << 2);
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <EXTI2_IRQHandler+0x20>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a04      	ldr	r2, [pc, #16]	; (800033c <EXTI2_IRQHandler+0x20>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6153      	str	r3, [r2, #20]


}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000001c 	.word	0x2000001c
 800033c:	40010400 	.word	0x40010400

08000340 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	GP_FuncCallBack[3]();
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI3_IRQHandler+0x1c>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4798      	blx	r3
	EXTI->PR |= (1 << 3);
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <EXTI3_IRQHandler+0x20>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a04      	ldr	r2, [pc, #16]	; (8000360 <EXTI3_IRQHandler+0x20>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	6153      	str	r3, [r2, #20]

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	2000001c 	.word	0x2000001c
 8000360:	40010400 	.word	0x40010400

08000364 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	GP_FuncCallBack[4]();
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI4_IRQHandler+0x1c>)
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	4798      	blx	r3
	EXTI->PR |= (1 << 4);
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <EXTI4_IRQHandler+0x20>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a04      	ldr	r2, [pc, #16]	; (8000384 <EXTI4_IRQHandler+0x20>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	6153      	str	r3, [r2, #20]

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	2000001c 	.word	0x2000001c
 8000384:	40010400 	.word	0x40010400

08000388 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { GP_FuncCallBack[5]();   EXTI->PR |= (1 << 5); }
 800038c:	4b26      	ldr	r3, [pc, #152]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <EXTI9_5_IRQHandler+0x22>
 8000398:	4b24      	ldr	r3, [pc, #144]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4798      	blx	r3
 800039e:	4b22      	ldr	r3, [pc, #136]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a21      	ldr	r2, [pc, #132]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003a4:	f043 0320 	orr.w	r3, r3, #32
 80003a8:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<6)) { GP_FuncCallBack[6]();   EXTI->PR |= (1 << 6); }
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d008      	beq.n	80003c8 <EXTI9_5_IRQHandler+0x40>
 80003b6:	4b1d      	ldr	r3, [pc, #116]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4798      	blx	r3
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a19      	ldr	r2, [pc, #100]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c6:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<7)) { GP_FuncCallBack[7]();   EXTI->PR |= (1 << 7); }
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d008      	beq.n	80003e6 <EXTI9_5_IRQHandler+0x5e>
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	4798      	blx	r3
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e4:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<8)) { GP_FuncCallBack[8]();   EXTI->PR |= (1 << 8); }
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d008      	beq.n	8000404 <EXTI9_5_IRQHandler+0x7c>
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003f4:	6a1b      	ldr	r3, [r3, #32]
 80003f6:	4798      	blx	r3
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000402:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<9)) { GP_FuncCallBack[9]();   EXTI->PR |= (1 << 9); }
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI9_5_IRQHandler+0x9a>
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4798      	blx	r3
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a03      	ldr	r2, [pc, #12]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800041c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000420:	6153      	str	r3, [r2, #20]
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010400 	.word	0x40010400
 800042c:	2000001c 	.word	0x2000001c

08000430 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { GP_FuncCallBack[10]();   EXTI->PR |= (1 << 10); }
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800043c:	2b00      	cmp	r3, #0
 800043e:	d008      	beq.n	8000452 <EXTI15_10_IRQHandler+0x22>
 8000440:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 8000442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000444:	4798      	blx	r3
 8000446:	4b29      	ldr	r3, [pc, #164]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a28      	ldr	r2, [pc, #160]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 800044c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000450:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<11)) { GP_FuncCallBack[11]();   EXTI->PR |= (1 << 11); }
 8000452:	4b26      	ldr	r3, [pc, #152]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800045a:	2b00      	cmp	r3, #0
 800045c:	d008      	beq.n	8000470 <EXTI15_10_IRQHandler+0x40>
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 8000460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000462:	4798      	blx	r3
 8000464:	4b21      	ldr	r3, [pc, #132]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	4a20      	ldr	r2, [pc, #128]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 800046a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800046e:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<12)) { GP_FuncCallBack[12]();   EXTI->PR |= (1 << 12); }
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000478:	2b00      	cmp	r3, #0
 800047a:	d008      	beq.n	800048e <EXTI15_10_IRQHandler+0x5e>
 800047c:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4798      	blx	r3
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a19      	ldr	r2, [pc, #100]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048c:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<13)) { GP_FuncCallBack[13]();   EXTI->PR |= (1 << 13); }
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000496:	2b00      	cmp	r3, #0
 8000498:	d008      	beq.n	80004ac <EXTI15_10_IRQHandler+0x7c>
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 800049c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049e:	4798      	blx	r3
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004aa:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<14)) { GP_FuncCallBack[14]();   EXTI->PR |= (1 << 14); }
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d008      	beq.n	80004ca <EXTI15_10_IRQHandler+0x9a>
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 80004ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004bc:	4798      	blx	r3
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c8:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<15)) { GP_FuncCallBack[15]();   EXTI->PR |= (1 << 15); }
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <EXTI15_10_IRQHandler+0xb8>
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	4798      	blx	r3
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a02      	ldr	r2, [pc, #8]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e6:	6153      	str	r3, [r2, #20]

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010400 	.word	0x40010400
 80004f0:	2000001c 	.word	0x2000001c

080004f4 <Get_Pos_CRLH>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio
 * @retval -Suitable Pos for Config_Register [uint8_t]
 * */

uint8_t Get_Pos_CRLH(uint16_t PinNumber)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000504:	f000 80a5 	beq.w	8000652 <Get_Pos_CRLH+0x15e>
 8000508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800050c:	f300 80a3 	bgt.w	8000656 <Get_Pos_CRLH+0x162>
 8000510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000514:	f000 809b 	beq.w	800064e <Get_Pos_CRLH+0x15a>
 8000518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800051c:	f300 809b 	bgt.w	8000656 <Get_Pos_CRLH+0x162>
 8000520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000524:	f000 8091 	beq.w	800064a <Get_Pos_CRLH+0x156>
 8000528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052c:	f300 8093 	bgt.w	8000656 <Get_Pos_CRLH+0x162>
 8000530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000534:	f000 8087 	beq.w	8000646 <Get_Pos_CRLH+0x152>
 8000538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800053c:	f300 808b 	bgt.w	8000656 <Get_Pos_CRLH+0x162>
 8000540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000544:	d07d      	beq.n	8000642 <Get_Pos_CRLH+0x14e>
 8000546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800054a:	f300 8084 	bgt.w	8000656 <Get_Pos_CRLH+0x162>
 800054e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000552:	d074      	beq.n	800063e <Get_Pos_CRLH+0x14a>
 8000554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000558:	dc7d      	bgt.n	8000656 <Get_Pos_CRLH+0x162>
 800055a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800055e:	d06c      	beq.n	800063a <Get_Pos_CRLH+0x146>
 8000560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000564:	dc77      	bgt.n	8000656 <Get_Pos_CRLH+0x162>
 8000566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800056a:	d064      	beq.n	8000636 <Get_Pos_CRLH+0x142>
 800056c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000570:	dc71      	bgt.n	8000656 <Get_Pos_CRLH+0x162>
 8000572:	2b80      	cmp	r3, #128	; 0x80
 8000574:	d05d      	beq.n	8000632 <Get_Pos_CRLH+0x13e>
 8000576:	2b80      	cmp	r3, #128	; 0x80
 8000578:	dc6d      	bgt.n	8000656 <Get_Pos_CRLH+0x162>
 800057a:	2b20      	cmp	r3, #32
 800057c:	dc48      	bgt.n	8000610 <Get_Pos_CRLH+0x11c>
 800057e:	2b00      	cmp	r3, #0
 8000580:	dd69      	ble.n	8000656 <Get_Pos_CRLH+0x162>
 8000582:	3b01      	subs	r3, #1
 8000584:	2b1f      	cmp	r3, #31
 8000586:	d866      	bhi.n	8000656 <Get_Pos_CRLH+0x162>
 8000588:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <Get_Pos_CRLH+0x9c>)
 800058a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058e:	bf00      	nop
 8000590:	08000617 	.word	0x08000617
 8000594:	0800061b 	.word	0x0800061b
 8000598:	08000657 	.word	0x08000657
 800059c:	0800061f 	.word	0x0800061f
 80005a0:	08000657 	.word	0x08000657
 80005a4:	08000657 	.word	0x08000657
 80005a8:	08000657 	.word	0x08000657
 80005ac:	08000623 	.word	0x08000623
 80005b0:	08000657 	.word	0x08000657
 80005b4:	08000657 	.word	0x08000657
 80005b8:	08000657 	.word	0x08000657
 80005bc:	08000657 	.word	0x08000657
 80005c0:	08000657 	.word	0x08000657
 80005c4:	08000657 	.word	0x08000657
 80005c8:	08000657 	.word	0x08000657
 80005cc:	08000627 	.word	0x08000627
 80005d0:	08000657 	.word	0x08000657
 80005d4:	08000657 	.word	0x08000657
 80005d8:	08000657 	.word	0x08000657
 80005dc:	08000657 	.word	0x08000657
 80005e0:	08000657 	.word	0x08000657
 80005e4:	08000657 	.word	0x08000657
 80005e8:	08000657 	.word	0x08000657
 80005ec:	08000657 	.word	0x08000657
 80005f0:	08000657 	.word	0x08000657
 80005f4:	08000657 	.word	0x08000657
 80005f8:	08000657 	.word	0x08000657
 80005fc:	08000657 	.word	0x08000657
 8000600:	08000657 	.word	0x08000657
 8000604:	08000657 	.word	0x08000657
 8000608:	08000657 	.word	0x08000657
 800060c:	0800062b 	.word	0x0800062b
 8000610:	2b40      	cmp	r3, #64	; 0x40
 8000612:	d00c      	beq.n	800062e <Get_Pos_CRLH+0x13a>
 8000614:	e01f      	b.n	8000656 <Get_Pos_CRLH+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000616:	2300      	movs	r3, #0
 8000618:	e01e      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 800061a:	2304      	movs	r3, #4
 800061c:	e01c      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 800061e:	2308      	movs	r3, #8
 8000620:	e01a      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000622:	230c      	movs	r3, #12
 8000624:	e018      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000626:	2310      	movs	r3, #16
 8000628:	e016      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 800062a:	2314      	movs	r3, #20
 800062c:	e014      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 800062e:	2318      	movs	r3, #24
 8000630:	e012      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000632:	231c      	movs	r3, #28
 8000634:	e010      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000636:	2300      	movs	r3, #0
 8000638:	e00e      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 800063a:	2304      	movs	r3, #4
 800063c:	e00c      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 800063e:	2308      	movs	r3, #8
 8000640:	e00a      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000642:	230c      	movs	r3, #12
 8000644:	e008      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000646:	2310      	movs	r3, #16
 8000648:	e006      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 800064a:	2314      	movs	r3, #20
 800064c:	e004      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 800064e:	2318      	movs	r3, #24
 8000650:	e002      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000652:	231c      	movs	r3, #28
 8000654:	e000      	b.n	8000658 <Get_Pos_CRLH+0x164>
		break;

	default:
		return 0;
 8000656:	2300      	movs	r3, #0


	}

}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <MCAL_GPIO_Init>:
 * Note-You must Create Instant from "GPIO_PinConfig_t" Structure,
 * Before using This func "MCAL_GPIO_Init" and pass it to @param [in] -Address of the PinConfig
 */

void MCAL_GPIO_Init(GPIO_TypedDef* GPIOx, GPIO_PinConfig_t* PinConfig )
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]

	volatile uint32_t* Reg_Config= NULL;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]

	Reg_Config = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &(GPIOx->CRL):  &(GPIOx->CRH) ;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	2bff      	cmp	r3, #255	; 0xff
 8000678:	d801      	bhi.n	800067e <MCAL_GPIO_Init+0x1a>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	e001      	b.n	8000682 <MCAL_GPIO_Init+0x1e>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3304      	adds	r3, #4
 8000682:	60fb      	str	r3, [r7, #12]
	*Reg_Config &= ~(0xF << Get_Pos_CRLH(PinConfig->GPIO_PinNumber) );
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff33 	bl	80004f4 <Get_Pos_CRLH>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	230f      	movs	r3, #15
 8000694:	4093      	lsls	r3, r2
 8000696:	43da      	mvns	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	401a      	ands	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	601a      	str	r2, [r3, #0]


	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d00b      	beq.n	80006c2 <MCAL_GPIO_Init+0x5e>
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d007      	beq.n	80006c2 <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	685b      	ldr	r3, [r3, #4]
	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d003      	beq.n	80006c2 <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	2b07      	cmp	r3, #7
 80006c0:	d117      	bne.n	80006f2 <MCAL_GPIO_Init+0x8e>
	{
		*Reg_Config |= (((((PinConfig->GPIO_Mode - 4) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	009a      	lsls	r2, r3, #2
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	f003 040f 	and.w	r4, r3, #15
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff0b 	bl	80004f4 <Get_Pos_CRLH>
 80006de:	4603      	mov	r3, r0
 80006e0:	fa04 f203 	lsl.w	r2, r4, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	431a      	orrs	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	bf00      	nop

		}

	}

}
 80006f0:	e058      	b.n	80007a4 <MCAL_GPIO_Init+0x140>
		if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_up )
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d11c      	bne.n	8000734 <MCAL_GPIO_Init+0xd0>
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	8812      	ldrh	r2, [r2, #0]
 8000702:	431a      	orrs	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	009a      	lsls	r2, r3, #2
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	4313      	orrs	r3, r2
 8000714:	f003 040f 	and.w	r4, r3, #15
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fee9 	bl	80004f4 <Get_Pos_CRLH>
 8000722:	4603      	mov	r3, r0
 8000724:	fa04 f203 	lsl.w	r2, r4, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	431a      	orrs	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	e037      	b.n	80007a4 <MCAL_GPIO_Init+0x140>
		else if (PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_down)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2b03      	cmp	r3, #3
 800073a:	d11e      	bne.n	800077a <MCAL_GPIO_Init+0x116>
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	43d2      	mvns	r2, r2
 8000746:	401a      	ands	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode - 1) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	3b01      	subs	r3, #1
 8000752:	009a      	lsls	r2, r3, #2
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	4313      	orrs	r3, r2
 800075a:	f003 040f 	and.w	r4, r3, #15
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fec6 	bl	80004f4 <Get_Pos_CRLH>
 8000768:	4603      	mov	r3, r0
 800076a:	fa04 f203 	lsl.w	r2, r4, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	431a      	orrs	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	e014      	b.n	80007a4 <MCAL_GPIO_Init+0x140>
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	009a      	lsls	r2, r3, #2
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	4313      	orrs	r3, r2
 8000786:	f003 040f 	and.w	r4, r3, #15
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff feb0 	bl	80004f4 <Get_Pos_CRLH>
 8000794:	4603      	mov	r3, r0
 8000796:	fa04 f203 	lsl.w	r2, r4, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	431a      	orrs	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd90      	pop	{r4, r7, pc}

080007ac <MCAL_I2C_Init>:
 * @param [in]	-I2C_Config : Pointer to SPI_Config_t which contains the configuration info for specified I2C
 * @retval 		-None
 * Note 		-None
 */
void MCAL_I2C_Init(I2C_TypeDef* I2Cx , I2C_Config_t* I2C_Config)
{
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	uint16_t temp_REG = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	82fb      	strh	r3, [r7, #22]
	uint32_t temp_Freq;
	uint32_t Result = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
	uint32_t Pclk1 = 8000000;
 80007be:	4b7a      	ldr	r3, [pc, #488]	; (80009a8 <MCAL_I2C_Init+0x1fc>)
 80007c0:	60fb      	str	r3, [r7, #12]
	//Enable RCC Clock
	if(I2Cx == I2C1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a79      	ldr	r2, [pc, #484]	; (80009ac <MCAL_I2C_Init+0x200>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d110      	bne.n	80007ec <MCAL_I2C_Init+0x40>
	{
		GL_I2C_Config[0] = *I2C_Config;
 80007ca:	4a79      	ldr	r2, [pc, #484]	; (80009b0 <MCAL_I2C_Init+0x204>)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	4614      	mov	r4, r2
 80007d0:	461d      	mov	r5, r3
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007da:	682b      	ldr	r3, [r5, #0]
 80007dc:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80007de:	4b75      	ldr	r3, [pc, #468]	; (80009b4 <MCAL_I2C_Init+0x208>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a74      	ldr	r2, [pc, #464]	; (80009b4 <MCAL_I2C_Init+0x208>)
 80007e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	e014      	b.n	8000816 <MCAL_I2C_Init+0x6a>
	}
	else if (I2Cx == I2C2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a72      	ldr	r2, [pc, #456]	; (80009b8 <MCAL_I2C_Init+0x20c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d110      	bne.n	8000816 <MCAL_I2C_Init+0x6a>
	{
		GL_I2C_Config[1] = *I2C_Config;
 80007f4:	4b6e      	ldr	r3, [pc, #440]	; (80009b0 <MCAL_I2C_Init+0x204>)
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80007fc:	4615      	mov	r5, r2
 80007fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000806:	682b      	ldr	r3, [r5, #0]
 8000808:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <MCAL_I2C_Init+0x208>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a69      	ldr	r2, [pc, #420]	; (80009b4 <MCAL_I2C_Init+0x208>)
 8000810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000814:	61d3      	str	r3, [r2, #28]
	}

	if(I2C_Config->I2C_Mode == I2C_Mode_I2C)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d17d      	bne.n	800091a <MCAL_I2C_Init+0x16e>
	{
		//Init Timing
		//Get CR2 Vales in temp reg;
		temp_REG = I2Cx->CR2;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	82fb      	strh	r3, [r7, #22]
		//Clear Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		temp_REG &= ~(I2C_CR2_FREQ);
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800082a:	82fb      	strh	r3, [r7, #22]
		//Get Pclk1 Frequency
		Pclk1 = MCAL_RCC_GetPCLK1Freq();
 800082c:	f000 fb4a 	bl	8000ec4 <MCAL_RCC_GetPCLK1Freq>
 8000830:	60f8      	str	r0, [r7, #12]

		temp_Freq = (uint16_t) (Pclk1 / 1000000) ;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4a61      	ldr	r2, [pc, #388]	; (80009bc <MCAL_I2C_Init+0x210>)
 8000836:	fba2 2303 	umull	r2, r3, r2, r3
 800083a:	0c9b      	lsrs	r3, r3, #18
 800083c:	b29b      	uxth	r3, r3
 800083e:	60bb      	str	r3, [r7, #8]
		temp_REG |= temp_Freq;
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	b29a      	uxth	r2, r3
 8000844:	8afb      	ldrh	r3, [r7, #22]
 8000846:	4313      	orrs	r3, r2
 8000848:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR2 = temp_REG;
 800084a:	8afa      	ldrh	r2, [r7, #22]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	605a      	str	r2, [r3, #4]
		temp_REG = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f023 0201 	bic.w	r2, r3, #1
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]

		if(I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_50KHz || I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_100KHz)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000868:	4293      	cmp	r3, r2
 800086a:	d004      	beq.n	8000876 <MCAL_I2C_Init+0xca>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a53      	ldr	r2, [pc, #332]	; (80009c0 <MCAL_I2C_Init+0x214>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d113      	bne.n	800089e <MCAL_I2C_Init+0xf2>
		{
			Result = (uint16_t)(Pclk1 / ( I2C_Config->I2C_ClockSpeed>>1 )); //I2C_ClockSpeed * 2
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	085b      	lsrs	r3, r3, #1
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	b29b      	uxth	r3, r3
 8000884:	613b      	str	r3, [r7, #16]
			temp_REG |= Result;
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	b29a      	uxth	r2, r3
 800088a:	8afb      	ldrh	r3, [r7, #22]
 800088c:	4313      	orrs	r3, r2
 800088e:	82fb      	strh	r3, [r7, #22]
			I2Cx->CCR = temp_REG;
 8000890:	8afa      	ldrh	r2, [r7, #22]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	61da      	str	r2, [r3, #28]

			I2Cx->TRISE = temp_Freq +1;
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	621a      	str	r2, [r3, #32]
		{
			//Fast Mode to be done
		}

		//I2C CR1 Config
		temp_REG = I2Cx->CR1 ;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	82fb      	strh	r3, [r7, #22]

		temp_REG |= (I2C_Config->ACK_Control | I2C_Config->General_Call | I2C_Config->I2C_Mode | I2C_Config->Stretch_Mode );
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b29a      	uxth	r2, r3
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	8afb      	ldrh	r3, [r7, #22]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 = temp_REG;
 80008ce:	8afa      	ldrh	r2, [r7, #22]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
		temp_REG = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	82fb      	strh	r3, [r7, #22]

		//I2C OAR1 & OAR2 Config
		if(I2C_Config ->I2C_Slave_Address_Mode.Enable_DUAL_Address == 1)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	8a9b      	ldrh	r3, [r3, #20]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d108      	bne.n	80008f2 <MCAL_I2C_Init+0x146>
		{
			temp_REG = I2C_OAR2_ENDUAL;
 80008e0:	2301      	movs	r3, #1
 80008e2:	82fb      	strh	r3, [r7, #22]

			//			Bits 7:1 ADD2[7:1]: Interface address
			//			bits 7:1 of address in dual addressing mode
			temp_REG = I2C_Config->I2C_Slave_Address_Mode.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos ;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	8b1b      	ldrh	r3, [r3, #24]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = temp_REG;
 80008ec:	8afa      	ldrh	r2, [r7, #22]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60da      	str	r2, [r3, #12]
		}
		temp_REG = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	82fb      	strh	r3, [r7, #22]

		//		Bits 7:1 ADD[7:1]: Interface address
		//		bits 7:1 of address
		temp_REG |= I2C_Config->I2C_Slave_Address_Mode.Primary_Slave_Address<<1;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	8adb      	ldrh	r3, [r3, #22]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	b21a      	sxth	r2, r3
 80008fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000902:	4313      	orrs	r3, r2
 8000904:	b21b      	sxth	r3, r3
 8000906:	82fb      	strh	r3, [r7, #22]
		temp_REG |= I2C_Config->I2C_Slave_Address_Mode.I2C_Addressing_Slave_Mode;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	b29a      	uxth	r2, r3
 800090e:	8afb      	ldrh	r3, [r7, #22]
 8000910:	4313      	orrs	r3, r2
 8000912:	82fb      	strh	r3, [r7, #22]

		I2Cx->OAR1 = temp_REG;
 8000914:	8afa      	ldrh	r2, [r7, #22]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	609a      	str	r2, [r3, #8]
		//SMBUS To be Supported later
	}

	//If slave mode it must work in interrupt not polling
	//Check if Callback pointer != NULL
	if (I2C_Config->Ptr_Slave_EV_IRQ_CallBack != NULL)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	6a1b      	ldr	r3, [r3, #32]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d038      	beq.n	8000994 <MCAL_I2C_Init+0x1e8>
	{
		//Enable IRQ
		I2Cx->CR2 |= I2C_CR2_ITERREN;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITEVTEN;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITBUFEN;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	605a      	str	r2, [r3, #4]
		if (I2Cx == I2C1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MCAL_I2C_Init+0x200>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d10c      	bne.n	8000968 <MCAL_I2C_Init+0x1bc>
		{
			NVIC_IRQ31_I2C1_EV_Enable();
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MCAL_I2C_Init+0x218>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MCAL_I2C_Init+0x218>)
 8000954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000958:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable();
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MCAL_I2C_Init+0x21c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <MCAL_I2C_Init+0x21c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	e00f      	b.n	8000988 <MCAL_I2C_Init+0x1dc>
		}
		else if (I2Cx == I2C2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <MCAL_I2C_Init+0x20c>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d10b      	bne.n	8000988 <MCAL_I2C_Init+0x1dc>
		{
			NVIC_IRQ33_I2C2_EV_Enable();
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MCAL_I2C_Init+0x21c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <MCAL_I2C_Init+0x21c>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable();
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MCAL_I2C_Init+0x21c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <MCAL_I2C_Init+0x21c>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6013      	str	r3, [r2, #0]
		}
		I2Cx->SR1 = 0;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
	}

	//Enable I2C Peripheral
	I2Cx->CR1 |= I2C_CR1_PE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f043 0201 	orr.w	r2, r3, #1
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	601a      	str	r2, [r3, #0]

}
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bdb0      	pop	{r4, r5, r7, pc}
 80009a8:	007a1200 	.word	0x007a1200
 80009ac:	40005400 	.word	0x40005400
 80009b0:	2000005c 	.word	0x2000005c
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40005800 	.word	0x40005800
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	000186a0 	.word	0x000186a0
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000e104 	.word	0xe000e104

080009cc <MCAL_I2C_GPIO_Set_Pins>:
 * @param [in] 	-I2Cx : where x can be (1,2 depending on device used) to select which I2C Instant
 * @retval 		-None
 * Note 		-None
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	GPIOB_CLOCK_ENABLE;
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MCAL_I2C_GPIO_Set_Pins+0xa0>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <MCAL_I2C_GPIO_Set_Pins+0xa0>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
	AFIO_CLOCK_ENABLE;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MCAL_I2C_GPIO_Set_Pins+0xa0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <MCAL_I2C_GPIO_Set_Pins+0xa0>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6193      	str	r3, [r2, #24]
	GPIO_PinConfig_t I2C_PinConfig;

	if(I2Cx == I2C1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <MCAL_I2C_GPIO_Set_Pins+0xa4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d118      	bne.n	8000a26 <MCAL_I2C_GPIO_Set_Pins+0x5a>
	{
		//I2C1
		//PB6 SCL
		//PB7 SDA
		I2C_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80009f4:	2340      	movs	r3, #64	; 0x40
 80009f6:	81bb      	strh	r3, [r7, #12]
		I2C_PinConfig.GPIO_Mode = GPIO_Mode_Out_AF_Open_drain;
 80009f8:	2307      	movs	r3, #7
 80009fa:	613b      	str	r3, [r7, #16]
		I2C_PinConfig.GPIO_Speed = GPIO_Speed_10MHz;
 80009fc:	2301      	movs	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <MCAL_I2C_GPIO_Set_Pins+0xa8>)
 8000a08:	f7ff fe2c 	bl	8000664 <MCAL_GPIO_Init>

		I2C_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	81bb      	strh	r3, [r7, #12]
		I2C_PinConfig.GPIO_Mode = GPIO_Mode_Out_AF_Open_drain;
 8000a10:	2307      	movs	r3, #7
 8000a12:	613b      	str	r3, [r7, #16]
		I2C_PinConfig.GPIO_Speed = GPIO_Speed_10MHz;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4815      	ldr	r0, [pc, #84]	; (8000a74 <MCAL_I2C_GPIO_Set_Pins+0xa8>)
 8000a20:	f7ff fe20 	bl	8000664 <MCAL_GPIO_Init>
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);

	}


}
 8000a24:	e01d      	b.n	8000a62 <MCAL_I2C_GPIO_Set_Pins+0x96>
	else if (I2Cx == I2C2)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <MCAL_I2C_GPIO_Set_Pins+0xac>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d119      	bne.n	8000a62 <MCAL_I2C_GPIO_Set_Pins+0x96>
		I2C_PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	81bb      	strh	r3, [r7, #12]
		I2C_PinConfig.GPIO_Mode = GPIO_Mode_Out_AF_Open_drain;
 8000a34:	2307      	movs	r3, #7
 8000a36:	613b      	str	r3, [r7, #16]
		I2C_PinConfig.GPIO_Speed = GPIO_Speed_10MHz;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MCAL_I2C_GPIO_Set_Pins+0xa8>)
 8000a44:	f7ff fe0e 	bl	8000664 <MCAL_GPIO_Init>
		I2C_PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a4c:	81bb      	strh	r3, [r7, #12]
		I2C_PinConfig.GPIO_Mode = GPIO_Mode_Out_AF_Open_drain;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	613b      	str	r3, [r7, #16]
		I2C_PinConfig.GPIO_Speed = GPIO_Speed_10MHz;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &I2C_PinConfig);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MCAL_I2C_GPIO_Set_Pins+0xa8>)
 8000a5e:	f7ff fe01 	bl	8000664 <MCAL_GPIO_Init>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	40005800 	.word	0x40005800

08000a7c <MCAL_I2C_MASTER_TX>:
				 Timer_Interrupt(){flag=1}
				 while condition (Flag && Time);
 */

void MCAL_I2C_MASTER_TX (I2C_TypeDef* I2Cx ,uint16_t device_Address,uint8_t* Data ,  uint32_t Data_Length , E_STOP_CONDITION Stop ,E_Repeated_Start Start )
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	817b      	strh	r3, [r7, #10]
	volatile uint32_t i;
	//Transit Sequence :
	//1-Send Start Bit:
	I2C_GenerateSTART(I2Cx, i2c_enable, Start);
 8000a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a90:	461a      	mov	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f000 f8d3 	bl	8000c40 <I2C_GenerateSTART>

	//2-Check EV5
	//EV5: SB=1, cleared by reading SR1 register
	while(!I2C_Get_Status(I2Cx, EV5));
 8000a9a:	bf00      	nop
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f000 f910 	bl	8000cc4 <I2C_Get_Status>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0f8      	beq.n	8000a9c <MCAL_I2C_MASTER_TX+0x20>

	//3-Writing DR register with Address
	I2C_SendAddress(I2Cx, device_Address, Transmitter);
 8000aaa:	897b      	ldrh	r3, [r7, #10]
 8000aac:	2200      	movs	r2, #0
 8000aae:	4619      	mov	r1, r3
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f000 f999 	bl	8000de8 <I2C_SendAddress>

	//4-Check EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_Get_Status(I2Cx, EV6));
 8000ab6:	bf00      	nop
 8000ab8:	2102      	movs	r1, #2
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 f902 	bl	8000cc4 <I2C_Get_Status>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f8      	beq.n	8000ab8 <MCAL_I2C_MASTER_TX+0x3c>

	//5- Check TRA , BUSY, MSL , TXE Flags
	while(!I2C_Get_Status(I2Cx, MASTER_BYTE_TRANSMITTER));
 8000ac6:	bf00      	nop
 8000ac8:	4915      	ldr	r1, [pc, #84]	; (8000b20 <MCAL_I2C_MASTER_TX+0xa4>)
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 f8fa 	bl	8000cc4 <I2C_Get_Status>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f8      	beq.n	8000ac8 <MCAL_I2C_MASTER_TX+0x4c>

	//6-Write Data
	for (i= 0;i<Data_Length;i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	e011      	b.n	8000b00 <MCAL_I2C_MASTER_TX+0x84>
	{
		I2Cx->DR = Data[i];
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
		//7-Wait EV8
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!I2C_Get_Status(I2Cx, EV8));
 8000aea:	bf00      	nop
 8000aec:	2103      	movs	r1, #3
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f000 f8e8 	bl	8000cc4 <I2C_Get_Status>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f8      	beq.n	8000aec <MCAL_I2C_MASTER_TX+0x70>
	for (i= 0;i<Data_Length;i++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8e9      	bhi.n	8000adc <MCAL_I2C_MASTER_TX+0x60>

	}

	//8-Send Stop Condition
	if(Stop == withSTOP)
 8000b08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d103      	bne.n	8000b18 <MCAL_I2C_MASTER_TX+0x9c>
	{
		I2C_GenerateSTOP(I2Cx,i2c_enable);
 8000b10:	2100      	movs	r1, #0
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f000 f8bb 	bl	8000c8e <I2C_GenerateSTOP>
	}



}
 8000b18:	bf00      	nop
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	00070080 	.word	0x00070080

08000b24 <MCAL_I2C_MASTER_RX>:
 * @retval 		-None
 * Note 		-None
 */

void MCAL_I2C_MASTER_RX (I2C_TypeDef* I2Cx ,uint16_t device_Address,uint8_t* Data ,  uint32_t Data_Length , E_STOP_CONDITION Stop ,E_Repeated_Start Start )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	460b      	mov	r3, r1
 8000b32:	817b      	strh	r3, [r7, #10]
	volatile uint32_t i;
	//Receive Sequence :
	//1-Send Start Bit:
	I2C_GenerateSTART(I2Cx, i2c_enable, Start);
 8000b34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b38:	461a      	mov	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f000 f87f 	bl	8000c40 <I2C_GenerateSTART>

	//2-Check EV5
	//EV5: SB=1, cleared by reading SR1 register
	while(!I2C_Get_Status(I2Cx, EV5));
 8000b42:	bf00      	nop
 8000b44:	2101      	movs	r1, #1
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f000 f8bc 	bl	8000cc4 <I2C_Get_Status>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f8      	beq.n	8000b44 <MCAL_I2C_MASTER_RX+0x20>

	//3-Writing DR register with Address
	I2C_SendAddress(I2Cx, device_Address, Reciever);
 8000b52:	897b      	ldrh	r3, [r7, #10]
 8000b54:	2201      	movs	r2, #1
 8000b56:	4619      	mov	r1, r3
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f000 f945 	bl	8000de8 <I2C_SendAddress>

	//4-Check EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_Get_Status(I2Cx, EV6));
 8000b5e:	bf00      	nop
 8000b60:	2102      	movs	r1, #2
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f000 f8ae 	bl	8000cc4 <I2C_Get_Status>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f8      	beq.n	8000b60 <MCAL_I2C_MASTER_RX+0x3c>

	I2C_AckConfig(I2Cx,i2c_enable);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f000 f958 	bl	8000e26 <I2C_AckConfig>

	if(Data_Length)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d01c      	beq.n	8000bb6 <MCAL_I2C_MASTER_RX+0x92>
	{
		//Read data until data length Becomes zero
		for (i= Data_Length; i>1 ;i--)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e012      	b.n	8000ba8 <MCAL_I2C_MASTER_RX+0x84>
		{
			//5-Wait EV7
			//EV7: RxNE=1 Cleared by Reading DR Register
			while(!I2C_Get_Status(I2Cx, EV7));
 8000b82:	bf00      	nop
 8000b84:	2105      	movs	r1, #5
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f000 f89c 	bl	8000cc4 <I2C_Get_Status>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0f8      	beq.n	8000b84 <MCAL_I2C_MASTER_RX+0x60>
			//Read data
			*Data = I2Cx->DR;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	701a      	strb	r2, [r3, #0]
			Data++;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
		for (i= Data_Length; i>1 ;i--)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d8e9      	bhi.n	8000b82 <MCAL_I2C_MASTER_RX+0x5e>
		}
		I2C_AckConfig(I2Cx,i2c_disable);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f938 	bl	8000e26 <I2C_AckConfig>

	}

	//6-Send Stop Condition
	if(Stop == withSTOP)
 8000bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <MCAL_I2C_MASTER_RX+0xa2>
	{
		I2C_GenerateSTOP(I2Cx,i2c_enable);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f000 f864 	bl	8000c8e <I2C_GenerateSTOP>
	}

	//Re-enable Ack
	if(I2Cx==I2C1)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <MCAL_I2C_MASTER_RX+0xe0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d109      	bne.n	8000be2 <MCAL_I2C_MASTER_RX+0xbe>
	{
		if(GL_I2C_Config[0].ACK_Control== I2C_ACK_Enable)
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MCAL_I2C_MASTER_RX+0xe4>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd6:	d111      	bne.n	8000bfc <MCAL_I2C_MASTER_RX+0xd8>
		{
			I2C_AckConfig(I2Cx,i2c_enable);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 f923 	bl	8000e26 <I2C_AckConfig>
			I2C_AckConfig(I2Cx,i2c_enable);
		}
	}


}
 8000be0:	e00c      	b.n	8000bfc <MCAL_I2C_MASTER_RX+0xd8>
	else if (I2Cx==I2C2)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <MCAL_I2C_MASTER_RX+0xe8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d108      	bne.n	8000bfc <MCAL_I2C_MASTER_RX+0xd8>
		if(GL_I2C_Config[1].ACK_Control== I2C_ACK_Enable)
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MCAL_I2C_MASTER_RX+0xe4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf2:	d103      	bne.n	8000bfc <MCAL_I2C_MASTER_RX+0xd8>
			I2C_AckConfig(I2Cx,i2c_enable);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f000 f915 	bl	8000e26 <I2C_AckConfig>
}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40005400 	.word	0x40005400
 8000c08:	2000005c 	.word	0x2000005c
 8000c0c:	40005800 	.word	0x40005800

08000c10 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <I2C2_EV_IRQHandler>:



void I2C2_EV_IRQHandler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <I2C_GenerateSTART>:




void I2C_GenerateSTART(I2C_TypeDef* I2Cx,E_Functional_State State ,E_Repeated_Start Start )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	70bb      	strb	r3, [r7, #2]
	//Check Repeated or regular start
	if (Start == No_Repeated_Start)
 8000c50:	78bb      	ldrb	r3, [r7, #2]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d107      	bne.n	8000c66 <I2C_GenerateSTART+0x26>
	{
		//Check if Bus is idle i.e. check if it's taken by any other master
		while(I2C_Get_Status(I2Cx, I2C_FLAG_BUSY));
 8000c56:	bf00      	nop
 8000c58:	2100      	movs	r1, #0
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f832 	bl	8000cc4 <I2C_Get_Status>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f8      	bne.n	8000c58 <I2C_GenerateSTART+0x18>

	}
	//If its a repeated start , bus already taken by this master
	if(State != i2c_disable)
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d006      	beq.n	8000c7a <I2C_GenerateSTART+0x3a>
		//		0: No Start generation
		//		1: Repeated start generation
		//		In Slave mode:
		//		0: No Start generation
		//		1: Start generation when the bus is free
		I2Cx->CR1 |= I2C_CR1_START;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}



}
 8000c78:	e005      	b.n	8000c86 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <I2C_GenerateSTOP>:
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx,E_Functional_State State)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
	//	0: No Stop generation.
	//	1: Stop generation after the current byte transfer or after the current Start condition is sent.
	//	In Slave mode:
	//	0: No Stop generation.
	//	1: Release the SCL and SDA lines after the current byte transfer.
	if(State != i2c_disable)
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d006      	beq.n	8000cae <I2C_GenerateSTOP+0x20>
	{
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]
	{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);

	}

}
 8000cac:	e005      	b.n	8000cba <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <I2C_Get_Status>:

E_I2C_Flag_Status I2C_Get_Status ( I2C_TypeDef* I2Cx , E_Status flag)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	uint32_t flag1 = 0 ,flag2=0,lastevent = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
	E_I2C_Flag_Status Value = RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75fb      	strb	r3, [r7, #23]
	switch(flag)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	d811      	bhi.n	8000d08 <I2C_Get_Status+0x44>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d876      	bhi.n	8000dd8 <I2C_Get_Status+0x114>
 8000cea:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <I2C_Get_Status+0x2c>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000d13 	.word	0x08000d13
 8000cf4:	08000d2b 	.word	0x08000d2b
 8000cf8:	08000d43 	.word	0x08000d43
 8000cfc:	08000d91 	.word	0x08000d91
 8000d00:	08000da9 	.word	0x08000da9
 8000d04:	08000dc1 	.word	0x08000dc1
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	4a36      	ldr	r2, [pc, #216]	; (8000de4 <I2C_Get_Status+0x120>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d024      	beq.n	8000d5a <I2C_Get_Status+0x96>
 8000d10:	e062      	b.n	8000dd8 <I2C_Get_Status+0x114>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <I2C_Get_Status+0x60>
		{
			Value = SET;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000d22:	e059      	b.n	8000dd8 <I2C_Get_Status+0x114>
			Value = RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	75fb      	strb	r3, [r7, #23]
		break;
 8000d28:	e056      	b.n	8000dd8 <I2C_Get_Status+0x114>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if((I2Cx->SR1) & (I2C_SR1_SB))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <I2C_Get_Status+0x78>
		{
			Value = SET;
 8000d36:	2301      	movs	r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000d3a:	e04d      	b.n	8000dd8 <I2C_Get_Status+0x114>
			Value = RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	75fb      	strb	r3, [r7, #23]
		break;
 8000d40:	e04a      	b.n	8000dd8 <I2C_Get_Status+0x114>
	}
	case EV6 :
	{
		//		Bit 1 ADDR: Address sent (master mode)/matched (slave mode)
		if((I2Cx->SR1) & (I2C_SR1_ADDR))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <I2C_Get_Status+0x90>
		{
			Value = SET;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	75fb      	strb	r3, [r7, #23]
		else
		{
			Value = RESET;
		}
		//Temp = I2Cx->SR2;
		break;
 8000d52:	e041      	b.n	8000dd8 <I2C_Get_Status+0x114>
			Value = RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	75fb      	strb	r3, [r7, #23]
		break;
 8000d58:	e03e      	b.n	8000dd8 <I2C_Get_Status+0x114>
	}

	case MASTER_BYTE_TRANSMITTER :
	{
		flag1 = I2Cx->SR1;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	60fb      	str	r3, [r7, #12]
		flag2 = flag2<<16;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	041b      	lsls	r3, r3, #16
 8000d6a:	60fb      	str	r3, [r7, #12]
		//Get last event value from I2C Status Reg
		lastevent = (flag1 | flag2) & ((uint32_t) 0x00FFFFFF);
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d76:	60bb      	str	r3, [r7, #8]
		if((lastevent & flag) == flag)
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d102      	bne.n	8000d8a <I2C_Get_Status+0xc6>
		{
			Value = SET;
 8000d84:	2301      	movs	r3, #1
 8000d86:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000d88:	e026      	b.n	8000dd8 <I2C_Get_Status+0x114>
			Value = RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75fb      	strb	r3, [r7, #23]
		break;
 8000d8e:	e023      	b.n	8000dd8 <I2C_Get_Status+0x114>
		//		– Cleared by software writing to the DR register or by hardware after a start or a stop condition
		//		or when PE=0.
		//		TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
		//		Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
		//		BTF is set, as in both cases the data register is still empty.
		if((I2Cx->SR1) & (I2C_SR1_TXE))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <I2C_Get_Status+0xde>
		{
			Value = SET;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000da0:	e01a      	b.n	8000dd8 <I2C_Get_Status+0x114>
			Value = RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	75fb      	strb	r3, [r7, #23]
		break;
 8000da6:	e017      	b.n	8000dd8 <I2C_Get_Status+0x114>
		//		– Cleared by software reading SR1 followed by either a read or write in the DR register or by
		//		hardware after a start or a stop condition in transmission or when PE=0.
		//		Note: The BTF bit is not set after a NACK reception
		//		The BTF bit is not set if next byte to be transmitted is the PEC (TRA=1 in I2C_SR2
		//		register and PEC=1 in I2C_CR1 register)
		if((I2Cx->SR1) & (I2C_SR1_BTF))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <I2C_Get_Status+0xf6>
		{
			Value = SET;
 8000db4:	2301      	movs	r3, #1
 8000db6:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000db8:	e00e      	b.n	8000dd8 <I2C_Get_Status+0x114>
			Value = RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75fb      	strb	r3, [r7, #23]
		break;
 8000dbe:	e00b      	b.n	8000dd8 <I2C_Get_Status+0x114>
		//		1: Data register not empty
		//		– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//		– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//		RxNE is not set in case of ARLO event.
		//		Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full.
		if((I2Cx->SR1) & (I2C_SR1_RXNE))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <I2C_Get_Status+0x10e>
		{
			Value = SET;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			Value = RESET;
		}
		break;
 8000dd0:	e001      	b.n	8000dd6 <I2C_Get_Status+0x112>
			Value = RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	75fb      	strb	r3, [r7, #23]
		break;
 8000dd6:	bf00      	nop

	}



	return Value;
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	00070080 	.word	0x00070080

08000de8 <I2C_SendAddress>:




void I2C_SendAddress (I2C_TypeDef* I2Cx , uint16_t Address, E_Direction I2C_Direction)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
 8000df4:	4613      	mov	r3, r2
 8000df6:	707b      	strb	r3, [r7, #1]
	//Todo Support 10 Bit Addressing
	Address = (Address<<1);
 8000df8:	887b      	ldrh	r3, [r7, #2]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	807b      	strh	r3, [r7, #2]
	if (I2C_Direction == Reciever)
 8000dfe:	787b      	ldrb	r3, [r7, #1]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d104      	bne.n	8000e0e <I2C_SendAddress+0x26>
	{
		//Address bit 0 = 1 for Read
		Address |= (1<<0);
 8000e04:	887b      	ldrh	r3, [r7, #2]
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	807b      	strh	r3, [r7, #2]
 8000e0c:	e003      	b.n	8000e16 <I2C_SendAddress+0x2e>
	}
	else
	{
		//Address bit 0 = 0 for Write
		Address &= ~(1<<0);
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	f023 0301 	bic.w	r3, r3, #1
 8000e14:	807b      	strh	r3, [r7, #2]
	}

	I2Cx->DR = Address;
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	611a      	str	r2, [r3, #16]

}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <I2C_AckConfig>:

void I2C_AckConfig (I2C_TypeDef* I2Cx, E_Functional_State State)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70fb      	strb	r3, [r7, #3]
	//	Bit 10 ACK: Acknowledge enable
	//	This bit is set and cleared by software and cleared by hardware when PE=0.
	//	0: No acknowledge returned
	//	1: Acknowledge returned after a byte is received (matched address or data)

	if(State == i2c_enable)
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d106      	bne.n	8000e46 <I2C_AckConfig+0x20>
	{
		I2Cx->CR1 |= (I2C_CR1_ACK);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000e44:	e005      	b.n	8000e52 <I2C_AckConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d00a      	beq.n	8000e84 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d80a      	bhi.n	8000e88 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d002      	beq.n	8000e80 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000e7a:	e005      	b.n	8000e88 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
	{
	case 0:

		return HSI_RC_Clk ;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000e7e:	e003      	b.n	8000e88 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 8000e82:	e001      	b.n	8000e88 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 8000e86:	e7ff      	b.n	8000e88 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	}

}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000
 8000e94:	007a1200 	.word	0x007a1200
 8000e98:	00f42400 	.word	0x00f42400

08000e9c <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8000ea0:	f7ff ffdc 	bl	8000e5c <MCAL_RCC_GetSYS_CLCKFreq>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <MCAL_RCC_GetHCLKFreq+0x20>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	4903      	ldr	r1, [pc, #12]	; (8000ec0 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000eb2:	5ccb      	ldrb	r3, [r1, r3]
 8000eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	08001124 	.word	0x08001124

08000ec4 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8000ec8:	f7ff ffe8 	bl	8000e9c <MCAL_RCC_GetHCLKFreq>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	4903      	ldr	r1, [pc, #12]	; (8000ee8 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000eda:	5ccb      	ldrb	r3, [r1, r3]
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	0800111c 	.word	0x0800111c

08000eec <SPI1_IRQHandler>:



//---ISR-------

void SPI1_IRQHandler (void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI1->SR & (1 << 1)) >> 1 ) ;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <SPI1_IRQHandler+0x54>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	085b      	lsrs	r3, r3, #1
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	f362 0300 	bfi	r3, r2, #0, #1
 8000f04:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1 << 0)) >> 0 ) ;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <SPI1_IRQHandler+0x54>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	793b      	ldrb	r3, [r7, #4]
 8000f12:	f362 0341 	bfi	r3, r2, #1, #1
 8000f16:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1 << 4)) >> 4 ) ;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <SPI1_IRQHandler+0x54>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	793b      	ldrb	r3, [r7, #4]
 8000f26:	f362 0382 	bfi	r3, r2, #2, #1
 8000f2a:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[0]->IRQ_CallBack(irq_src) ;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SPI1_IRQHandler+0x58>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	7938      	ldrb	r0, [r7, #4]
 8000f34:	4798      	blx	r3
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40013000 	.word	0x40013000
 8000f44:	200000a4 	.word	0x200000a4

08000f48 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI2->SR & (1 << 1)) >> 1 ) ;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <SPI2_IRQHandler+0x54>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	085b      	lsrs	r3, r3, #1
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	793b      	ldrb	r3, [r7, #4]
 8000f5c:	f362 0300 	bfi	r3, r2, #0, #1
 8000f60:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1 << 0)) >> 0 ) ;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <SPI2_IRQHandler+0x54>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	793b      	ldrb	r3, [r7, #4]
 8000f6e:	f362 0341 	bfi	r3, r2, #1, #1
 8000f72:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1 << 4)) >> 4 ) ;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <SPI2_IRQHandler+0x54>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	793b      	ldrb	r3, [r7, #4]
 8000f82:	f362 0382 	bfi	r3, r2, #2, #1
 8000f86:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[1]->IRQ_CallBack(irq_src) ;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SPI2_IRQHandler+0x58>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	7938      	ldrb	r0, [r7, #4]
 8000f90:	4798      	blx	r3

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40003800 	.word	0x40003800
 8000fa0:	200000a4 	.word	0x200000a4

08000fa4 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <USART1_IRQHandler+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	4798      	blx	r3

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000ac 	.word	0x200000ac

08000fb8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <USART2_IRQHandler+0x10>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	4798      	blx	r3

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000ac 	.word	0x200000ac

08000fcc <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <USART3_IRQHandler+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4798      	blx	r3


}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200000ac 	.word	0x200000ac

08000fe0 <main>:
#include "Keypad.h"
#include "EEPROM.h"


int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0


	uint8_t ch1 [] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <main+0x7c>)
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff0:	6018      	str	r0, [r3, #0]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	8019      	strh	r1, [r3, #0]
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	0c0a      	lsrs	r2, r1, #16
 8000ffa:	701a      	strb	r2, [r3, #0]
	uint8_t ch2 [7] = {0};
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2100      	movs	r1, #0
 8001004:	460a      	mov	r2, r1
 8001006:	801a      	strh	r2, [r3, #0]
 8001008:	460a      	mov	r2, r1
 800100a:	709a      	strb	r2, [r3, #2]

	HAL_EEPROM_Init();
 800100c:	f7ff f8b0 	bl	8000170 <HAL_EEPROM_Init>
	HAL_EEPROM_Write_NBytes(0xAF, ch1, 7);
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2207      	movs	r2, #7
 8001016:	4619      	mov	r1, r3
 8001018:	20af      	movs	r0, #175	; 0xaf
 800101a:	f7ff f8c9 	bl	80001b0 <HAL_EEPROM_Write_NBytes>
	HAL_EEPROM_Read_NBytes(0xAF, ch2, 7);
 800101e:	463b      	mov	r3, r7
 8001020:	2207      	movs	r2, #7
 8001022:	4619      	mov	r1, r3
 8001024:	20af      	movs	r0, #175	; 0xaf
 8001026:	f7ff f92b 	bl	8000280 <HAL_EEPROM_Read_NBytes>


	//Test Case 2
	ch1 [0] = 0xA;
 800102a:	230a      	movs	r3, #10
 800102c:	723b      	strb	r3, [r7, #8]
	ch1 [1] = 0xB;
 800102e:	230b      	movs	r3, #11
 8001030:	727b      	strb	r3, [r7, #9]
	ch1 [2] = 0xC;
 8001032:	230c      	movs	r3, #12
 8001034:	72bb      	strb	r3, [r7, #10]
	ch1 [3] = 0xD;
 8001036:	230d      	movs	r3, #13
 8001038:	72fb      	strb	r3, [r7, #11]


	HAL_EEPROM_Write_NBytes(0xFFF, ch1, 4);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2204      	movs	r2, #4
 8001040:	4619      	mov	r1, r3
 8001042:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001046:	f7ff f8b3 	bl	80001b0 <HAL_EEPROM_Write_NBytes>
	HAL_EEPROM_Read_NBytes(0xFFF, ch2, 4);
 800104a:	463b      	mov	r3, r7
 800104c:	2204      	movs	r2, #4
 800104e:	4619      	mov	r1, r3
 8001050:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001054:	f7ff f914 	bl	8000280 <HAL_EEPROM_Read_NBytes>


	while(1)
 8001058:	e7fe      	b.n	8001058 <main+0x78>
 800105a:	bf00      	nop
 800105c:	08001114 	.word	0x08001114

08001060 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001062:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001064:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopForever+0x6>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopForever+0xe>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopForever+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800108e:	f000 f811 	bl	80010b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001092:	f7ff ffa5 	bl	8000fe0 <main>

08001096 <LoopForever>:

LoopForever:
  b LoopForever
 8001096:	e7fe      	b.n	8001096 <LoopForever>
  ldr   r0, =_estack
 8001098:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80010a4:	0800113c 	.word	0x0800113c
  ldr r2, =_sbss
 80010a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80010ac:	200000b0 	.word	0x200000b0

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <__libc_init_array>:
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	2600      	movs	r6, #0
 80010b8:	4d0c      	ldr	r5, [pc, #48]	; (80010ec <__libc_init_array+0x38>)
 80010ba:	4c0d      	ldr	r4, [pc, #52]	; (80010f0 <__libc_init_array+0x3c>)
 80010bc:	1b64      	subs	r4, r4, r5
 80010be:	10a4      	asrs	r4, r4, #2
 80010c0:	42a6      	cmp	r6, r4
 80010c2:	d109      	bne.n	80010d8 <__libc_init_array+0x24>
 80010c4:	f000 f81a 	bl	80010fc <_init>
 80010c8:	2600      	movs	r6, #0
 80010ca:	4d0a      	ldr	r5, [pc, #40]	; (80010f4 <__libc_init_array+0x40>)
 80010cc:	4c0a      	ldr	r4, [pc, #40]	; (80010f8 <__libc_init_array+0x44>)
 80010ce:	1b64      	subs	r4, r4, r5
 80010d0:	10a4      	asrs	r4, r4, #2
 80010d2:	42a6      	cmp	r6, r4
 80010d4:	d105      	bne.n	80010e2 <__libc_init_array+0x2e>
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010dc:	4798      	blx	r3
 80010de:	3601      	adds	r6, #1
 80010e0:	e7ee      	b.n	80010c0 <__libc_init_array+0xc>
 80010e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010e6:	4798      	blx	r3
 80010e8:	3601      	adds	r6, #1
 80010ea:	e7f2      	b.n	80010d2 <__libc_init_array+0x1e>
 80010ec:	08001134 	.word	0x08001134
 80010f0:	08001134 	.word	0x08001134
 80010f4:	08001134 	.word	0x08001134
 80010f8:	08001138 	.word	0x08001138

080010fc <_init>:
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fe:	bf00      	nop
 8001100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001102:	bc08      	pop	{r3}
 8001104:	469e      	mov	lr, r3
 8001106:	4770      	bx	lr

08001108 <_fini>:
 8001108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110a:	bf00      	nop
 800110c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110e:	bc08      	pop	{r3}
 8001110:	469e      	mov	lr, r3
 8001112:	4770      	bx	lr
