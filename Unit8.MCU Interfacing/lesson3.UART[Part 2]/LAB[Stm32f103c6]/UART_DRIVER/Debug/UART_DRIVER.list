
UART_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a58  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b88  08000b88  00010b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ba0  08000ba0  00010ba8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ba0  08000ba0  00010ba8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ba0  08000ba8  00010ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba0  08000ba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000ba8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000ba8  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ba8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000147b  00000000  00000000  00010bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b6  00000000  00000000  0001204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a28  00000000  00000000  00012702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00013130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000170  00000000  00000000  000132f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001143  00000000  00000000  00013468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000031b0  00000000  00000000  000145ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a760  00000000  00000000  0001775b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00021ebb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000578  00000000  00000000  00021f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b70 	.word	0x08000b70

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b70 	.word	0x08000b70

08000170 <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	GP_FuncCallBack[0]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
	EXTI->PR |= (1 << 0);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	2000001c 	.word	0x2000001c
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	GP_FuncCallBack[1]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
	EXTI->PR |= (1 << 1);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6153      	str	r3, [r2, #20]

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	GP_FuncCallBack[2]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4798      	blx	r3
	EXTI->PR |= (1 << 2);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6153      	str	r3, [r2, #20]


}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	GP_FuncCallBack[3]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4798      	blx	r3
	EXTI->PR |= (1 << 3);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6153      	str	r3, [r2, #20]

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	40010400 	.word	0x40010400

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	GP_FuncCallBack[4]();
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4798      	blx	r3
	EXTI->PR |= (1 << 4);
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI4_IRQHandler+0x20>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6153      	str	r3, [r2, #20]

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	2000001c 	.word	0x2000001c
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { GP_FuncCallBack[5]();   EXTI->PR |= (1 << 5); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b24      	ldr	r3, [pc, #144]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4798      	blx	r3
 800023a:	4b22      	ldr	r3, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	4a21      	ldr	r2, [pc, #132]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000240:	f043 0320 	orr.w	r3, r3, #32
 8000244:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<6)) { GP_FuncCallBack[6]();   EXTI->PR |= (1 << 6); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	4798      	blx	r3
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800025e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000262:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<7)) { GP_FuncCallBack[7]();   EXTI->PR |= (1 << 7); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000272:	69db      	ldr	r3, [r3, #28]
 8000274:	4798      	blx	r3
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800027c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000280:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<8)) { GP_FuncCallBack[8]();   EXTI->PR |= (1 << 8); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000290:	6a1b      	ldr	r3, [r3, #32]
 8000292:	4798      	blx	r3
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<9)) { GP_FuncCallBack[9]();   EXTI->PR |= (1 << 9); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b0:	4798      	blx	r3
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002bc:	6153      	str	r3, [r2, #20]
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { GP_FuncCallBack[10]();   EXTI->PR |= (1 << 10); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2b      	ldr	r3, [pc, #172]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e0:	4798      	blx	r3
 80002e2:	4b29      	ldr	r3, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a28      	ldr	r2, [pc, #160]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ec:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<11)) { GP_FuncCallBack[11]();   EXTI->PR |= (1 << 11); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	4798      	blx	r3
 8000300:	4b21      	ldr	r3, [pc, #132]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	4a20      	ldr	r2, [pc, #128]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800030a:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<12)) { GP_FuncCallBack[12]();   EXTI->PR |= (1 << 12); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1c      	ldr	r3, [pc, #112]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4798      	blx	r3
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a19      	ldr	r2, [pc, #100]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000328:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<13)) { GP_FuncCallBack[13]();   EXTI->PR |= (1 << 13); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800033a:	4798      	blx	r3
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000346:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<14)) { GP_FuncCallBack[14]();   EXTI->PR |= (1 << 14); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000358:	4798      	blx	r3
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000364:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<15)) { GP_FuncCallBack[15]();   EXTI->PR |= (1 << 15); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000376:	4798      	blx	r3
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a02      	ldr	r2, [pc, #8]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800037e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000382:	6153      	str	r3, [r2, #20]

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <Get_Pos_CRLH>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio
 * @retval -Suitable Pos for Config_Register [uint8_t]
 * */

uint8_t Get_Pos_CRLH(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a0:	f000 80a5 	beq.w	80004ee <Get_Pos_CRLH+0x15e>
 80003a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a8:	f300 80a3 	bgt.w	80004f2 <Get_Pos_CRLH+0x162>
 80003ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b0:	f000 809b 	beq.w	80004ea <Get_Pos_CRLH+0x15a>
 80003b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b8:	f300 809b 	bgt.w	80004f2 <Get_Pos_CRLH+0x162>
 80003bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c0:	f000 8091 	beq.w	80004e6 <Get_Pos_CRLH+0x156>
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c8:	f300 8093 	bgt.w	80004f2 <Get_Pos_CRLH+0x162>
 80003cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d0:	f000 8087 	beq.w	80004e2 <Get_Pos_CRLH+0x152>
 80003d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d8:	f300 808b 	bgt.w	80004f2 <Get_Pos_CRLH+0x162>
 80003dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e0:	d07d      	beq.n	80004de <Get_Pos_CRLH+0x14e>
 80003e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e6:	f300 8084 	bgt.w	80004f2 <Get_Pos_CRLH+0x162>
 80003ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003ee:	d074      	beq.n	80004da <Get_Pos_CRLH+0x14a>
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f4:	dc7d      	bgt.n	80004f2 <Get_Pos_CRLH+0x162>
 80003f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003fa:	d06c      	beq.n	80004d6 <Get_Pos_CRLH+0x146>
 80003fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000400:	dc77      	bgt.n	80004f2 <Get_Pos_CRLH+0x162>
 8000402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000406:	d064      	beq.n	80004d2 <Get_Pos_CRLH+0x142>
 8000408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800040c:	dc71      	bgt.n	80004f2 <Get_Pos_CRLH+0x162>
 800040e:	2b80      	cmp	r3, #128	; 0x80
 8000410:	d05d      	beq.n	80004ce <Get_Pos_CRLH+0x13e>
 8000412:	2b80      	cmp	r3, #128	; 0x80
 8000414:	dc6d      	bgt.n	80004f2 <Get_Pos_CRLH+0x162>
 8000416:	2b20      	cmp	r3, #32
 8000418:	dc48      	bgt.n	80004ac <Get_Pos_CRLH+0x11c>
 800041a:	2b00      	cmp	r3, #0
 800041c:	dd69      	ble.n	80004f2 <Get_Pos_CRLH+0x162>
 800041e:	3b01      	subs	r3, #1
 8000420:	2b1f      	cmp	r3, #31
 8000422:	d866      	bhi.n	80004f2 <Get_Pos_CRLH+0x162>
 8000424:	a201      	add	r2, pc, #4	; (adr r2, 800042c <Get_Pos_CRLH+0x9c>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b7 	.word	0x080004b7
 8000434:	080004f3 	.word	0x080004f3
 8000438:	080004bb 	.word	0x080004bb
 800043c:	080004f3 	.word	0x080004f3
 8000440:	080004f3 	.word	0x080004f3
 8000444:	080004f3 	.word	0x080004f3
 8000448:	080004bf 	.word	0x080004bf
 800044c:	080004f3 	.word	0x080004f3
 8000450:	080004f3 	.word	0x080004f3
 8000454:	080004f3 	.word	0x080004f3
 8000458:	080004f3 	.word	0x080004f3
 800045c:	080004f3 	.word	0x080004f3
 8000460:	080004f3 	.word	0x080004f3
 8000464:	080004f3 	.word	0x080004f3
 8000468:	080004c3 	.word	0x080004c3
 800046c:	080004f3 	.word	0x080004f3
 8000470:	080004f3 	.word	0x080004f3
 8000474:	080004f3 	.word	0x080004f3
 8000478:	080004f3 	.word	0x080004f3
 800047c:	080004f3 	.word	0x080004f3
 8000480:	080004f3 	.word	0x080004f3
 8000484:	080004f3 	.word	0x080004f3
 8000488:	080004f3 	.word	0x080004f3
 800048c:	080004f3 	.word	0x080004f3
 8000490:	080004f3 	.word	0x080004f3
 8000494:	080004f3 	.word	0x080004f3
 8000498:	080004f3 	.word	0x080004f3
 800049c:	080004f3 	.word	0x080004f3
 80004a0:	080004f3 	.word	0x080004f3
 80004a4:	080004f3 	.word	0x080004f3
 80004a8:	080004c7 	.word	0x080004c7
 80004ac:	2b40      	cmp	r3, #64	; 0x40
 80004ae:	d00c      	beq.n	80004ca <Get_Pos_CRLH+0x13a>
 80004b0:	e01f      	b.n	80004f2 <Get_Pos_CRLH+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e01e      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80004b6:	2304      	movs	r3, #4
 80004b8:	e01c      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	e01a      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80004be:	230c      	movs	r3, #12
 80004c0:	e018      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80004c2:	2310      	movs	r3, #16
 80004c4:	e016      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80004c6:	2314      	movs	r3, #20
 80004c8:	e014      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80004ca:	2318      	movs	r3, #24
 80004cc:	e012      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80004ce:	231c      	movs	r3, #28
 80004d0:	e010      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e00e      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 80004d6:	2304      	movs	r3, #4
 80004d8:	e00c      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80004da:	2308      	movs	r3, #8
 80004dc:	e00a      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80004de:	230c      	movs	r3, #12
 80004e0:	e008      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80004e2:	2310      	movs	r3, #16
 80004e4:	e006      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80004e6:	2314      	movs	r3, #20
 80004e8:	e004      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80004ea:	2318      	movs	r3, #24
 80004ec:	e002      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80004ee:	231c      	movs	r3, #28
 80004f0:	e000      	b.n	80004f4 <Get_Pos_CRLH+0x164>
		break;

	default:
		return 0;
 80004f2:	2300      	movs	r3, #0


	}

}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MCAL_GPIO_Init>:
 * Note-You must Create Instant from "GPIO_PinConfig_t" Structure,
 * Before using This func "MCAL_GPIO_Init" and pass it to @param [in] -Address of the PinConfig
 */

void MCAL_GPIO_Init(GPIO_TypedDef* GPIOx, GPIO_PinConfig_t* PinConfig )
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]

	volatile uint32_t* Reg_Config= NULL;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]

	Reg_Config = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &(GPIOx->CRL):  &(GPIOx->CRH) ;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	2bff      	cmp	r3, #255	; 0xff
 8000514:	d801      	bhi.n	800051a <MCAL_GPIO_Init+0x1a>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	e001      	b.n	800051e <MCAL_GPIO_Init+0x1e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
	*Reg_Config &= ~(0xF << Get_Pos_CRLH(PinConfig->GPIO_PinNumber) );
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff33 	bl	8000390 <Get_Pos_CRLH>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	230f      	movs	r3, #15
 8000530:	4093      	lsls	r3, r2
 8000532:	43da      	mvns	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	401a      	ands	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	601a      	str	r2, [r3, #0]


	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	2b04      	cmp	r3, #4
 8000544:	d00b      	beq.n	800055e <MCAL_GPIO_Init+0x5e>
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	2b05      	cmp	r3, #5
 800054c:	d007      	beq.n	800055e <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	685b      	ldr	r3, [r3, #4]
	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8000552:	2b06      	cmp	r3, #6
 8000554:	d003      	beq.n	800055e <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	2b07      	cmp	r3, #7
 800055c:	d117      	bne.n	800058e <MCAL_GPIO_Init+0x8e>
	{
		*Reg_Config |= (((((PinConfig->GPIO_Mode - 4) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	3b04      	subs	r3, #4
 8000564:	009a      	lsls	r2, r3, #2
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4313      	orrs	r3, r2
 800056c:	f003 040f 	and.w	r4, r3, #15
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff0b 	bl	8000390 <Get_Pos_CRLH>
 800057a:	4603      	mov	r3, r0
 800057c:	fa04 f203 	lsl.w	r2, r4, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	431a      	orrs	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	bf00      	nop

		}

	}

}
 800058c:	e058      	b.n	8000640 <MCAL_GPIO_Init+0x140>
		if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_up )
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d11c      	bne.n	80005d0 <MCAL_GPIO_Init+0xd0>
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	8812      	ldrh	r2, [r2, #0]
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	009a      	lsls	r2, r3, #2
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	f003 040f 	and.w	r4, r3, #15
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fee9 	bl	8000390 <Get_Pos_CRLH>
 80005be:	4603      	mov	r3, r0
 80005c0:	fa04 f203 	lsl.w	r2, r4, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	431a      	orrs	r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	601a      	str	r2, [r3, #0]
}
 80005ce:	e037      	b.n	8000640 <MCAL_GPIO_Init+0x140>
		else if (PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_down)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d11e      	bne.n	8000616 <MCAL_GPIO_Init+0x116>
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	8812      	ldrh	r2, [r2, #0]
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	401a      	ands	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode - 1) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	009a      	lsls	r2, r3, #2
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	f003 040f 	and.w	r4, r3, #15
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fec6 	bl	8000390 <Get_Pos_CRLH>
 8000604:	4603      	mov	r3, r0
 8000606:	fa04 f203 	lsl.w	r2, r4, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	431a      	orrs	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	e014      	b.n	8000640 <MCAL_GPIO_Init+0x140>
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	009a      	lsls	r2, r3, #2
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	4313      	orrs	r3, r2
 8000622:	f003 040f 	and.w	r4, r3, #15
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff feb0 	bl	8000390 <Get_Pos_CRLH>
 8000630:	4603      	mov	r3, r0
 8000632:	fa04 f203 	lsl.w	r2, r4, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	431a      	orrs	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d00a      	beq.n	8000670 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
 800065a:	2b02      	cmp	r3, #2
 800065c:	d80a      	bhi.n	8000674 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000662:	2b01      	cmp	r3, #1
 8000664:	d002      	beq.n	800066c <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000666:	e005      	b.n	8000674 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
	{
	case 0:

		return HSI_RC_Clk ;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800066a:	e003      	b.n	8000674 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 800066e:	e001      	b.n	8000674 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 8000672:	e7ff      	b.n	8000674 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	}

}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	007a1200 	.word	0x007a1200
 8000684:	00f42400 	.word	0x00f42400

08000688 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 800068c:	f7ff ffdc 	bl	8000648 <MCAL_RCC_GetSYS_CLCKFreq>
 8000690:	4602      	mov	r2, r0
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	091b      	lsrs	r3, r3, #4
 8000698:	f003 030f 	and.w	r3, r3, #15
 800069c:	4903      	ldr	r1, [pc, #12]	; (80006ac <MCAL_RCC_GetHCLKFreq+0x24>)
 800069e:	5ccb      	ldrb	r3, [r1, r3]
 80006a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	08000b90 	.word	0x08000b90

080006b0 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 80006b4:	f7ff ffe8 	bl	8000688 <MCAL_RCC_GetHCLKFreq>
 80006b8:	4602      	mov	r2, r0
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	0a1b      	lsrs	r3, r3, #8
 80006c0:	f003 0307 	and.w	r3, r3, #7
 80006c4:	4903      	ldr	r1, [pc, #12]	; (80006d4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80006c6:	5ccb      	ldrb	r3, [r1, r3]
 80006c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	08000b88 	.word	0x08000b88

080006d8 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 80006dc:	f7ff ffd4 	bl	8000688 <MCAL_RCC_GetHCLKFreq>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	0adb      	lsrs	r3, r3, #11
 80006e8:	f003 0307 	and.w	r3, r3, #7
 80006ec:	4903      	ldr	r1, [pc, #12]	; (80006fc <MCAL_RCC_GetPCLK2Freq+0x24>)
 80006ee:	5ccb      	ldrb	r3, [r1, r3]
 80006f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	08000b88 	.word	0x08000b88

08000700 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 800070a:	4a57      	ldr	r2, [pc, #348]	; (8000868 <MCAL_UART_Init+0x168>)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a56      	ldr	r2, [pc, #344]	; (800086c <MCAL_UART_Init+0x16c>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d106      	bne.n	8000726 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <MCAL_UART_Init+0x170>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a54      	ldr	r2, [pc, #336]	; (8000870 <MCAL_UART_Init+0x170>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	e014      	b.n	8000750 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a52      	ldr	r2, [pc, #328]	; (8000874 <MCAL_UART_Init+0x174>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 800072e:	4b50      	ldr	r3, [pc, #320]	; (8000870 <MCAL_UART_Init+0x170>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a4f      	ldr	r2, [pc, #316]	; (8000870 <MCAL_UART_Init+0x170>)
 8000734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	e009      	b.n	8000750 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a4e      	ldr	r2, [pc, #312]	; (8000878 <MCAL_UART_Init+0x178>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d105      	bne.n	8000750 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000744:	4b4a      	ldr	r3, [pc, #296]	; (8000870 <MCAL_UART_Init+0x170>)
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	4a49      	ldr	r2, [pc, #292]	; (8000870 <MCAL_UART_Init+0x170>)
 800074a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800074e:	61d3      	str	r3, [r2, #28]



	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	7a12      	ldrb	r2, [r2, #8]
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	7a52      	ldrb	r2, [r2, #9]
 8000780:	431a      	orrs	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	7a92      	ldrb	r2, [r2, #10]
 800078e:	431a      	orrs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	7ad2      	ldrb	r2, [r2, #11]
 800079c:	431a      	orrs	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a31      	ldr	r2, [pc, #196]	; (800086c <MCAL_UART_Init+0x16c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d103      	bne.n	80007b2 <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 80007aa:	f7ff ff95 	bl	80006d8 <MCAL_RCC_GetPCLK2Freq>
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	e002      	b.n	80007b8 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 80007b2:	f7ff ff7d 	bl	80006b0 <MCAL_RCC_GetPCLK1Freq>
 80007b6:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c4:	0119      	lsls	r1, r3, #4
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	009a      	lsls	r2, r3, #2
 80007d0:	441a      	add	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80007e8:	2064      	movs	r0, #100	; 0x64
 80007ea:	fb00 f303 	mul.w	r3, r0, r3
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	4a22      	ldr	r2, [pc, #136]	; (800087c <MCAL_UART_Init+0x17c>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	095b      	lsrs	r3, r3, #5
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	430b      	orrs	r3, r1
 8000800:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	7b1b      	ldrb	r3, [r3, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d026      	beq.n	800085e <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	7b12      	ldrb	r2, [r2, #12]
 8000818:	431a      	orrs	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <MCAL_UART_Init+0x16c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MCAL_UART_Init+0x180>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MCAL_UART_Init+0x180>)
 800082c:	f043 0320 	orr.w	r3, r3, #32
 8000830:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 8000832:	e014      	b.n	800085e <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART2 )
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MCAL_UART_Init+0x174>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable ;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MCAL_UART_Init+0x180>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <MCAL_UART_Init+0x180>)
 8000842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	e009      	b.n	800085e <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART3 )
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <MCAL_UART_Init+0x178>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d105      	bne.n	800085e <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable ;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MCAL_UART_Init+0x180>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <MCAL_UART_Init+0x180>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6013      	str	r3, [r2, #0]
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000005c 	.word	0x2000005c
 800086c:	40013800 	.word	0x40013800
 8000870:	40021000 	.word	0x40021000
 8000874:	40004400 	.word	0x40004400
 8000878:	40004800 	.word	0x40004800
 800087c:	51eb851f 	.word	0x51eb851f
 8000880:	e000e104 	.word	0xe000e104

08000884 <MCAL_UART_SendData>:
			//			bit

 */

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	71fb      	strb	r3, [r7, #7]
	uint16_t *pdata;

	// wait until TXE flag is set in the SR
	if (PollingEn == enable)
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d106      	bne.n	80008a6 <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 8000898:	bf00      	nop
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0f9      	beq.n	800089a <MCAL_UART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	605a      	str	r2, [r3, #4]
	}




}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
	...

080008bc <MCAL_UART_ReceiveData>:
}



void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	4613      	mov	r3, r2
 80008c8:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE flag is set in the SR
	if (PollingEn == enable)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d106      	bne.n	80008de <MCAL_UART_ReceiveData+0x22>
	{
		while( ! (USARTx->SR & 1<<5 ));
 80008d0:	bf00      	nop
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f9      	beq.n	80008d2 <MCAL_UART_ReceiveData+0x16>
		}

	}else
	{
		//This is 8bit data
		if (Global_UART_Config->Parity ==UART_Parity__NONE)
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MCAL_UART_ReceiveData+0x58>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	7a5b      	ldrb	r3, [r3, #9]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d107      	bne.n	80008f8 <MCAL_UART_ReceiveData+0x3c>
		{
			//no parity So all 8bit are considered data
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF ) ;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	801a      	strh	r2, [r3, #0]

		}
	}


}
 80008f6:	e007      	b.n	8000908 <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000902:	b29a      	uxth	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	801a      	strh	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	2000005c 	.word	0x2000005c

08000918 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;
	AFIO_CLOCK_ENABLE;
 8000920:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a3c      	ldr	r2, [pc, #240]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6193      	str	r3, [r2, #24]

	if ( USARTx == USART1 )
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a3b      	ldr	r2, [pc, #236]	; (8000a1c <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d120      	bne.n	8000976 <MCAL_UART_GPIO_Set_Pins+0x5e>
		//PA9 TX
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		GPIOA_CLOCK_ENABLE;
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a37      	ldr	r2, [pc, #220]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000944:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8000946:	2306      	movs	r3, #6
 8000948:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 800094a:	2301      	movs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4832      	ldr	r0, [pc, #200]	; (8000a20 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8000956:	f7ff fdd3 	bl	8000500 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 8000960:	2301      	movs	r3, #1
 8000962:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4619      	mov	r1, r3
 800096e:	482c      	ldr	r0, [pc, #176]	; (8000a20 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8000970:	f7ff fdc6 	bl	8000500 <MCAL_GPIO_Init>
			PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8000974:	e04c      	b.n	8000a10 <MCAL_UART_GPIO_Set_Pins+0xf8>
	else if ( USARTx == USART2 )
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a2a      	ldr	r2, [pc, #168]	; (8000a24 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d11e      	bne.n	80009bc <MCAL_UART_GPIO_Set_Pins+0xa4>
		GPIOA_CLOCK_ENABLE;
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6193      	str	r3, [r2, #24]
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800098a:	2304      	movs	r3, #4
 800098c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 800098e:	2306      	movs	r3, #6
 8000990:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	4820      	ldr	r0, [pc, #128]	; (8000a20 <MCAL_UART_GPIO_Set_Pins+0x108>)
 800099e:	f7ff fdaf 	bl	8000500 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80009a2:	2308      	movs	r3, #8
 80009a4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 80009a6:	2301      	movs	r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	481a      	ldr	r0, [pc, #104]	; (8000a20 <MCAL_UART_GPIO_Set_Pins+0x108>)
 80009b6:	f7ff fda3 	bl	8000500 <MCAL_GPIO_Init>
}
 80009ba:	e029      	b.n	8000a10 <MCAL_UART_GPIO_Set_Pins+0xf8>
	else if ( USARTx == USART3 )
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <MCAL_UART_GPIO_Set_Pins+0x110>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d125      	bne.n	8000a10 <MCAL_UART_GPIO_Set_Pins+0xf8>
		GPIOA_CLOCK_ENABLE;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
		GPIOB_CLOCK_ENABLE;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0x100>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6193      	str	r3, [r2, #24]
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80009dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 80009e2:	2306      	movs	r3, #6
 80009e4:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 80009e6:	2301      	movs	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <MCAL_UART_GPIO_Set_Pins+0x114>)
 80009f2:	f7ff fd85 	bl	8000500 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80009f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fa:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 80009fc:	2301      	movs	r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4808      	ldr	r0, [pc, #32]	; (8000a2c <MCAL_UART_GPIO_Set_Pins+0x114>)
 8000a0c:	f7ff fd78 	bl	8000500 <MCAL_GPIO_Init>
}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40010800 	.word	0x40010800
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <USART1_IRQHandler+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	4798      	blx	r3

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000005c 	.word	0x2000005c

08000a44 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <USART2_IRQHandler+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	4798      	blx	r3

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000005c 	.word	0x2000005c

08000a58 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <USART3_IRQHandler+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	4798      	blx	r3


}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000005c 	.word	0x2000005c

08000a6c <UART_IRQ_Callback>:

uint8_t   ch ;


void UART_IRQ_Callback (void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART1, &ch, disable);
 8000a70:	2201      	movs	r2, #1
 8000a72:	4905      	ldr	r1, [pc, #20]	; (8000a88 <UART_IRQ_Callback+0x1c>)
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <UART_IRQ_Callback+0x20>)
 8000a76:	f7ff ff21 	bl	80008bc <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4902      	ldr	r1, [pc, #8]	; (8000a88 <UART_IRQ_Callback+0x1c>)
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <UART_IRQ_Callback+0x20>)
 8000a80:	f7ff ff00 	bl	8000884 <MCAL_UART_SendData>

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000060 	.word	0x20000060
 8000a8c:	40013800 	.word	0x40013800

08000a90 <main>:

int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0

	UART_Config uartCFG ;
	uartCFG.BaudRate = UART_BaudRate_9600 ;
 8000a96:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a9a:	60bb      	str	r3, [r7, #8]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE ;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]
	//uartCFG.IRQ_Enable = UART_IRQ_Enable_NONE ;
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE ;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback ;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <main+0x3c>)
 8000aa6:	617b      	str	r3, [r7, #20]
	//uartCFG.P_IRQ_CallBack = NULL ;
	uartCFG.Parity =UART_Parity__NONE ;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	737b      	strb	r3, [r7, #13]
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 8000aac:	2300      	movs	r3, #0
 8000aae:	733b      	strb	r3, [r7, #12]
	uartCFG.StopBits = UART_StopBits__1 ;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73bb      	strb	r3, [r7, #14]
	uartCFG.USART_Mode = UART_MODE_TX_RX ;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &uartCFG);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <main+0x40>)
 8000abe:	f7ff fe1f 	bl	8000700 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <main+0x40>)
 8000ac4:	f7ff ff28 	bl	8000918 <MCAL_UART_GPIO_Set_Pins>

	/* Loop forever */
	while(1)
 8000ac8:	e7fe      	b.n	8000ac8 <main+0x38>
 8000aca:	bf00      	nop
 8000acc:	08000a6d 	.word	0x08000a6d
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b02:	f000 f811 	bl	8000b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b06:	f7ff ffc3 	bl	8000a90 <main>

08000b0a <LoopForever>:

LoopForever:
  b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   r0, =_estack
 8000b0c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b18:	08000ba8 	.word	0x08000ba8
  ldr r2, =_sbss
 8000b1c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b20:	20000064 	.word	0x20000064

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	2600      	movs	r6, #0
 8000b2c:	4d0c      	ldr	r5, [pc, #48]	; (8000b60 <__libc_init_array+0x38>)
 8000b2e:	4c0d      	ldr	r4, [pc, #52]	; (8000b64 <__libc_init_array+0x3c>)
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	10a4      	asrs	r4, r4, #2
 8000b34:	42a6      	cmp	r6, r4
 8000b36:	d109      	bne.n	8000b4c <__libc_init_array+0x24>
 8000b38:	f000 f81a 	bl	8000b70 <_init>
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	4d0a      	ldr	r5, [pc, #40]	; (8000b68 <__libc_init_array+0x40>)
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <__libc_init_array+0x44>)
 8000b42:	1b64      	subs	r4, r4, r5
 8000b44:	10a4      	asrs	r4, r4, #2
 8000b46:	42a6      	cmp	r6, r4
 8000b48:	d105      	bne.n	8000b56 <__libc_init_array+0x2e>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b50:	4798      	blx	r3
 8000b52:	3601      	adds	r6, #1
 8000b54:	e7ee      	b.n	8000b34 <__libc_init_array+0xc>
 8000b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5a:	4798      	blx	r3
 8000b5c:	3601      	adds	r6, #1
 8000b5e:	e7f2      	b.n	8000b46 <__libc_init_array+0x1e>
 8000b60:	08000ba0 	.word	0x08000ba0
 8000b64:	08000ba0 	.word	0x08000ba0
 8000b68:	08000ba0 	.word	0x08000ba0
 8000b6c:	08000ba4 	.word	0x08000ba4

08000b70 <_init>:
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	bf00      	nop
 8000b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b76:	bc08      	pop	{r3}
 8000b78:	469e      	mov	lr, r3
 8000b7a:	4770      	bx	lr

08000b7c <_fini>:
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7e:	bf00      	nop
 8000b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b82:	bc08      	pop	{r3}
 8000b84:	469e      	mov	lr, r3
 8000b86:	4770      	bx	lr
