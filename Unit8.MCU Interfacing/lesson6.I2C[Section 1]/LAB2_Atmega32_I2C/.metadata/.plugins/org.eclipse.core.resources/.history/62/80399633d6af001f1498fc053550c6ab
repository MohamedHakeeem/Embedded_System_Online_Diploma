
I2C_Protocol[Master].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002908  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002908  0000299c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080007a  0080007a  000029b6  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  000029b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005f2  00000000  00000000  00002d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002da0  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001666  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002ad8  00000000  00000000  0000770e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a0  00000000  00000000  0000a1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a8c  00000000  00000000  0000a688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000b114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000b8e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_1>
       8:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 13 	call	0x2704	; 0x2704 <main>
      8a:	0c 94 82 14 	jmp	0x2904	; 0x2904 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MCAL_USART_Init>:
 * @retval 		-None
 * Note 		-Supports Asynch mode only , 8Mhz clk
 */

void MCAL_USART_Init(USART_Config_t* USART_Config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2a 97       	sbiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01

	GL_USART_Config = USART_Config;
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	90 93 7d 00 	sts	0x007D, r25
     b66:	80 93 7c 00 	sts	0x007C, r24
	//Set BaudRate
	USART->UBRRL = USART_Config->BaudRate;
     b6a:	29 e2       	ldi	r18, 0x29	; 41
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	e9 81       	ldd	r30, Y+1	; 0x01
     b70:	fa 81       	ldd	r31, Y+2	; 0x02
     b72:	81 81       	ldd	r24, Z+1	; 0x01
     b74:	92 81       	ldd	r25, Z+2	; 0x02
     b76:	a3 81       	ldd	r26, Z+3	; 0x03
     b78:	b4 81       	ldd	r27, Z+4	; 0x04
     b7a:	f9 01       	movw	r30, r18
     b7c:	80 83       	st	Z, r24
	//U2X Normal mode , U2X=0
	USART->UCSRA &= ~(1<<1);
     b7e:	a9 e2       	ldi	r26, 0x29	; 41
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e9 e2       	ldi	r30, 0x29	; 41
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	8d 7f       	andi	r24, 0xFD	; 253
     b8a:	12 96       	adiw	r26, 0x02	; 2
     b8c:	8c 93       	st	X, r24
     b8e:	12 97       	sbiw	r26, 0x02	; 2

	//----Frame
	//Configure Parity Mode
	switch (USART_Config->Parity)
     b90:	e9 81       	ldd	r30, Y+1	; 0x01
     b92:	fa 81       	ldd	r31, Y+2	; 0x02
     b94:	86 81       	ldd	r24, Z+6	; 0x06
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3a 87       	std	Y+10, r19	; 0x0a
     b9c:	29 87       	std	Y+9, r18	; 0x09
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	91 05       	cpc	r25, r1
     ba6:	c9 f0       	breq	.+50     	; 0xbda <MCAL_USART_Init+0x94>
     ba8:	e9 85       	ldd	r30, Y+9	; 0x09
     baa:	fa 85       	ldd	r31, Y+10	; 0x0a
     bac:	e2 30       	cpi	r30, 0x02	; 2
     bae:	f1 05       	cpc	r31, r1
     bb0:	19 f1       	breq	.+70     	; 0xbf8 <MCAL_USART_Init+0xb2>
     bb2:	29 85       	ldd	r18, Y+9	; 0x09
     bb4:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb6:	21 15       	cp	r18, r1
     bb8:	31 05       	cpc	r19, r1
     bba:	99 f5       	brne	.+102    	; 0xc22 <MCAL_USART_Init+0xdc>
	//	 0		1		Reserved
	//	 1		0		Enabled,Even Parity
	//	 1		1		Enabled,Odd Parity
	//
	case USART_PARITY_NONE:
		UCSRC |= (1<<7);		//The URSEL must be one when writing the UCSRC
     bbc:	a0 e4       	ldi	r26, 0x40	; 64
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e0 e4       	ldi	r30, 0x40	; 64
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 68       	ori	r24, 0x80	; 128
     bc8:	8c 93       	st	X, r24
		UCSRC &= ~(0b11<<4);
     bca:	a0 e4       	ldi	r26, 0x40	; 64
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e0 e4       	ldi	r30, 0x40	; 64
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 7c       	andi	r24, 0xCF	; 207
     bd6:	8c 93       	st	X, r24
     bd8:	24 c0       	rjmp	.+72     	; 0xc22 <MCAL_USART_Init+0xdc>
		break;
	case USART_PARITY_ODD:
		UCSRC |= (1<<7);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24
		UCSRC |= (0b11<<4);
     be8:	a0 e4       	ldi	r26, 0x40	; 64
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e0 e4       	ldi	r30, 0x40	; 64
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 63       	ori	r24, 0x30	; 48
     bf4:	8c 93       	st	X, r24
     bf6:	15 c0       	rjmp	.+42     	; 0xc22 <MCAL_USART_Init+0xdc>
		break;
	case USART_PARITY_EVEN:
		UCSRC |= (1<<7);
     bf8:	a0 e4       	ldi	r26, 0x40	; 64
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e0 e4       	ldi	r30, 0x40	; 64
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	8c 93       	st	X, r24
		UCSRC &= ~(1<<4);
     c06:	a0 e4       	ldi	r26, 0x40	; 64
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e0 e4       	ldi	r30, 0x40	; 64
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	8f 7e       	andi	r24, 0xEF	; 239
     c12:	8c 93       	st	X, r24
		UCSRC |=  (1<<5);
     c14:	a0 e4       	ldi	r26, 0x40	; 64
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e0 e4       	ldi	r30, 0x40	; 64
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 62       	ori	r24, 0x20	; 32
     c20:	8c 93       	st	X, r24
		break;
	}
	//Configure Data size
	switch(USART_Config->Data_Length)
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	85 81       	ldd	r24, Z+5	; 0x05
     c28:	e8 2f       	mov	r30, r24
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	f8 87       	std	Y+8, r31	; 0x08
     c2e:	ef 83       	std	Y+7, r30	; 0x07
     c30:	2f 81       	ldd	r18, Y+7	; 0x07
     c32:	38 85       	ldd	r19, Y+8	; 0x08
     c34:	22 30       	cpi	r18, 0x02	; 2
     c36:	31 05       	cpc	r19, r1
     c38:	09 f4       	brne	.+2      	; 0xc3c <MCAL_USART_Init+0xf6>
     c3a:	58 c0       	rjmp	.+176    	; 0xcec <MCAL_USART_Init+0x1a6>
     c3c:	8f 81       	ldd	r24, Y+7	; 0x07
     c3e:	98 85       	ldd	r25, Y+8	; 0x08
     c40:	83 30       	cpi	r24, 0x03	; 3
     c42:	91 05       	cpc	r25, r1
     c44:	54 f4       	brge	.+20     	; 0xc5a <MCAL_USART_Init+0x114>
     c46:	ef 81       	ldd	r30, Y+7	; 0x07
     c48:	f8 85       	ldd	r31, Y+8	; 0x08
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	99 f0       	breq	.+38     	; 0xc74 <MCAL_USART_Init+0x12e>
     c4e:	2f 81       	ldd	r18, Y+7	; 0x07
     c50:	38 85       	ldd	r19, Y+8	; 0x08
     c52:	21 30       	cpi	r18, 0x01	; 1
     c54:	31 05       	cpc	r19, r1
     c56:	61 f1       	breq	.+88     	; 0xcb0 <MCAL_USART_Init+0x16a>
     c58:	a2 c0       	rjmp	.+324    	; 0xd9e <MCAL_USART_Init+0x258>
     c5a:	8f 81       	ldd	r24, Y+7	; 0x07
     c5c:	98 85       	ldd	r25, Y+8	; 0x08
     c5e:	83 30       	cpi	r24, 0x03	; 3
     c60:	91 05       	cpc	r25, r1
     c62:	09 f4       	brne	.+2      	; 0xc66 <MCAL_USART_Init+0x120>
     c64:	61 c0       	rjmp	.+194    	; 0xd28 <MCAL_USART_Init+0x1e2>
     c66:	ef 81       	ldd	r30, Y+7	; 0x07
     c68:	f8 85       	ldd	r31, Y+8	; 0x08
     c6a:	e4 30       	cpi	r30, 0x04	; 4
     c6c:	f1 05       	cpc	r31, r1
     c6e:	09 f4       	brne	.+2      	; 0xc72 <MCAL_USART_Init+0x12c>
     c70:	79 c0       	rjmp	.+242    	; 0xd64 <MCAL_USART_Init+0x21e>
     c72:	95 c0       	rjmp	.+298    	; 0xd9e <MCAL_USART_Init+0x258>
	//	 	 0			  1		  0		7-Bits
	//	 	 0			  1		  1		8-Bits
	//	 	 1			  1		  1		9-Bits

	case USART_DATA_LEGNTH_5BIT:
		UCSRC |= (1<<7);
     c74:	a0 e4       	ldi	r26, 0x40	; 64
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e0 e4       	ldi	r30, 0x40	; 64
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 68       	ori	r24, 0x80	; 128
     c80:	8c 93       	st	X, r24
		USART->UCSRB &= ~(1<<2);
     c82:	a9 e2       	ldi	r26, 0x29	; 41
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e9 e2       	ldi	r30, 0x29	; 41
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	81 81       	ldd	r24, Z+1	; 0x01
     c8c:	8b 7f       	andi	r24, 0xFB	; 251
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	8c 93       	st	X, r24
		UCSRC &= ~(1<<1);
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e0 e4       	ldi	r30, 0x40	; 64
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8d 7f       	andi	r24, 0xFD	; 253
     c9e:	8c 93       	st	X, r24
		UCSRC &= ~(1<<2);
     ca0:	a0 e4       	ldi	r26, 0x40	; 64
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e0 e4       	ldi	r30, 0x40	; 64
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8b 7f       	andi	r24, 0xFB	; 251
     cac:	8c 93       	st	X, r24
     cae:	77 c0       	rjmp	.+238    	; 0xd9e <MCAL_USART_Init+0x258>
		break;

	case USART_DATA_LEGNTH_6BIT:
		UCSRC |= (1<<7);
     cb0:	a0 e4       	ldi	r26, 0x40	; 64
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e0 e4       	ldi	r30, 0x40	; 64
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 68       	ori	r24, 0x80	; 128
     cbc:	8c 93       	st	X, r24
		USART->UCSRB &= ~(1<<2);
     cbe:	a9 e2       	ldi	r26, 0x29	; 41
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e9 e2       	ldi	r30, 0x29	; 41
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	81 81       	ldd	r24, Z+1	; 0x01
     cc8:	8b 7f       	andi	r24, 0xFB	; 251
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	8c 93       	st	X, r24
		UCSRC |= (1<<1);
     cce:	a0 e4       	ldi	r26, 0x40	; 64
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e0 e4       	ldi	r30, 0x40	; 64
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	8c 93       	st	X, r24
		UCSRC &= ~(1<<2);
     cdc:	a0 e4       	ldi	r26, 0x40	; 64
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e0 e4       	ldi	r30, 0x40	; 64
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8b 7f       	andi	r24, 0xFB	; 251
     ce8:	8c 93       	st	X, r24
     cea:	59 c0       	rjmp	.+178    	; 0xd9e <MCAL_USART_Init+0x258>
		break;

	case USART_DATA_LEGNTH_7BIT:
		UCSRC |= (1<<7);
     cec:	a0 e4       	ldi	r26, 0x40	; 64
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e0 e4       	ldi	r30, 0x40	; 64
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	8c 93       	st	X, r24
		USART->UCSRB &= ~(1<<2);
     cfa:	a9 e2       	ldi	r26, 0x29	; 41
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 e2       	ldi	r30, 0x29	; 41
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	8c 93       	st	X, r24
		UCSRC &= ~(1<<1);
     d0a:	a0 e4       	ldi	r26, 0x40	; 64
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e0 e4       	ldi	r30, 0x40	; 64
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8d 7f       	andi	r24, 0xFD	; 253
     d16:	8c 93       	st	X, r24
		UCSRC |= (1<<2);
     d18:	a0 e4       	ldi	r26, 0x40	; 64
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e0 e4       	ldi	r30, 0x40	; 64
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	84 60       	ori	r24, 0x04	; 4
     d24:	8c 93       	st	X, r24
     d26:	3b c0       	rjmp	.+118    	; 0xd9e <MCAL_USART_Init+0x258>
		break;

	case USART_DATA_LEGNTH_8BIT:
		UCSRC |= (1<<7);
     d28:	a0 e4       	ldi	r26, 0x40	; 64
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e0 e4       	ldi	r30, 0x40	; 64
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	8c 93       	st	X, r24
		USART->UCSRB &= ~(1<<2);
     d36:	a9 e2       	ldi	r26, 0x29	; 41
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e9 e2       	ldi	r30, 0x29	; 41
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	8b 7f       	andi	r24, 0xFB	; 251
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	8c 93       	st	X, r24
		UCSRC |= (1<<1);
     d46:	a0 e4       	ldi	r26, 0x40	; 64
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e0 e4       	ldi	r30, 0x40	; 64
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	82 60       	ori	r24, 0x02	; 2
     d52:	8c 93       	st	X, r24
		UCSRC |= (1<<2);
     d54:	a0 e4       	ldi	r26, 0x40	; 64
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e0 e4       	ldi	r30, 0x40	; 64
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	8c 93       	st	X, r24
     d62:	1d c0       	rjmp	.+58     	; 0xd9e <MCAL_USART_Init+0x258>
		break;

	case USART_DATA_LEGNTH_9BIT:
		UCSRC |= (1<<7);
     d64:	a0 e4       	ldi	r26, 0x40	; 64
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e0 e4       	ldi	r30, 0x40	; 64
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	8c 93       	st	X, r24
		USART->UCSRB |= (1<<2);
     d72:	a9 e2       	ldi	r26, 0x29	; 41
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e9 e2       	ldi	r30, 0x29	; 41
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	84 60       	ori	r24, 0x04	; 4
     d7e:	11 96       	adiw	r26, 0x01	; 1
     d80:	8c 93       	st	X, r24
		UCSRC |= (1<<1);
     d82:	a0 e4       	ldi	r26, 0x40	; 64
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e0 e4       	ldi	r30, 0x40	; 64
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	8c 93       	st	X, r24
		UCSRC |= (1<<2);
     d90:	a0 e4       	ldi	r26, 0x40	; 64
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e0 e4       	ldi	r30, 0x40	; 64
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
		break;

	}
	//Configure Stop Bits
	switch (USART_Config->Stop_Bits)
     d9e:	e9 81       	ldd	r30, Y+1	; 0x01
     da0:	fa 81       	ldd	r31, Y+2	; 0x02
     da2:	87 81       	ldd	r24, Z+7	; 0x07
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	3e 83       	std	Y+6, r19	; 0x06
     daa:	2d 83       	std	Y+5, r18	; 0x05
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	31 f0       	breq	.+12     	; 0xdc0 <MCAL_USART_Init+0x27a>
     db4:	ed 81       	ldd	r30, Y+5	; 0x05
     db6:	fe 81       	ldd	r31, Y+6	; 0x06
     db8:	e1 30       	cpi	r30, 0x01	; 1
     dba:	f1 05       	cpc	r31, r1
     dbc:	81 f0       	breq	.+32     	; 0xdde <MCAL_USART_Init+0x298>
     dbe:	1d c0       	rjmp	.+58     	; 0xdfa <MCAL_USART_Init+0x2b4>
	{
	//	Bit 3 – USBS: Stop Bit Select
	//	0 : 1 Bit
	//	1 : 2 Bit
	case USART_StopBits_1:
		UCSRC |= (1<<7);
     dc0:	a0 e4       	ldi	r26, 0x40	; 64
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e0 e4       	ldi	r30, 0x40	; 64
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	8c 93       	st	X, r24
		UCSRC &= ~(1<<3);
     dce:	a0 e4       	ldi	r26, 0x40	; 64
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e0 e4       	ldi	r30, 0x40	; 64
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	87 7f       	andi	r24, 0xF7	; 247
     dda:	8c 93       	st	X, r24
     ddc:	0e c0       	rjmp	.+28     	; 0xdfa <MCAL_USART_Init+0x2b4>
		break;

	case USART_StopBits_2:
		UCSRC |= (1<<7);
     dde:	a0 e4       	ldi	r26, 0x40	; 64
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e0 e4       	ldi	r30, 0x40	; 64
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	80 68       	ori	r24, 0x80	; 128
     dea:	8c 93       	st	X, r24
		UCSRC |= (1<<3);
     dec:	a0 e4       	ldi	r26, 0x40	; 64
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e0 e4       	ldi	r30, 0x40	; 64
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	88 60       	ori	r24, 0x08	; 8
     df8:	8c 93       	st	X, r24
		break;
	}
	//Choose Mode
	if(USART_Config->USART_MODE == USART_MODE_Synchronous )
     dfa:	e9 81       	ldd	r30, Y+1	; 0x01
     dfc:	fa 81       	ldd	r31, Y+2	; 0x02
     dfe:	80 81       	ld	r24, Z
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	79 f4       	brne	.+30     	; 0xe22 <MCAL_USART_Init+0x2dc>
	{
		UCSRC |= (1<<7);
     e04:	a0 e4       	ldi	r26, 0x40	; 64
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e0 e4       	ldi	r30, 0x40	; 64
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 68       	ori	r24, 0x80	; 128
     e10:	8c 93       	st	X, r24
		UCSRC |= (1<<6);
     e12:	a0 e4       	ldi	r26, 0x40	; 64
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e0 e4       	ldi	r30, 0x40	; 64
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 64       	ori	r24, 0x40	; 64
     e1e:	8c 93       	st	X, r24
     e20:	13 c0       	rjmp	.+38     	; 0xe48 <MCAL_USART_Init+0x302>
	}
	else if (USART_Config->USART_MODE == USART_MODE_Asynchronous )
     e22:	e9 81       	ldd	r30, Y+1	; 0x01
     e24:	fa 81       	ldd	r31, Y+2	; 0x02
     e26:	80 81       	ld	r24, Z
     e28:	88 23       	and	r24, r24
     e2a:	71 f4       	brne	.+28     	; 0xe48 <MCAL_USART_Init+0x302>
	{
		UCSRC |= (1<<7);
     e2c:	a0 e4       	ldi	r26, 0x40	; 64
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e0 e4       	ldi	r30, 0x40	; 64
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	80 68       	ori	r24, 0x80	; 128
     e38:	8c 93       	st	X, r24
		UCSRC &= ~(1<<6);
     e3a:	a0 e4       	ldi	r26, 0x40	; 64
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e0 e4       	ldi	r30, 0x40	; 64
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 7b       	andi	r24, 0xBF	; 191
     e46:	8c 93       	st	X, r24
	}

	//Configure Interrupt
	switch (USART_Config->IRQ_Enable)
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	80 85       	ldd	r24, Z+8	; 0x08
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3c 83       	std	Y+4, r19	; 0x04
     e54:	2b 83       	std	Y+3, r18	; 0x03
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <MCAL_USART_Init+0x31c>
     e60:	47 c0       	rjmp	.+142    	; 0xef0 <MCAL_USART_Init+0x3aa>
     e62:	eb 81       	ldd	r30, Y+3	; 0x03
     e64:	fc 81       	ldd	r31, Y+4	; 0x04
     e66:	e2 30       	cpi	r30, 0x02	; 2
     e68:	f1 05       	cpc	r31, r1
     e6a:	34 f4       	brge	.+12     	; 0xe78 <MCAL_USART_Init+0x332>
     e6c:	2b 81       	ldd	r18, Y+3	; 0x03
     e6e:	3c 81       	ldd	r19, Y+4	; 0x04
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	69 f0       	breq	.+26     	; 0xe90 <MCAL_USART_Init+0x34a>
     e76:	6b c0       	rjmp	.+214    	; 0xf4e <MCAL_USART_Init+0x408>
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	91 05       	cpc	r25, r1
     e80:	f9 f0       	breq	.+62     	; 0xec0 <MCAL_USART_Init+0x37a>
     e82:	eb 81       	ldd	r30, Y+3	; 0x03
     e84:	fc 81       	ldd	r31, Y+4	; 0x04
     e86:	e3 30       	cpi	r30, 0x03	; 3
     e88:	f1 05       	cpc	r31, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <MCAL_USART_Init+0x348>
     e8c:	49 c0       	rjmp	.+146    	; 0xf20 <MCAL_USART_Init+0x3da>
     e8e:	5f c0       	rjmp	.+190    	; 0xf4e <MCAL_USART_Init+0x408>
	{
	case USART_IRQ_DISABLED:
		USART->UCSRB &= ~(1<<7);
     e90:	a9 e2       	ldi	r26, 0x29	; 41
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e9 e2       	ldi	r30, 0x29	; 41
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	8f 77       	andi	r24, 0x7F	; 127
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	8c 93       	st	X, r24
		USART->UCSRB &= ~(1<<6);
     ea0:	a9 e2       	ldi	r26, 0x29	; 41
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e9 e2       	ldi	r30, 0x29	; 41
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	81 81       	ldd	r24, Z+1	; 0x01
     eaa:	8f 7b       	andi	r24, 0xBF	; 191
     eac:	11 96       	adiw	r26, 0x01	; 1
     eae:	8c 93       	st	X, r24
		DISABLE_GLOBAL_INTERRUPT();
     eb0:	af e5       	ldi	r26, 0x5F	; 95
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ef e5       	ldi	r30, 0x5F	; 95
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 77       	andi	r24, 0x7F	; 127
     ebc:	8c 93       	st	X, r24
     ebe:	47 c0       	rjmp	.+142    	; 0xf4e <MCAL_USART_Init+0x408>
		break;
	case USART_IRQ_EN_RXCIE:
		USART->UCSRB |= (1<<7);
     ec0:	a9 e2       	ldi	r26, 0x29	; 41
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e9 e2       	ldi	r30, 0x29	; 41
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	81 81       	ldd	r24, Z+1	; 0x01
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	11 96       	adiw	r26, 0x01	; 1
     ece:	8c 93       	st	X, r24
		USART->UCSRB &= ~(1<<6);
     ed0:	a9 e2       	ldi	r26, 0x29	; 41
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e9 e2       	ldi	r30, 0x29	; 41
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	81 81       	ldd	r24, Z+1	; 0x01
     eda:	8f 7b       	andi	r24, 0xBF	; 191
     edc:	11 96       	adiw	r26, 0x01	; 1
     ede:	8c 93       	st	X, r24
		ENABLE_GLOBAL_INTERRUPT();
     ee0:	af e5       	ldi	r26, 0x5F	; 95
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	ef e5       	ldi	r30, 0x5F	; 95
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 68       	ori	r24, 0x80	; 128
     eec:	8c 93       	st	X, r24
     eee:	2f c0       	rjmp	.+94     	; 0xf4e <MCAL_USART_Init+0x408>
		break;
	case USART_IRQ_EN_TXCIE:
		USART->UCSRB &= ~(1<<7);
     ef0:	a9 e2       	ldi	r26, 0x29	; 41
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e9 e2       	ldi	r30, 0x29	; 41
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	8f 77       	andi	r24, 0x7F	; 127
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	8c 93       	st	X, r24
		USART->UCSRB |= (1<<6);
     f00:	a9 e2       	ldi	r26, 0x29	; 41
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e9 e2       	ldi	r30, 0x29	; 41
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	81 81       	ldd	r24, Z+1	; 0x01
     f0a:	80 64       	ori	r24, 0x40	; 64
     f0c:	11 96       	adiw	r26, 0x01	; 1
     f0e:	8c 93       	st	X, r24
		ENABLE_GLOBAL_INTERRUPT();
     f10:	af e5       	ldi	r26, 0x5F	; 95
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ef e5       	ldi	r30, 0x5F	; 95
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 68       	ori	r24, 0x80	; 128
     f1c:	8c 93       	st	X, r24
     f1e:	17 c0       	rjmp	.+46     	; 0xf4e <MCAL_USART_Init+0x408>
		break;
	case USART_IRQ_EN_TXCIE_RXCIE:
		USART->UCSRB |= (1<<7);
     f20:	a9 e2       	ldi	r26, 0x29	; 41
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e9 e2       	ldi	r30, 0x29	; 41
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	81 81       	ldd	r24, Z+1	; 0x01
     f2a:	80 68       	ori	r24, 0x80	; 128
     f2c:	11 96       	adiw	r26, 0x01	; 1
     f2e:	8c 93       	st	X, r24
		USART->UCSRB |= (1<<6);
     f30:	a9 e2       	ldi	r26, 0x29	; 41
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e9 e2       	ldi	r30, 0x29	; 41
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	81 81       	ldd	r24, Z+1	; 0x01
     f3a:	80 64       	ori	r24, 0x40	; 64
     f3c:	11 96       	adiw	r26, 0x01	; 1
     f3e:	8c 93       	st	X, r24
		ENABLE_GLOBAL_INTERRUPT();
     f40:	af e5       	ldi	r26, 0x5F	; 95
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ef e5       	ldi	r30, 0x5F	; 95
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	8c 93       	st	X, r24

	}

	//----Enable Peripheral
	//Enable Receiver
	USART->UCSRB |= (1<<4);
     f4e:	a9 e2       	ldi	r26, 0x29	; 41
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e9 e2       	ldi	r30, 0x29	; 41
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	81 81       	ldd	r24, Z+1	; 0x01
     f58:	80 61       	ori	r24, 0x10	; 16
     f5a:	11 96       	adiw	r26, 0x01	; 1
     f5c:	8c 93       	st	X, r24
	//Enable Transmitter
	USART->UCSRB |= (1<<3);
     f5e:	a9 e2       	ldi	r26, 0x29	; 41
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e9 e2       	ldi	r30, 0x29	; 41
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	81 81       	ldd	r24, Z+1	; 0x01
     f68:	88 60       	ori	r24, 0x08	; 8
     f6a:	11 96       	adiw	r26, 0x01	; 1
     f6c:	8c 93       	st	X, r24
     f6e:	11 97       	sbiw	r26, 0x01	; 1


}
     f70:	2a 96       	adiw	r28, 0x0a	; 10
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <MCAL_USART_SEND>:
 * @param [in] 	-Polling : Polling Mode
 * @retval 		-None
 * Note 		-None
 */
void MCAL_USART_SEND(uint8_t TxBuffer , Polling_Mechanism_t Polling,  Blocking_Mechanism_t Blocking_state)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <MCAL_USART_SEND+0x6>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <MCAL_USART_SEND+0x8>
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	6a 83       	std	Y+2, r22	; 0x02
     f92:	4b 83       	std	Y+3, r20	; 0x03
	if(Polling == Polling_ENABLED)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	88 23       	and	r24, r24
     f98:	39 f5       	brne	.+78     	; 0xfe8 <MCAL_USART_SEND+0x66>
	{
		while(!((USART->UCSRA>>5)&1));
     f9a:	e9 e2       	ldi	r30, 0x29	; 41
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	82 95       	swap	r24
     fa2:	86 95       	lsr	r24
     fa4:	87 70       	andi	r24, 0x07	; 7
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	90 70       	andi	r25, 0x00	; 0
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	a1 f3       	breq	.-24     	; 0xf9a <MCAL_USART_SEND+0x18>

		if((USART->UCSRB>>2)&1)
     fb2:	e9 e2       	ldi	r30, 0x29	; 41
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	81 81       	ldd	r24, Z+1	; 0x01
     fb8:	86 95       	lsr	r24
     fba:	86 95       	lsr	r24
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	81 70       	andi	r24, 0x01	; 1
     fc2:	90 70       	andi	r25, 0x00	; 0
     fc4:	88 23       	and	r24, r24
     fc6:	59 f0       	breq	.+22     	; 0xfde <MCAL_USART_SEND+0x5c>
		{
			//		Bit 0 – TXB8: Transmit Data Bit 8
			//		TXB8 is the ninth data bit in the character to be transmitted when operating with serial frames
			//		with nine data bits. Must be written before writing the low bits to UDR.
			USART->UCSRB &=((TxBuffer & (1<<8))>>8);
     fc8:	e9 e2       	ldi	r30, 0x29	; 41
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	81 81       	ldd	r24, Z+1	; 0x01
     fce:	e9 e2       	ldi	r30, 0x29	; 41
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	11 82       	std	Z+1, r1	; 0x01
			USART->UDR = ((uint8_t)TxBuffer);
     fd4:	e9 e2       	ldi	r30, 0x29	; 41
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	83 83       	std	Z+3, r24	; 0x03
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <MCAL_USART_SEND+0x74>
		}
		else
		{
			USART->UDR = ((uint8_t)TxBuffer);
     fde:	e9 e2       	ldi	r30, 0x29	; 41
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	83 83       	std	Z+3, r24	; 0x03
     fe6:	07 c0       	rjmp	.+14     	; 0xff6 <MCAL_USART_SEND+0x74>
		}
	}

	else if (Blocking_state == No_Blocking)
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	21 f4       	brne	.+8      	; 0xff6 <MCAL_USART_SEND+0x74>
	{

			USART->UDR = ((uint8_t)TxBuffer);
     fee:	e9 e2       	ldi	r30, 0x29	; 41
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	83 83       	std	Z+3, r24	; 0x03



	}
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <MCAL_USART_RECEIVE>:
 * for example: if you want to use Polling enable, you should select the blocking "Blocking"...and so on
 *  and if you want to use Polling disable, you should select the blocking "No Blocking"...and so on
 *
 */
uint8_t MCAL_USART_RECEIVE (uint8_t* PtrRxBuffer,Polling_Mechanism_t Polling, Blocking_Mechanism_t Blocking_state)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <MCAL_USART_RECEIVE+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <MCAL_USART_RECEIVE+0x8>
    100c:	00 d0       	rcall	.+0      	; 0x100e <MCAL_USART_RECEIVE+0xa>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	6b 83       	std	Y+3, r22	; 0x03
    1018:	4c 83       	std	Y+4, r20	; 0x04
	if (Polling == Polling_ENABLED)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 23       	and	r24, r24
    101e:	a1 f5       	brne	.+104    	; 0x1088 <MCAL_USART_RECEIVE+0x84>
	{
		while(!((USART->UCSRA)&(1<<7)));
    1020:	e9 e2       	ldi	r30, 0x29	; 41
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	88 23       	and	r24, r24
    1028:	dc f7       	brge	.-10     	; 0x1020 <MCAL_USART_RECEIVE+0x1c>

		if((USART->UCSRB & (1<<2)))
    102a:	e9 e2       	ldi	r30, 0x29	; 41
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	81 81       	ldd	r24, Z+1	; 0x01
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	84 70       	andi	r24, 0x04	; 4
    1036:	90 70       	andi	r25, 0x00	; 0
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	f9 f0       	breq	.+62     	; 0x107a <MCAL_USART_RECEIVE+0x76>
		{
			// Bit 1 – RXB8: Receive Data Bit 8
			// RXB8 is the ninth data bit of the received character when operating with serial frames with nine
			// data bits. Must be read before reading the low bits from UDR.
			*PtrRxBuffer |= ((USART->UCSRB & (1<<1)) << 7); // Correctly mask and shift the 9th bit
    103c:	e9 81       	ldd	r30, Y+1	; 0x01
    103e:	fa 81       	ldd	r31, Y+2	; 0x02
    1040:	80 81       	ld	r24, Z
    1042:	28 2f       	mov	r18, r24
    1044:	e9 e2       	ldi	r30, 0x29	; 41
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	81 81       	ldd	r24, Z+1	; 0x01
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	82 70       	andi	r24, 0x02	; 2
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	96 95       	lsr	r25
    1054:	98 2f       	mov	r25, r24
    1056:	88 27       	eor	r24, r24
    1058:	97 95       	ror	r25
    105a:	87 95       	ror	r24
    105c:	82 2b       	or	r24, r18
    105e:	e9 81       	ldd	r30, Y+1	; 0x01
    1060:	fa 81       	ldd	r31, Y+2	; 0x02
    1062:	80 83       	st	Z, r24
			*PtrRxBuffer |= USART->UDR;
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	90 81       	ld	r25, Z
    106a:	e9 e2       	ldi	r30, 0x29	; 41
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	83 81       	ldd	r24, Z+3	; 0x03
    1070:	89 2b       	or	r24, r25
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	80 83       	st	Z, r24
    1078:	1a c0       	rjmp	.+52     	; 0x10ae <MCAL_USART_RECEIVE+0xaa>
		}

		else
		{
			*PtrRxBuffer = USART->UDR;
    107a:	e9 e2       	ldi	r30, 0x29	; 41
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	83 81       	ldd	r24, Z+3	; 0x03
    1080:	e9 81       	ldd	r30, Y+1	; 0x01
    1082:	fa 81       	ldd	r31, Y+2	; 0x02
    1084:	80 83       	st	Z, r24
    1086:	13 c0       	rjmp	.+38     	; 0x10ae <MCAL_USART_RECEIVE+0xaa>
		}


	}

	else if (Blocking_state == No_Blocking)
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	81 f4       	brne	.+32     	; 0x10ae <MCAL_USART_RECEIVE+0xaa>
	{
		if(((USART->UCSRA)&(1<<7)))
    108e:	e9 e2       	ldi	r30, 0x29	; 41
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	88 23       	and	r24, r24
    1096:	4c f4       	brge	.+18     	; 0x10aa <MCAL_USART_RECEIVE+0xa6>
		{
			*PtrRxBuffer = USART->UDR;
    1098:	e9 e2       	ldi	r30, 0x29	; 41
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	83 81       	ldd	r24, Z+3	; 0x03
    109e:	e9 81       	ldd	r30, Y+1	; 0x01
    10a0:	fa 81       	ldd	r31, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
			return 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <MCAL_USART_RECEIVE+0xac>
		}
		return 0;
    10aa:	1d 82       	std	Y+5, r1	; 0x05
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <MCAL_USART_RECEIVE+0xac>
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <MCAL_USART_RECEIVE+0xb0>
	}


}
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	8e 83       	std	Y+6, r24	; 0x06
    10b4:	8e 81       	ldd	r24, Y+6	; 0x06
    10b6:	26 96       	adiw	r28, 0x06	; 6
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <MCAL_USART_SendString>:
 * @retval 		-None
 * Note 		-None
 */

void MCAL_USART_SendString(uint8_t* PtrTxBuffer)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <MCAL_USART_SendString+0x6>
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	9b 83       	std	Y+3, r25	; 0x03
    10d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0 ;
    10d8:	19 82       	std	Y+1, r1	; 0x01
    10da:	10 c0       	rjmp	.+32     	; 0x10fc <MCAL_USART_SendString+0x34>

	while (PtrTxBuffer[i] != '\0')
	{
		MCAL_USART_SEND(PtrTxBuffer[i],Polling_ENABLED,Blocking);
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	80 81       	ld	r24, Z
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 c1 07 	call	0xf82	; 0xf82 <MCAL_USART_SEND>
		i++;
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	89 83       	std	Y+1, r24	; 0x01

void MCAL_USART_SendString(uint8_t* PtrTxBuffer)
{
	uint8_t i = 0 ;

	while (PtrTxBuffer[i] != '\0')
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	9b 81       	ldd	r25, Y+3	; 0x03
    1106:	fc 01       	movw	r30, r24
    1108:	e2 0f       	add	r30, r18
    110a:	f3 1f       	adc	r31, r19
    110c:	80 81       	ld	r24, Z
    110e:	88 23       	and	r24, r24
    1110:	29 f7       	brne	.-54     	; 0x10dc <MCAL_USART_SendString+0x14>
	{
		MCAL_USART_SEND(PtrTxBuffer[i],Polling_ENABLED,Blocking);
		i++;
	}
	MCAL_USART_SEND('\r',Polling_ENABLED,Blocking);
    1112:	8d e0       	ldi	r24, 0x0D	; 13
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	0e 94 c1 07 	call	0xf82	; 0xf82 <MCAL_USART_SEND>


}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <MCAL_USART_ReceiveString>:
 * @retval 		-None
 * Note 		-None
 */

void MCAL_USART_ReceiveString(uint8_t* PtrRxBuffer)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <MCAL_USART_ReceiveString+0x6>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
	MCAL_USART_RECEIVE(PtrRxBuffer,Polling_ENABLED,Blocking);
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 02 08 	call	0x1004	; 0x1004 <MCAL_USART_RECEIVE>
    1142:	0b c0       	rjmp	.+22     	; 0x115a <MCAL_USART_ReceiveString+0x32>
	while(*PtrRxBuffer != '\r')
	{
		PtrRxBuffer++;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
		MCAL_USART_RECEIVE(PtrRxBuffer,Polling_ENABLED,Blocking);
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	0e 94 02 08 	call	0x1004	; 0x1004 <MCAL_USART_RECEIVE>
 */

void MCAL_USART_ReceiveString(uint8_t* PtrRxBuffer)
{
	MCAL_USART_RECEIVE(PtrRxBuffer,Polling_ENABLED,Blocking);
	while(*PtrRxBuffer != '\r')
    115a:	e9 81       	ldd	r30, Y+1	; 0x01
    115c:	fa 81       	ldd	r31, Y+2	; 0x02
    115e:	80 81       	ld	r24, Z
    1160:	8d 30       	cpi	r24, 0x0D	; 13
    1162:	81 f7       	brne	.-32     	; 0x1144 <MCAL_USART_ReceiveString+0x1c>
		PtrRxBuffer++;
		MCAL_USART_RECEIVE(PtrRxBuffer,Polling_ENABLED,Blocking);

	}

	*PtrRxBuffer = '\0';
    1164:	e9 81       	ldd	r30, Y+1	; 0x01
    1166:	fa 81       	ldd	r31, Y+2	; 0x02
    1168:	10 82       	st	Z, r1

}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <MCAL_USART_SendStr_Aysnch>:


//You Should enable UART_Tx_IRQ for this func..........
//for using this func correctly, please use this func one time in main func  out of the loop ''while(1)''........... .
void MCAL_USART_SendStr_Aysnch(uint8_t* str)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <MCAL_USART_SendStr_Aysnch+0x6>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
	if(flag_send == 1)
    1182:	80 91 68 00 	lds	r24, 0x0068
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	79 f4       	brne	.+30     	; 0x11a8 <MCAL_USART_SendStr_Aysnch+0x34>
	{
		MCAL_USART_SEND(str[0] ,Polling_DISABLED,  No_Blocking);
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	80 81       	ld	r24, Z
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	0e 94 c1 07 	call	0xf82	; 0xf82 <MCAL_USART_SEND>
		Tx_Str=str;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	90 93 7b 00 	sts	0x007B, r25
    11a0:	80 93 7a 00 	sts	0x007A, r24
		flag_send=0;
    11a4:	10 92 68 00 	sts	0x0068, r1
	}


}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <MCAL_USART_SStr_ISR>:


//this func that you use it with MCAL_USART_SendStr_Aysnch for activating it,only pass it this func to config in uart :	void (* Ptr_IRQ_CallBack)(void)
void MCAL_USART_SStr_ISR(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	static uint8_t c=1;
	if(Tx_Str[c] != 0)
    11ba:	20 91 7a 00 	lds	r18, 0x007A
    11be:	30 91 7b 00 	lds	r19, 0x007B
    11c2:	80 91 69 00 	lds	r24, 0x0069
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	f9 01       	movw	r30, r18
    11cc:	e8 0f       	add	r30, r24
    11ce:	f9 1f       	adc	r31, r25
    11d0:	80 81       	ld	r24, Z
    11d2:	88 23       	and	r24, r24
    11d4:	b1 f0       	breq	.+44     	; 0x1202 <MCAL_USART_SStr_ISR+0x50>
	{
		MCAL_USART_SEND(Tx_Str[c] ,Polling_DISABLED,  No_Blocking);
    11d6:	20 91 7a 00 	lds	r18, 0x007A
    11da:	30 91 7b 00 	lds	r19, 0x007B
    11de:	80 91 69 00 	lds	r24, 0x0069
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	f9 01       	movw	r30, r18
    11e8:	e8 0f       	add	r30, r24
    11ea:	f9 1f       	adc	r31, r25
    11ec:	80 81       	ld	r24, Z
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 c1 07 	call	0xf82	; 0xf82 <MCAL_USART_SEND>
		c++;
    11f6:	80 91 69 00 	lds	r24, 0x0069
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	80 93 69 00 	sts	0x0069, r24
    1200:	06 c0       	rjmp	.+12     	; 0x120e <MCAL_USART_SStr_ISR+0x5c>

	}
	else
	{
		flag_send=1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	80 93 68 00 	sts	0x0068, r24
		c=1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 69 00 	sts	0x0069, r24
	}
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <ISR>:


//please change  USART_#####_vect base on TXC OR RXC OR.....according to IVT IRQ OF USRT.......
ISR(USART_TXC_vect)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <ISR+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <ISR+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01

	GL_USART_Config->Ptr_IRQ_CallBack();
    1224:	e0 91 7c 00 	lds	r30, 0x007C
    1228:	f0 91 7d 00 	lds	r31, 0x007D
    122c:	01 84       	ldd	r0, Z+9	; 0x09
    122e:	f2 85       	ldd	r31, Z+10	; 0x0a
    1230:	e0 2d       	mov	r30, r0
    1232:	09 95       	icall

}
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <MCAL_SPI_Init>:
void (* GPtr_Ptr_IRQ_CB)(void);



void MCAL_SPI_Init(SPI_Config_t* SPI_config)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	2e 97       	sbiw	r28, 0x0e	; 14
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	8b 83       	std	Y+3, r24	; 0x03


	//SPI_MODE
	GPIO_PinConfig_t gpio_confg;
	switch(SPI_config->SPI_MODE)
    125a:	eb 81       	ldd	r30, Y+3	; 0x03
    125c:	fc 81       	ldd	r31, Y+4	; 0x04
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3e 87       	std	Y+14, r19	; 0x0e
    1266:	2d 87       	std	Y+13, r18	; 0x0d
    1268:	8d 85       	ldd	r24, Y+13	; 0x0d
    126a:	9e 85       	ldd	r25, Y+14	; 0x0e
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	09 f4       	brne	.+2      	; 0x1272 <MCAL_SPI_Init+0x30>
    1270:	44 c0       	rjmp	.+136    	; 0x12fa <MCAL_SPI_Init+0xb8>
    1272:	2d 85       	ldd	r18, Y+13	; 0x0d
    1274:	3e 85       	ldd	r19, Y+14	; 0x0e
    1276:	21 30       	cpi	r18, 0x01	; 1
    1278:	31 05       	cpc	r19, r1
    127a:	09 f0       	breq	.+2      	; 0x127e <MCAL_SPI_Init+0x3c>
    127c:	75 c0       	rjmp	.+234    	; 0x1368 <MCAL_SPI_Init+0x126>
	{

		case (SPI_MODE_MASTER):

			gpio_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	8a 83       	std	Y+2, r24	; 0x02
			gpio_confg.GPIO_PinNumber=SS;
    1282:	80 e1       	ldi	r24, 0x10	; 16
    1284:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_Init(GPIOB,&gpio_confg);
    1286:	86 e3       	ldi	r24, 0x36	; 54
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9e 01       	movw	r18, r28
    128c:	2f 5f       	subi	r18, 0xFF	; 255
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	b9 01       	movw	r22, r18
    1292:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

			gpio_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	8a 83       	std	Y+2, r24	; 0x02
			gpio_confg.GPIO_PinNumber=MOSI;
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_Init(GPIOB,&gpio_confg);
    129e:	86 e3       	ldi	r24, 0x36	; 54
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9e 01       	movw	r18, r28
    12a4:	2f 5f       	subi	r18, 0xFF	; 255
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	b9 01       	movw	r22, r18
    12aa:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

			gpio_confg.GPIO_Mode=GPIO_Mode_Inp_Floating;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	8a 83       	std	Y+2, r24	; 0x02
			gpio_confg.GPIO_PinNumber=MISO;
    12b2:	80 e4       	ldi	r24, 0x40	; 64
    12b4:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_Init(GPIOB,&gpio_confg);
    12b6:	86 e3       	ldi	r24, 0x36	; 54
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9e 01       	movw	r18, r28
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	b9 01       	movw	r22, r18
    12c2:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


			gpio_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	8a 83       	std	Y+2, r24	; 0x02
			gpio_confg.GPIO_PinNumber=SCK;
    12ca:	80 e8       	ldi	r24, 0x80	; 128
    12cc:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_Init(GPIOB,&gpio_confg);
    12ce:	86 e3       	ldi	r24, 0x36	; 54
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9e 01       	movw	r18, r28
    12d4:	2f 5f       	subi	r18, 0xFF	; 255
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	b9 01       	movw	r22, r18
    12da:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

			MCAL_GPIO_WritePin(GPIOB,SS,1);
    12de:	86 e3       	ldi	r24, 0x36	; 54
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	60 e1       	ldi	r22, 0x10	; 16
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
			SPI->SPCR |= (1 << 4);
    12ea:	ad e2       	ldi	r26, 0x2D	; 45
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ed e2       	ldi	r30, 0x2D	; 45
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 61       	ori	r24, 0x10	; 16
    12f6:	8c 93       	st	X, r24
    12f8:	37 c0       	rjmp	.+110    	; 0x1368 <MCAL_SPI_Init+0x126>

			break;

		case (SPI_MODE_SLAVE):

			gpio_confg.GPIO_Mode=GPIO_Mode_Inp_Floating;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8a 83       	std	Y+2, r24	; 0x02
			gpio_confg.GPIO_PinNumber=SS;
    12fe:	80 e1       	ldi	r24, 0x10	; 16
    1300:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_Init(GPIOB,&gpio_confg);
    1302:	86 e3       	ldi	r24, 0x36	; 54
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9e 01       	movw	r18, r28
    1308:	2f 5f       	subi	r18, 0xFF	; 255
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	b9 01       	movw	r22, r18
    130e:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

			gpio_confg.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	8a 83       	std	Y+2, r24	; 0x02
			gpio_confg.GPIO_PinNumber=MOSI;
    1316:	80 e2       	ldi	r24, 0x20	; 32
    1318:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_Init(GPIOB,&gpio_confg);
    131a:	86 e3       	ldi	r24, 0x36	; 54
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9e 01       	movw	r18, r28
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	b9 01       	movw	r22, r18
    1326:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

			gpio_confg.GPIO_Mode=GPIO_Mode_Out_push_pull;
    132a:	83 e0       	ldi	r24, 0x03	; 3
    132c:	8a 83       	std	Y+2, r24	; 0x02
			gpio_confg.GPIO_PinNumber=MISO;
    132e:	80 e4       	ldi	r24, 0x40	; 64
    1330:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_Init(GPIOB,&gpio_confg);
    1332:	86 e3       	ldi	r24, 0x36	; 54
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9e 01       	movw	r18, r28
    1338:	2f 5f       	subi	r18, 0xFF	; 255
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	b9 01       	movw	r22, r18
    133e:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

			gpio_confg.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	8a 83       	std	Y+2, r24	; 0x02
			gpio_confg.GPIO_PinNumber=SCK;
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_Init(GPIOB,&gpio_confg);
    134a:	86 e3       	ldi	r24, 0x36	; 54
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9e 01       	movw	r18, r28
    1350:	2f 5f       	subi	r18, 0xFF	; 255
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	b9 01       	movw	r22, r18
    1356:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>
			SPI->SPCR &= ~(1 << 4);
    135a:	ad e2       	ldi	r26, 0x2D	; 45
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ed e2       	ldi	r30, 0x2D	; 45
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8f 7e       	andi	r24, 0xEF	; 239
    1366:	8c 93       	st	X, r24

			break;
	}

	//Data_Order
	switch(SPI_config->Data_Order)
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04
    136c:	81 81       	ldd	r24, Z+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3c 87       	std	Y+12, r19	; 0x0c
    1374:	2b 87       	std	Y+11, r18	; 0x0b
    1376:	8b 85       	ldd	r24, Y+11	; 0x0b
    1378:	9c 85       	ldd	r25, Y+12	; 0x0c
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	69 f0       	breq	.+26     	; 0x1398 <MCAL_SPI_Init+0x156>
    137e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1380:	3c 85       	ldd	r19, Y+12	; 0x0c
    1382:	21 30       	cpi	r18, 0x01	; 1
    1384:	31 05       	cpc	r19, r1
    1386:	79 f4       	brne	.+30     	; 0x13a6 <MCAL_SPI_Init+0x164>
	{

		case (Data_Order_LSB_FIRST):
			SPI->SPCR |= (1 << 5);
    1388:	ad e2       	ldi	r26, 0x2D	; 45
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ed e2       	ldi	r30, 0x2D	; 45
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 62       	ori	r24, 0x20	; 32
    1394:	8c 93       	st	X, r24
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <MCAL_SPI_Init+0x164>
			break;
		case (Data_Order_MSB_FIRST):
			SPI->SPCR &= ~(1 << 5);
    1398:	ad e2       	ldi	r26, 0x2D	; 45
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	ed e2       	ldi	r30, 0x2D	; 45
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8f 7d       	andi	r24, 0xDF	; 223
    13a4:	8c 93       	st	X, r24
	   CPOL = 0, CPHA = 1 -------Setup  (Rising)  ------- Sample (Falling)  Mode1
	   CPOL = 1, CPHA = 0 -------Sample (Falling) ------- Setup  (Rising)   Mode2
	   CPOL = 1, CPHA = 1 -------Setup  (Falling) ------- Sample (Rising) 	Mode3

	*/
	switch(SPI_config->Data_Modes)
    13a6:	eb 81       	ldd	r30, Y+3	; 0x03
    13a8:	fc 81       	ldd	r31, Y+4	; 0x04
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	3a 87       	std	Y+10, r19	; 0x0a
    13b2:	29 87       	std	Y+9, r18	; 0x09
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	e9 f0       	breq	.+58     	; 0x13f8 <MCAL_SPI_Init+0x1b6>
    13be:	29 85       	ldd	r18, Y+9	; 0x09
    13c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <MCAL_SPI_Init+0x190>
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <MCAL_SPI_Init+0x1a6>
    13d0:	38 c0       	rjmp	.+112    	; 0x1442 <MCAL_SPI_Init+0x200>
    13d2:	29 85       	ldd	r18, Y+9	; 0x09
    13d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	e9 f0       	breq	.+58     	; 0x1416 <MCAL_SPI_Init+0x1d4>
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	39 f1       	breq	.+78     	; 0x1434 <MCAL_SPI_Init+0x1f2>
    13e6:	2d c0       	rjmp	.+90     	; 0x1442 <MCAL_SPI_Init+0x200>
	{

		case (Data_Mode0):
			SPI->SPCR &= ~((1 << 2) | (1 << 3));
    13e8:	ad e2       	ldi	r26, 0x2D	; 45
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ed e2       	ldi	r30, 0x2D	; 45
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	83 7f       	andi	r24, 0xF3	; 243
    13f4:	8c 93       	st	X, r24
    13f6:	25 c0       	rjmp	.+74     	; 0x1442 <MCAL_SPI_Init+0x200>
			break;

		case (Data_Mode1):
			SPI->SPCR |=  (1 << 2);
    13f8:	ad e2       	ldi	r26, 0x2D	; 45
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ed e2       	ldi	r30, 0x2D	; 45
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	84 60       	ori	r24, 0x04	; 4
    1404:	8c 93       	st	X, r24
			SPI->SPCR &= ~(1 << 3);
    1406:	ad e2       	ldi	r26, 0x2D	; 45
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ed e2       	ldi	r30, 0x2D	; 45
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	87 7f       	andi	r24, 0xF7	; 247
    1412:	8c 93       	st	X, r24
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <MCAL_SPI_Init+0x200>
		    break;

		case (Data_Mode2):
		    SPI->SPCR |=  (1 << 3);
    1416:	ad e2       	ldi	r26, 0x2D	; 45
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ed e2       	ldi	r30, 0x2D	; 45
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	88 60       	ori	r24, 0x08	; 8
    1422:	8c 93       	st	X, r24
			SPI->SPCR &= ~(1 << 2);
    1424:	ad e2       	ldi	r26, 0x2D	; 45
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ed e2       	ldi	r30, 0x2D	; 45
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8b 7f       	andi	r24, 0xFB	; 251
    1430:	8c 93       	st	X, r24
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <MCAL_SPI_Init+0x200>
			break;

		case (Data_Mode3):
			SPI->SPCR |= ((1 << 2) | (1 << 3));
    1434:	ad e2       	ldi	r26, 0x2D	; 45
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ed e2       	ldi	r30, 0x2D	; 45
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8c 60       	ori	r24, 0x0C	; 12
    1440:	8c 93       	st	X, r24
	   1        	0       	1         fosc/8
	   1         	1       	0         fosc/32
	   1         	1       	1         fosc/64
	 */

	switch(SPI_config->SPI_Clock_Rate)
    1442:	eb 81       	ldd	r30, Y+3	; 0x03
    1444:	fc 81       	ldd	r31, Y+4	; 0x04
    1446:	83 81       	ldd	r24, Z+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	38 87       	std	Y+8, r19	; 0x08
    144e:	2f 83       	std	Y+7, r18	; 0x07
    1450:	8f 81       	ldd	r24, Y+7	; 0x07
    1452:	98 85       	ldd	r25, Y+8	; 0x08
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	91 05       	cpc	r25, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <MCAL_SPI_Init+0x21a>
    145a:	70 c0       	rjmp	.+224    	; 0x153c <MCAL_SPI_Init+0x2fa>
    145c:	2f 81       	ldd	r18, Y+7	; 0x07
    145e:	38 85       	ldd	r19, Y+8	; 0x08
    1460:	24 30       	cpi	r18, 0x04	; 4
    1462:	31 05       	cpc	r19, r1
    1464:	84 f4       	brge	.+32     	; 0x1486 <MCAL_SPI_Init+0x244>
    1466:	8f 81       	ldd	r24, Y+7	; 0x07
    1468:	98 85       	ldd	r25, Y+8	; 0x08
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	91 05       	cpc	r25, r1
    146e:	b1 f1       	breq	.+108    	; 0x14dc <MCAL_SPI_Init+0x29a>
    1470:	2f 81       	ldd	r18, Y+7	; 0x07
    1472:	38 85       	ldd	r19, Y+8	; 0x08
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	0c f0       	brlt	.+2      	; 0x147c <MCAL_SPI_Init+0x23a>
    147a:	48 c0       	rjmp	.+144    	; 0x150c <MCAL_SPI_Init+0x2ca>
    147c:	8f 81       	ldd	r24, Y+7	; 0x07
    147e:	98 85       	ldd	r25, Y+8	; 0x08
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	a1 f0       	breq	.+40     	; 0x14ac <MCAL_SPI_Init+0x26a>
    1484:	ba c0       	rjmp	.+372    	; 0x15fa <MCAL_SPI_Init+0x3b8>
    1486:	2f 81       	ldd	r18, Y+7	; 0x07
    1488:	38 85       	ldd	r19, Y+8	; 0x08
    148a:	25 30       	cpi	r18, 0x05	; 5
    148c:	31 05       	cpc	r19, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <MCAL_SPI_Init+0x250>
    1490:	85 c0       	rjmp	.+266    	; 0x159c <MCAL_SPI_Init+0x35a>
    1492:	8f 81       	ldd	r24, Y+7	; 0x07
    1494:	98 85       	ldd	r25, Y+8	; 0x08
    1496:	85 30       	cpi	r24, 0x05	; 5
    1498:	91 05       	cpc	r25, r1
    149a:	0c f4       	brge	.+2      	; 0x149e <MCAL_SPI_Init+0x25c>
    149c:	67 c0       	rjmp	.+206    	; 0x156c <MCAL_SPI_Init+0x32a>
    149e:	2f 81       	ldd	r18, Y+7	; 0x07
    14a0:	38 85       	ldd	r19, Y+8	; 0x08
    14a2:	26 30       	cpi	r18, 0x06	; 6
    14a4:	31 05       	cpc	r19, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <MCAL_SPI_Init+0x268>
    14a8:	91 c0       	rjmp	.+290    	; 0x15cc <MCAL_SPI_Init+0x38a>
    14aa:	a7 c0       	rjmp	.+334    	; 0x15fa <MCAL_SPI_Init+0x3b8>
	{

		case (SPI_Clock_Rate_fosc_divided2):
			SPI->SPCR &=  ~(1<<0);
    14ac:	ad e2       	ldi	r26, 0x2D	; 45
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ed e2       	ldi	r30, 0x2D	; 45
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	8e 7f       	andi	r24, 0xFE	; 254
    14b8:	8c 93       	st	X, r24
			SPI->SPCR &=  ~(1<<1);
    14ba:	ad e2       	ldi	r26, 0x2D	; 45
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ed e2       	ldi	r30, 0x2D	; 45
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8d 7f       	andi	r24, 0xFD	; 253
    14c6:	8c 93       	st	X, r24
			SPI->SPSR |=   (1<<0);
    14c8:	ad e2       	ldi	r26, 0x2D	; 45
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ed e2       	ldi	r30, 0x2D	; 45
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	81 81       	ldd	r24, Z+1	; 0x01
    14d2:	81 60       	ori	r24, 0x01	; 1
    14d4:	11 96       	adiw	r26, 0x01	; 1
    14d6:	8c 93       	st	X, r24
    14d8:	11 97       	sbiw	r26, 0x01	; 1
    14da:	8f c0       	rjmp	.+286    	; 0x15fa <MCAL_SPI_Init+0x3b8>
			break;

		case (SPI_Clock_Rate_fosc_divided4):
			SPI->SPCR &=  ~(1<<0);
    14dc:	ad e2       	ldi	r26, 0x2D	; 45
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ed e2       	ldi	r30, 0x2D	; 45
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	8c 93       	st	X, r24
			SPI->SPCR &=  ~(1<<1);
    14ea:	ad e2       	ldi	r26, 0x2D	; 45
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ed e2       	ldi	r30, 0x2D	; 45
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8d 7f       	andi	r24, 0xFD	; 253
    14f6:	8c 93       	st	X, r24
			SPI->SPSR &=  ~(1<<0);
    14f8:	ad e2       	ldi	r26, 0x2D	; 45
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ed e2       	ldi	r30, 0x2D	; 45
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	81 81       	ldd	r24, Z+1	; 0x01
    1502:	8e 7f       	andi	r24, 0xFE	; 254
    1504:	11 96       	adiw	r26, 0x01	; 1
    1506:	8c 93       	st	X, r24
    1508:	11 97       	sbiw	r26, 0x01	; 1
    150a:	77 c0       	rjmp	.+238    	; 0x15fa <MCAL_SPI_Init+0x3b8>
			break;

		case (SPI_Clock_Rate_fosc_divided8):
		   SPI->SPCR |=   (1<<0);
    150c:	ad e2       	ldi	r26, 0x2D	; 45
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ed e2       	ldi	r30, 0x2D	; 45
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	81 60       	ori	r24, 0x01	; 1
    1518:	8c 93       	st	X, r24
		   SPI->SPCR &=  ~(1<<1);
    151a:	ad e2       	ldi	r26, 0x2D	; 45
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ed e2       	ldi	r30, 0x2D	; 45
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8d 7f       	andi	r24, 0xFD	; 253
    1526:	8c 93       	st	X, r24
		   SPI->SPSR |=   (1<<0);
    1528:	ad e2       	ldi	r26, 0x2D	; 45
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ed e2       	ldi	r30, 0x2D	; 45
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	81 81       	ldd	r24, Z+1	; 0x01
    1532:	81 60       	ori	r24, 0x01	; 1
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	8c 93       	st	X, r24
    1538:	11 97       	sbiw	r26, 0x01	; 1
    153a:	5f c0       	rjmp	.+190    	; 0x15fa <MCAL_SPI_Init+0x3b8>
		   break;

		case (SPI_Clock_Rate_fosc_divided16):
		   SPI->SPCR |=   (1<<0);
    153c:	ad e2       	ldi	r26, 0x2D	; 45
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ed e2       	ldi	r30, 0x2D	; 45
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	81 60       	ori	r24, 0x01	; 1
    1548:	8c 93       	st	X, r24
		   SPI->SPCR &=  ~(1<<1);
    154a:	ad e2       	ldi	r26, 0x2D	; 45
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ed e2       	ldi	r30, 0x2D	; 45
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8d 7f       	andi	r24, 0xFD	; 253
    1556:	8c 93       	st	X, r24
		   SPI->SPSR &=  ~(1<<0);
    1558:	ad e2       	ldi	r26, 0x2D	; 45
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ed e2       	ldi	r30, 0x2D	; 45
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	81 81       	ldd	r24, Z+1	; 0x01
    1562:	8e 7f       	andi	r24, 0xFE	; 254
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	8c 93       	st	X, r24
    1568:	11 97       	sbiw	r26, 0x01	; 1
    156a:	47 c0       	rjmp	.+142    	; 0x15fa <MCAL_SPI_Init+0x3b8>
		   break;

		case (SPI_Clock_Rate_fosc_divided32):
		   SPI->SPCR &=  ~(1<<0);
    156c:	ad e2       	ldi	r26, 0x2D	; 45
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ed e2       	ldi	r30, 0x2D	; 45
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8e 7f       	andi	r24, 0xFE	; 254
    1578:	8c 93       	st	X, r24
		   SPI->SPCR |=   (1<<1);
    157a:	ad e2       	ldi	r26, 0x2D	; 45
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ed e2       	ldi	r30, 0x2D	; 45
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	82 60       	ori	r24, 0x02	; 2
    1586:	8c 93       	st	X, r24
		   SPI->SPSR |=   (1<<0);
    1588:	ad e2       	ldi	r26, 0x2D	; 45
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ed e2       	ldi	r30, 0x2D	; 45
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	81 81       	ldd	r24, Z+1	; 0x01
    1592:	81 60       	ori	r24, 0x01	; 1
    1594:	11 96       	adiw	r26, 0x01	; 1
    1596:	8c 93       	st	X, r24
    1598:	11 97       	sbiw	r26, 0x01	; 1
    159a:	2f c0       	rjmp	.+94     	; 0x15fa <MCAL_SPI_Init+0x3b8>
		   break;

		case (SPI_Clock_Rate_fosc_divided64):
		   SPI->SPCR &=  ~(1<<0);
    159c:	ad e2       	ldi	r26, 0x2D	; 45
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ed e2       	ldi	r30, 0x2D	; 45
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8e 7f       	andi	r24, 0xFE	; 254
    15a8:	8c 93       	st	X, r24
		   SPI->SPCR |=   (1<<1);
    15aa:	ad e2       	ldi	r26, 0x2D	; 45
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ed e2       	ldi	r30, 0x2D	; 45
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	82 60       	ori	r24, 0x02	; 2
    15b6:	8c 93       	st	X, r24
		   SPI->SPSR &=  ~(1<<0);
    15b8:	ad e2       	ldi	r26, 0x2D	; 45
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ed e2       	ldi	r30, 0x2D	; 45
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	81 81       	ldd	r24, Z+1	; 0x01
    15c2:	8e 7f       	andi	r24, 0xFE	; 254
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	8c 93       	st	X, r24
    15c8:	11 97       	sbiw	r26, 0x01	; 1
    15ca:	17 c0       	rjmp	.+46     	; 0x15fa <MCAL_SPI_Init+0x3b8>
		   break;

		case (SPI_Clock_Rate_fosc_divided128):
		   SPI->SPCR |=   (1<<0);
    15cc:	ad e2       	ldi	r26, 0x2D	; 45
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	ed e2       	ldi	r30, 0x2D	; 45
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	8c 93       	st	X, r24
		   SPI->SPCR |=   (1<<1);
    15da:	ad e2       	ldi	r26, 0x2D	; 45
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ed e2       	ldi	r30, 0x2D	; 45
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	82 60       	ori	r24, 0x02	; 2
    15e6:	8c 93       	st	X, r24
		   SPI->SPSR &=  ~(1<<0);
    15e8:	ad e2       	ldi	r26, 0x2D	; 45
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ed e2       	ldi	r30, 0x2D	; 45
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	81 81       	ldd	r24, Z+1	; 0x01
    15f2:	8e 7f       	andi	r24, 0xFE	; 254
    15f4:	11 96       	adiw	r26, 0x01	; 1
    15f6:	8c 93       	st	X, r24
    15f8:	11 97       	sbiw	r26, 0x01	; 1

	}


	//Enable_Interrupt
	switch(SPI_config->SPI_IRQ_EN)
    15fa:	eb 81       	ldd	r30, Y+3	; 0x03
    15fc:	fc 81       	ldd	r31, Y+4	; 0x04
    15fe:	84 81       	ldd	r24, Z+4	; 0x04
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3e 83       	std	Y+6, r19	; 0x06
    1606:	2d 83       	std	Y+5, r18	; 0x05
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	e1 f0       	breq	.+56     	; 0x1648 <MCAL_SPI_Init+0x406>
    1610:	2d 81       	ldd	r18, Y+5	; 0x05
    1612:	3e 81       	ldd	r19, Y+6	; 0x06
    1614:	21 30       	cpi	r18, 0x01	; 1
    1616:	31 05       	cpc	r19, r1
    1618:	29 f5       	brne	.+74     	; 0x1664 <MCAL_SPI_Init+0x422>
		{
			case (SPI_IRQ_Enable):
				ENABLE_GLOBAL_INTERRUPT();
    161a:	af e5       	ldi	r26, 0x5F	; 95
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	ef e5       	ldi	r30, 0x5F	; 95
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	80 68       	ori	r24, 0x80	; 128
    1626:	8c 93       	st	X, r24
				SPI->SPCR |= (1 << 7);
    1628:	ad e2       	ldi	r26, 0x2D	; 45
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ed e2       	ldi	r30, 0x2D	; 45
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	80 68       	ori	r24, 0x80	; 128
    1634:	8c 93       	st	X, r24
				GPtr_Ptr_IRQ_CB = SPI_config->Ptr_IRQ_CallBack;
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	85 81       	ldd	r24, Z+5	; 0x05
    163c:	96 81       	ldd	r25, Z+6	; 0x06
    163e:	90 93 7f 00 	sts	0x007F, r25
    1642:	80 93 7e 00 	sts	0x007E, r24
    1646:	0e c0       	rjmp	.+28     	; 0x1664 <MCAL_SPI_Init+0x422>

				break;

			case (SPI_IRQ_Disable):
				DISABLE_GLOBAL_INTERRUPT();
    1648:	af e5       	ldi	r26, 0x5F	; 95
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ef e5       	ldi	r30, 0x5F	; 95
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 77       	andi	r24, 0x7F	; 127
    1654:	8c 93       	st	X, r24
			    SPI->SPCR &= ~(1 << 7);
    1656:	ad e2       	ldi	r26, 0x2D	; 45
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ed e2       	ldi	r30, 0x2D	; 45
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8f 77       	andi	r24, 0x7F	; 127
    1662:	8c 93       	st	X, r24
		}



	//Enable SPI
	SPI->SPCR |= (1 << 6);
    1664:	ad e2       	ldi	r26, 0x2D	; 45
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	ed e2       	ldi	r30, 0x2D	; 45
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 64       	ori	r24, 0x40	; 64
    1670:	8c 93       	st	X, r24

}
    1672:	2e 96       	adiw	r28, 0x0e	; 14
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <MCAL_SPI_Master_Send>:




void MCAL_SPI_Master_Send(uint8_t M_send_Buffer_)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	0f 92       	push	r0
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	89 83       	std	Y+1, r24	; 0x01


	//out low at SS pin.
	MCAL_GPIO_WritePin(GPIOB,SS,0);
    1690:	86 e3       	ldi	r24, 0x36	; 54
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	60 e1       	ldi	r22, 0x10	; 16
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>

	SPI->SPDR=M_send_Buffer_;
    169c:	ed e2       	ldi	r30, 0x2D	; 45
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	82 83       	std	Z+2, r24	; 0x02

	while (!(SPI->SPSR & (1 << 7)));
    16a4:	ed e2       	ldi	r30, 0x2D	; 45
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	81 81       	ldd	r24, Z+1	; 0x01
    16aa:	88 23       	and	r24, r24
    16ac:	dc f7       	brge	.-10     	; 0x16a4 <MCAL_SPI_Master_Send+0x20>
	MCAL_GPIO_WritePin(GPIOB,SS,1);
    16ae:	86 e3       	ldi	r24, 0x36	; 54
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	60 e1       	ldi	r22, 0x10	; 16
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>



}
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <MCAL_SPI_Master_Receive>:


void MCAL_SPI_Master_Receive(uint8_t* M_recive_Buffer_)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <MCAL_SPI_Master_Receive+0x6>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01


	//out low at SS pin.
	MCAL_GPIO_WritePin(GPIOB,SS,0);
    16d0:	86 e3       	ldi	r24, 0x36	; 54
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	60 e1       	ldi	r22, 0x10	; 16
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>

	while (!(SPI->SPSR & (1 << 7)));
    16dc:	ed e2       	ldi	r30, 0x2D	; 45
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	81 81       	ldd	r24, Z+1	; 0x01
    16e2:	88 23       	and	r24, r24
    16e4:	dc f7       	brge	.-10     	; 0x16dc <MCAL_SPI_Master_Receive+0x1a>
	*M_recive_Buffer_=SPI->SPDR;
    16e6:	ed e2       	ldi	r30, 0x2D	; 45
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	e9 81       	ldd	r30, Y+1	; 0x01
    16ee:	fa 81       	ldd	r31, Y+2	; 0x02
    16f0:	80 83       	st	Z, r24

	MCAL_GPIO_WritePin(GPIOB,SS,1);
    16f2:	86 e3       	ldi	r24, 0x36	; 54
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	60 e1       	ldi	r22, 0x10	; 16
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>




}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <MCAL_SPI_Slave_Send>:


void MCAL_SPI_Slave_Send(uint8_t S_send_Buffer_)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	0f 92       	push	r0
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	89 83       	std	Y+1, r24	; 0x01

	SPI->SPDR=S_send_Buffer_;
    1714:	ed e2       	ldi	r30, 0x2D	; 45
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	82 83       	std	Z+2, r24	; 0x02
	while (!(SPI->SPSR & (1 << 7)));
    171c:	ed e2       	ldi	r30, 0x2D	; 45
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	81 81       	ldd	r24, Z+1	; 0x01
    1722:	88 23       	and	r24, r24
    1724:	dc f7       	brge	.-10     	; 0x171c <MCAL_SPI_Slave_Send+0x14>

}
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <MCAL_SPI_Slave_Receive>:




void MCAL_SPI_Slave_Receive(uint8_t* S_recive_Buffer_)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <MCAL_SPI_Slave_Receive+0x6>
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01



	while (!(SPI->SPSR & (1 << 7)));
    173c:	ed e2       	ldi	r30, 0x2D	; 45
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	81 81       	ldd	r24, Z+1	; 0x01
    1742:	88 23       	and	r24, r24
    1744:	dc f7       	brge	.-10     	; 0x173c <MCAL_SPI_Slave_Receive+0xe>
	*S_recive_Buffer_ = SPI->SPDR;
    1746:	ed e2       	ldi	r30, 0x2D	; 45
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	e9 81       	ldd	r30, Y+1	; 0x01
    174e:	fa 81       	ldd	r31, Y+2	; 0x02
    1750:	80 83       	st	Z, r24




}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <MCAL_I2C_Init>:
#include "atmega32_i2c_driver.h"



void MCAL_I2C_Init(unsigned long SCL_Clock)
{
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <MCAL_I2C_Init+0xa>
    1766:	00 d0       	rcall	.+0      	; 0x1768 <MCAL_I2C_Init+0xc>
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	69 83       	std	Y+1, r22	; 0x01
    176e:	7a 83       	std	Y+2, r23	; 0x02
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	9c 83       	std	Y+4, r25	; 0x04
	I2C->TWBR=(unsigned char) (((F_CPU/SCL_Clock)-16)/(2*prescaler));
    1774:	00 e2       	ldi	r16, 0x20	; 32
    1776:	10 e0       	ldi	r17, 0x00	; 0
    1778:	80 e4       	ldi	r24, 0x40	; 64
    177a:	92 e4       	ldi	r25, 0x42	; 66
    177c:	af e0       	ldi	r26, 0x0F	; 15
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	29 81       	ldd	r18, Y+1	; 0x01
    1782:	3a 81       	ldd	r19, Y+2	; 0x02
    1784:	4b 81       	ldd	r20, Y+3	; 0x03
    1786:	5c 81       	ldd	r21, Y+4	; 0x04
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 29 14 	call	0x2852	; 0x2852 <__udivmodsi4>
    1790:	da 01       	movw	r26, r20
    1792:	c9 01       	movw	r24, r18
    1794:	40 97       	sbiw	r24, 0x10	; 16
    1796:	a1 09       	sbc	r26, r1
    1798:	b1 09       	sbc	r27, r1
    179a:	b6 95       	lsr	r27
    179c:	a7 95       	ror	r26
    179e:	97 95       	ror	r25
    17a0:	87 95       	ror	r24
    17a2:	f8 01       	movw	r30, r16
    17a4:	80 83       	st	Z, r24

	if (prescaler == 1)
		I2C->TWSR=0;
    17a6:	e0 e2       	ldi	r30, 0x20	; 32
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	11 82       	std	Z+1, r1	; 0x01
	else if (prescaler == 16)
		I2C->TWSR=2;

	else if (prescaler == 64)
		I2C->TWSR=3;
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <MCAL_I2C_Start>:


void MCAL_I2C_Start(void)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR =(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    17c6:	e6 e5       	ldi	r30, 0x56	; 86
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	84 ea       	ldi	r24, 0xA4	; 164
    17cc:	80 83       	st	Z, r24
	while (((I2C_TWCR &(1<<TWINT))==0));                 // wait to finish
    17ce:	e6 e5       	ldi	r30, 0x56	; 86
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	88 23       	and	r24, r24
    17d6:	dc f7       	brge	.-10     	; 0x17ce <MCAL_I2C_Start+0x10>
	while ((I2C->TWSR)!=0x08);                   //Start Condition has Been Transmitted
    17d8:	e0 e2       	ldi	r30, 0x20	; 32
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	81 81       	ldd	r24, Z+1	; 0x01
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	d9 f7       	brne	.-10     	; 0x17d8 <MCAL_I2C_Start+0x1a>
}
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <MCAL_I2C_Write>:

void MCAL_I2C_Write(unsigned char cByte)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	0f 92       	push	r0
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	89 83       	std	Y+1, r24	; 0x01
	I2C->TWDR = cByte;
    17f4:	e0 e2       	ldi	r30, 0x20	; 32
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	83 83       	std	Z+3, r24	; 0x03
	I2C_TWCR = (1<<TWINT)|(1<<TWEN);
    17fc:	e6 e5       	ldi	r30, 0x56	; 86
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	84 e8       	ldi	r24, 0x84	; 132
    1802:	80 83       	st	Z, r24
	while (((I2C_TWCR &(1<<TWINT))==0));                 // wait to finish
    1804:	e6 e5       	ldi	r30, 0x56	; 86
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	88 23       	and	r24, r24
    180c:	dc f7       	brge	.-10     	; 0x1804 <MCAL_I2C_Write+0x1c>

}
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <MCAL_I2C_Stop>:

void MCAL_I2C_Stop()
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    181e:	e6 e5       	ldi	r30, 0x56	; 86
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	84 e9       	ldi	r24, 0x94	; 148
    1824:	80 83       	st	Z, r24
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <MCAL_GPIO_Init>:
 * Note-You must Create Instant from "GPIO_PinConfig_t" Structure,
 * Before using This func "MCAL_GPIO_Init" and pass it to @param [in] -Address of the PinConfig
 */

void MCAL_GPIO_Init(GPIO_TypedDef* GPIOx, GPIO_PinConfig_t* PinConfig )
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <MCAL_GPIO_Init+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <MCAL_GPIO_Init+0x8>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	7c 83       	std	Y+4, r23	; 0x04
    183e:	6b 83       	std	Y+3, r22	; 0x03


	if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_Floating)
    1840:	eb 81       	ldd	r30, Y+3	; 0x03
    1842:	fc 81       	ldd	r31, Y+4	; 0x04
    1844:	81 81       	ldd	r24, Z+1	; 0x01
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	69 f4       	brne	.+26     	; 0x1864 <MCAL_GPIO_Init+0x38>
	{
		 GPIOx->DDR &= ~  PinConfig->GPIO_PinNumber ;
    184a:	e9 81       	ldd	r30, Y+1	; 0x01
    184c:	fa 81       	ldd	r31, Y+2	; 0x02
    184e:	81 81       	ldd	r24, Z+1	; 0x01
    1850:	98 2f       	mov	r25, r24
    1852:	eb 81       	ldd	r30, Y+3	; 0x03
    1854:	fc 81       	ldd	r31, Y+4	; 0x04
    1856:	80 81       	ld	r24, Z
    1858:	80 95       	com	r24
    185a:	89 23       	and	r24, r25
    185c:	e9 81       	ldd	r30, Y+1	; 0x01
    185e:	fa 81       	ldd	r31, Y+2	; 0x02
    1860:	81 83       	std	Z+1, r24	; 0x01
    1862:	2b c0       	rjmp	.+86     	; 0x18ba <MCAL_GPIO_Init+0x8e>
	}
	else if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_up)
    1864:	eb 81       	ldd	r30, Y+3	; 0x03
    1866:	fc 81       	ldd	r31, Y+4	; 0x04
    1868:	81 81       	ldd	r24, Z+1	; 0x01
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	b9 f4       	brne	.+46     	; 0x189c <MCAL_GPIO_Init+0x70>
	{

		 GPIOx->DDR  &= ~ PinConfig->GPIO_PinNumber ;
    186e:	e9 81       	ldd	r30, Y+1	; 0x01
    1870:	fa 81       	ldd	r31, Y+2	; 0x02
    1872:	81 81       	ldd	r24, Z+1	; 0x01
    1874:	98 2f       	mov	r25, r24
    1876:	eb 81       	ldd	r30, Y+3	; 0x03
    1878:	fc 81       	ldd	r31, Y+4	; 0x04
    187a:	80 81       	ld	r24, Z
    187c:	80 95       	com	r24
    187e:	89 23       	and	r24, r25
    1880:	e9 81       	ldd	r30, Y+1	; 0x01
    1882:	fa 81       	ldd	r31, Y+2	; 0x02
    1884:	81 83       	std	Z+1, r24	; 0x01
		 GPIOx->PORT |=   PinConfig->GPIO_PinNumber ;
    1886:	e9 81       	ldd	r30, Y+1	; 0x01
    1888:	fa 81       	ldd	r31, Y+2	; 0x02
    188a:	92 81       	ldd	r25, Z+2	; 0x02
    188c:	eb 81       	ldd	r30, Y+3	; 0x03
    188e:	fc 81       	ldd	r31, Y+4	; 0x04
    1890:	80 81       	ld	r24, Z
    1892:	89 2b       	or	r24, r25
    1894:	e9 81       	ldd	r30, Y+1	; 0x01
    1896:	fa 81       	ldd	r31, Y+2	; 0x02
    1898:	82 83       	std	Z+2, r24	; 0x02
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <MCAL_GPIO_Init+0x8e>

	}
	else if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull)
    189c:	eb 81       	ldd	r30, Y+3	; 0x03
    189e:	fc 81       	ldd	r31, Y+4	; 0x04
    18a0:	81 81       	ldd	r24, Z+1	; 0x01
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	51 f4       	brne	.+20     	; 0x18ba <MCAL_GPIO_Init+0x8e>
	{
		 GPIOx->DDR |=   PinConfig->GPIO_PinNumber ;
    18a6:	e9 81       	ldd	r30, Y+1	; 0x01
    18a8:	fa 81       	ldd	r31, Y+2	; 0x02
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	eb 81       	ldd	r30, Y+3	; 0x03
    18ae:	fc 81       	ldd	r31, Y+4	; 0x04
    18b0:	80 81       	ld	r24, Z
    18b2:	89 2b       	or	r24, r25
    18b4:	e9 81       	ldd	r30, Y+1	; 0x01
    18b6:	fa 81       	ldd	r31, Y+2	; 0x02
    18b8:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		//Do Nothing
	}

}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <MCAL_GPIO_DInit>:
 * @param [in] - Pointer of GPIOx ,
 * @retval -Not
 * Note-..........................................................
 */
void MCAL_GPIO_DInit(GPIO_TypedDef* GPIOx)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <MCAL_GPIO_DInit+0x6>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
		GPIOx->DDR=0x00;
    18d6:	e9 81       	ldd	r30, Y+1	; 0x01
    18d8:	fa 81       	ldd	r31, Y+2	; 0x02
    18da:	11 82       	std	Z+1, r1	; 0x01
		GPIOx->PORT=0x00;
    18dc:	e9 81       	ldd	r30, Y+1	; 0x01
    18de:	fa 81       	ldd	r31, Y+2	; 0x02
    18e0:	12 82       	std	Z+2, r1	; 0x02
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <MCAL_GPIO_ReadPin>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio,
 * @retval -State of Pin, 0 or 1
 * Note-..........................................................
 */
uint8_t  MCAL_GPIO_ReadPin(GPIO_TypedDef* GPIOx,uint8_t PinNumber)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <MCAL_GPIO_ReadPin+0x6>
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <MCAL_GPIO_ReadPin+0x8>
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	6b 83       	std	Y+3, r22	; 0x03
	if((GPIOx->PIN & PinNumber) != (uint32_t)GPIO_PIN_RESET ) return (uint8_t)GPIO_PIN_SET;
    18fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1900:	fa 81       	ldd	r31, Y+2	; 0x02
    1902:	90 81       	ld	r25, Z
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	89 23       	and	r24, r25
    1908:	88 23       	and	r24, r24
    190a:	19 f0       	breq	.+6      	; 0x1912 <MCAL_GPIO_ReadPin+0x26>
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	8c 83       	std	Y+4, r24	; 0x04
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <MCAL_GPIO_ReadPin+0x28>
	else return (uint8_t)GPIO_PIN_RESET;
    1912:	1c 82       	std	Y+4, r1	; 0x04
    1914:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <MCAL_GPIO_ReadPort>:
 * @param [in] - Pointer of GPIOx ,
 * @retval -16bits of selected port.
 * Note-..........................................................
 */
uint8_t MCAL_GPIO_ReadPort(GPIO_TypedDef* GPIOx)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <MCAL_GPIO_ReadPort+0x6>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
	return (uint8_t)(GPIOx->PIN);
    1932:	e9 81       	ldd	r30, Y+1	; 0x01
    1934:	fa 81       	ldd	r31, Y+2	; 0x02
    1936:	80 81       	ld	r24, Z
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <MCAL_GPIO_WritePin>:
 * @param [in] - Set "Value" which is 0 or 1,
 * @retval -NOT......
 * Note-..........................................................
 */
void MCAL_GPIO_WritePin(GPIO_TypedDef* GPIOx,uint8_t PinNumber , uint8_t Value)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <MCAL_GPIO_WritePin+0x6>
    1948:	00 d0       	rcall	.+0      	; 0x194a <MCAL_GPIO_WritePin+0x8>
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	9a 83       	std	Y+2, r25	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	6b 83       	std	Y+3, r22	; 0x03
    1954:	4c 83       	std	Y+4, r20	; 0x04

	if(Value == (uint8_t) GPIO_PIN_SET)
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	49 f4       	brne	.+18     	; 0x196e <MCAL_GPIO_WritePin+0x2c>
	{
		GPIOx->PORT |= (uint8_t)PinNumber;
    195c:	e9 81       	ldd	r30, Y+1	; 0x01
    195e:	fa 81       	ldd	r31, Y+2	; 0x02
    1960:	92 81       	ldd	r25, Z+2	; 0x02
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	89 2b       	or	r24, r25
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	82 83       	std	Z+2, r24	; 0x02
    196c:	0a c0       	rjmp	.+20     	; 0x1982 <MCAL_GPIO_WritePin+0x40>
	}

	else
	{
		GPIOx->PORT &= ~(uint8_t)(PinNumber);
    196e:	e9 81       	ldd	r30, Y+1	; 0x01
    1970:	fa 81       	ldd	r31, Y+2	; 0x02
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	98 2f       	mov	r25, r24
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	80 95       	com	r24
    197a:	89 23       	and	r24, r25
    197c:	e9 81       	ldd	r30, Y+1	; 0x01
    197e:	fa 81       	ldd	r31, Y+2	; 0x02
    1980:	82 83       	std	Z+2, r24	; 0x02
	}
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <MCAL_GPIO_WritePort>:
 * @param [in] - Value ,
 * @retval -Not
 * Note-..........................................................
 */
void MCAL_GPIO_WritePort(GPIO_TypedDef* GPIOx, uint8_t Value)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <MCAL_GPIO_WritePort+0x6>
    1996:	0f 92       	push	r0
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	6b 83       	std	Y+3, r22	; 0x03

	GPIOx->PORT = (uint8_t)Value;
    19a2:	e9 81       	ldd	r30, Y+1	; 0x01
    19a4:	fa 81       	ldd	r31, Y+2	; 0x02
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	82 83       	std	Z+2, r24	; 0x02


}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <MCAL_GPIO_TogglePin>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio,
 * @retval -Not
 * Note-..........................................................
 */
void MCAL_GPIO_TogglePin(GPIO_TypedDef* GPIOx,uint8_t PinNumber)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <MCAL_GPIO_TogglePin+0x6>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	6b 83       	std	Y+3, r22	; 0x03
	GPIOx->PORT ^= (uint8_t)PinNumber;
    19c8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ca:	fa 81       	ldd	r31, Y+2	; 0x02
    19cc:	92 81       	ldd	r25, Z+2	; 0x02
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	89 27       	eor	r24, r25
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	82 83       	std	Z+2, r24	; 0x02
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <MCAL_EXTI_DEInit>:
 * @param [in] - 	none
 * @retval -none
 * Note-.....
 */
void MCAL_EXTI_DEInit(void)
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
	//Reset INT_Registers
	MCUCR &= ~(0xF << 0);
    19ec:	a5 e5       	ldi	r26, 0x55	; 85
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e5 e5       	ldi	r30, 0x55	; 85
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 7f       	andi	r24, 0xF0	; 240
    19f8:	8c 93       	st	X, r24
	MCUCSR &= ~(1 << 6);
    19fa:	a4 e5       	ldi	r26, 0x54	; 84
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e4 e5       	ldi	r30, 0x54	; 84
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	8f 7b       	andi	r24, 0xBF	; 191
    1a06:	8c 93       	st	X, r24


	//Reset GIC Controller
	GICR &= ~( (1 << INT0_ISR) | (1 << INT1_ISR) | (1 << INT2_ISR));
    1a08:	ab e5       	ldi	r26, 0x5B	; 91
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e5       	ldi	r30, 0x5B	; 91
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	8f 71       	andi	r24, 0x1F	; 31
    1a14:	8c 93       	st	X, r24
	GIFR |=  ( (1 << INT0_ISR) | (1 << INT1_ISR) | (1 << INT2_ISR));
    1a16:	aa e5       	ldi	r26, 0x5A	; 90
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ea e5       	ldi	r30, 0x5A	; 90
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 6e       	ori	r24, 0xE0	; 224
    1a22:	8c 93       	st	X, r24

	DISABLE_GLOBAL_INTERRUPT();
    1a24:	af e5       	ldi	r26, 0x5F	; 95
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ef e5       	ldi	r30, 0x5F	; 95
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8f 77       	andi	r24, 0x7F	; 127
    1a30:	8c 93       	st	X, r24
}
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <MCAL_EXTI_Init>:
 * @param [in] - EXTI_PINCONFIG_t* EXTI_Config
 * @retval -none
 * Note-.....
 */
void MCAL_EXTI_Init(EXTI_PINCONFIG_t* EXTI_Config)
{
    1a38:	1f 93       	push	r17
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <MCAL_EXTI_Init+0x8>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <MCAL_EXTI_Init+0xa>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03

	// Configure GPIO PIN As FLOATING Input PIN
	GPIO_PinConfig_t GPIO_EXTI_Config;
	GPIO_EXTI_Config.GPIO_PinNumber=EXTI_Config->EXTI_Map_Pin.EXTI_Pin_Number;
    1a4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a4e:	83 81       	ldd	r24, Z+3	; 0x03
    1a50:	89 83       	std	Y+1, r24	; 0x01
	GPIO_EXTI_Config.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_GPIO_Init(EXTI_Config->EXTI_Map_Pin.GPIOX,&GPIO_EXTI_Config);
    1a56:	eb 81       	ldd	r30, Y+3	; 0x03
    1a58:	fc 81       	ldd	r31, Y+4	; 0x04
    1a5a:	81 81       	ldd	r24, Z+1	; 0x01
    1a5c:	92 81       	ldd	r25, Z+2	; 0x02
    1a5e:	9e 01       	movw	r18, r28
    1a60:	2f 5f       	subi	r18, 0xFF	; 255
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	b9 01       	movw	r22, r18
    1a66:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>



	//Configuration of EXTI
	MCUCR &= ~(0xF << 0);
    1a6a:	a5 e5       	ldi	r26, 0x55	; 85
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e5 e5       	ldi	r30, 0x55	; 85
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 7f       	andi	r24, 0xF0	; 240
    1a76:	8c 93       	st	X, r24
	MCUCSR &= ~(1 << 6);
    1a78:	a4 e5       	ldi	r26, 0x54	; 84
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e4 e5       	ldi	r30, 0x54	; 84
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8f 7b       	andi	r24, 0xBF	; 191
    1a84:	8c 93       	st	X, r24

	if(EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number == EXTI0 || EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number == EXTI1 )
    1a86:	eb 81       	ldd	r30, Y+3	; 0x03
    1a88:	fc 81       	ldd	r31, Y+4	; 0x04
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 23       	and	r24, r24
    1a8e:	29 f0       	breq	.+10     	; 0x1a9a <MCAL_EXTI_Init+0x62>
    1a90:	eb 81       	ldd	r30, Y+3	; 0x03
    1a92:	fc 81       	ldd	r31, Y+4	; 0x04
    1a94:	80 81       	ld	r24, Z
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	e1 f4       	brne	.+56     	; 0x1ad2 <MCAL_EXTI_Init+0x9a>
	{

		MCUCR |= ((EXTI_Config->EXTI_Trigger_State) << ((EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number) * 2) );
    1a9a:	a5 e5       	ldi	r26, 0x55	; 85
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e5 e5       	ldi	r30, 0x55	; 85
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1aaa:	85 81       	ldd	r24, Z+5	; 0x05
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ab2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	b9 01       	movw	r22, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <MCAL_EXTI_Init+0x8e>
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	8a 95       	dec	r24
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <MCAL_EXTI_Init+0x8a>
    1aca:	cb 01       	movw	r24, r22
    1acc:	84 2b       	or	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	22 c0       	rjmp	.+68     	; 0x1b16 <MCAL_EXTI_Init+0xde>
	}
	else
	{

		MCUCSR |= (( (EXTI_Config->EXTI_Trigger_State) / 3) << ((EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number) *3) );
    1ad2:	a4 e5       	ldi	r26, 0x54	; 84
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e4 e5       	ldi	r30, 0x54	; 84
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	18 2f       	mov	r17, r24
    1ade:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae2:	85 81       	ldd	r24, Z+5	; 0x05
    1ae4:	93 e0       	ldi	r25, 0x03	; 3
    1ae6:	69 2f       	mov	r22, r25
    1ae8:	0e 94 1d 14 	call	0x283a	; 0x283a <__udivmodqi4>
    1aec:	48 2f       	mov	r20, r24
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	eb 81       	ldd	r30, Y+3	; 0x03
    1af2:	fc 81       	ldd	r31, Y+4	; 0x04
    1af4:	80 81       	ld	r24, Z
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	c9 01       	movw	r24, r18
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	82 0f       	add	r24, r18
    1b02:	93 1f       	adc	r25, r19
    1b04:	9a 01       	movw	r18, r20
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <MCAL_EXTI_Init+0xd4>
    1b08:	22 0f       	add	r18, r18
    1b0a:	33 1f       	adc	r19, r19
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <MCAL_EXTI_Init+0xd0>
    1b10:	c9 01       	movw	r24, r18
    1b12:	81 2b       	or	r24, r17
    1b14:	8c 93       	st	X, r24
	}


	//CallBack Function.
	GP_FuncCallBack[EXTI_Config->EXTI_Map_Pin.EXTI_Line_Number]= EXTI_Config->PF_IRQ_CALLBACK;
    1b16:	eb 81       	ldd	r30, Y+3	; 0x03
    1b18:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1a:	80 81       	ld	r24, Z
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	eb 81       	ldd	r30, Y+3	; 0x03
    1b22:	fc 81       	ldd	r31, Y+4	; 0x04
    1b24:	27 81       	ldd	r18, Z+7	; 0x07
    1b26:	30 85       	ldd	r19, Z+8	; 0x08
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e0 58       	subi	r30, 0x80	; 128
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	31 83       	std	Z+1, r19	; 0x01
    1b34:	20 83       	st	Z, r18


	//Enable OR Disable EXTIx & GIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
    1b36:	eb 81       	ldd	r30, Y+3	; 0x03
    1b38:	fc 81       	ldd	r31, Y+4	; 0x04
    1b3a:	86 81       	ldd	r24, Z+6	; 0x06
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	b1 f4       	brne	.+44     	; 0x1b6c <MCAL_EXTI_Init+0x134>
	{
		GICR |= ( (1 << EXTI_Config->EXTI_Map_Pin.IVT_EXTI_IRQn));
    1b40:	ab e5       	ldi	r26, 0x5B	; 91
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb e5       	ldi	r30, 0x5B	; 91
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b50:	84 81       	ldd	r24, Z+4	; 0x04
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <MCAL_EXTI_Init+0x12a>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <MCAL_EXTI_Init+0x126>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	1b c0       	rjmp	.+54     	; 0x1ba2 <MCAL_EXTI_Init+0x16a>
	}
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
    1b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b70:	86 81       	ldd	r24, Z+6	; 0x06
    1b72:	88 23       	and	r24, r24
    1b74:	b1 f4       	brne	.+44     	; 0x1ba2 <MCAL_EXTI_Init+0x16a>
	{
		GICR &= ~( (1 << EXTI_Config->EXTI_Map_Pin.IVT_EXTI_IRQn));
    1b76:	ab e5       	ldi	r26, 0x5B	; 91
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	eb e5       	ldi	r30, 0x5B	; 91
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	eb 81       	ldd	r30, Y+3	; 0x03
    1b84:	fc 81       	ldd	r31, Y+4	; 0x04
    1b86:	84 81       	ldd	r24, Z+4	; 0x04
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <MCAL_EXTI_Init+0x160>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <MCAL_EXTI_Init+0x15c>
    1b9c:	80 95       	com	r24
    1b9e:	84 23       	and	r24, r20
    1ba0:	8c 93       	st	X, r24
	}

	//Enable Global Interrupt
	ENABLE_GLOBAL_INTERRUPT();
    1ba2:	af e5       	ldi	r26, 0x5F	; 95
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ef e5       	ldi	r30, 0x5F	; 95
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	80 68       	ori	r24, 0x80	; 128
    1bae:	8c 93       	st	X, r24

}
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	1f 91       	pop	r17
    1bbe:	08 95       	ret

00001bc0 <__vector_1>:


ISR(INT0_vect)
{
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	2f 93       	push	r18
    1bcc:	3f 93       	push	r19
    1bce:	4f 93       	push	r20
    1bd0:	5f 93       	push	r21
    1bd2:	6f 93       	push	r22
    1bd4:	7f 93       	push	r23
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	af 93       	push	r26
    1bdc:	bf 93       	push	r27
    1bde:	ef 93       	push	r30
    1be0:	ff 93       	push	r31
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	GP_FuncCallBack[0]();
    1bea:	e0 91 80 00 	lds	r30, 0x0080
    1bee:	f0 91 81 00 	lds	r31, 0x0081
    1bf2:	09 95       	icall
	GIFR |=  (1 << INT0_ISR);
    1bf4:	aa e5       	ldi	r26, 0x5A	; 90
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	ea e5       	ldi	r30, 0x5A	; 90
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	80 64       	ori	r24, 0x40	; 64
    1c00:	8c 93       	st	X, r24
}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	ff 91       	pop	r31
    1c08:	ef 91       	pop	r30
    1c0a:	bf 91       	pop	r27
    1c0c:	af 91       	pop	r26
    1c0e:	9f 91       	pop	r25
    1c10:	8f 91       	pop	r24
    1c12:	7f 91       	pop	r23
    1c14:	6f 91       	pop	r22
    1c16:	5f 91       	pop	r21
    1c18:	4f 91       	pop	r20
    1c1a:	3f 91       	pop	r19
    1c1c:	2f 91       	pop	r18
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	0f 90       	pop	r0
    1c24:	1f 90       	pop	r1
    1c26:	18 95       	reti

00001c28 <__vector_2>:

ISR(INT1_vect)
{
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	2f 93       	push	r18
    1c34:	3f 93       	push	r19
    1c36:	4f 93       	push	r20
    1c38:	5f 93       	push	r21
    1c3a:	6f 93       	push	r22
    1c3c:	7f 93       	push	r23
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25
    1c42:	af 93       	push	r26
    1c44:	bf 93       	push	r27
    1c46:	ef 93       	push	r30
    1c48:	ff 93       	push	r31
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
	GP_FuncCallBack[1]();
    1c52:	e0 91 82 00 	lds	r30, 0x0082
    1c56:	f0 91 83 00 	lds	r31, 0x0083
    1c5a:	09 95       	icall
	GIFR |=  (1 << INT1_ISR);
    1c5c:	aa e5       	ldi	r26, 0x5A	; 90
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	ea e5       	ldi	r30, 0x5A	; 90
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	80 68       	ori	r24, 0x80	; 128
    1c68:	8c 93       	st	X, r24
}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	ff 91       	pop	r31
    1c70:	ef 91       	pop	r30
    1c72:	bf 91       	pop	r27
    1c74:	af 91       	pop	r26
    1c76:	9f 91       	pop	r25
    1c78:	8f 91       	pop	r24
    1c7a:	7f 91       	pop	r23
    1c7c:	6f 91       	pop	r22
    1c7e:	5f 91       	pop	r21
    1c80:	4f 91       	pop	r20
    1c82:	3f 91       	pop	r19
    1c84:	2f 91       	pop	r18
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	0f 90       	pop	r0
    1c8c:	1f 90       	pop	r1
    1c8e:	18 95       	reti

00001c90 <__vector_18>:

ISR(INT2_vect)
{
    1c90:	1f 92       	push	r1
    1c92:	0f 92       	push	r0
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	0f 92       	push	r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	2f 93       	push	r18
    1c9c:	3f 93       	push	r19
    1c9e:	4f 93       	push	r20
    1ca0:	5f 93       	push	r21
    1ca2:	6f 93       	push	r22
    1ca4:	7f 93       	push	r23
    1ca6:	8f 93       	push	r24
    1ca8:	9f 93       	push	r25
    1caa:	af 93       	push	r26
    1cac:	bf 93       	push	r27
    1cae:	ef 93       	push	r30
    1cb0:	ff 93       	push	r31
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
	GP_FuncCallBack[2]();
    1cba:	e0 91 84 00 	lds	r30, 0x0084
    1cbe:	f0 91 85 00 	lds	r31, 0x0085
    1cc2:	09 95       	icall
	GIFR |=  (1 << INT2_ISR);
    1cc4:	aa e5       	ldi	r26, 0x5A	; 90
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	ea e5       	ldi	r30, 0x5A	; 90
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	80 62       	ori	r24, 0x20	; 32
    1cd0:	8c 93       	st	X, r24
}
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
    1cda:	bf 91       	pop	r27
    1cdc:	af 91       	pop	r26
    1cde:	9f 91       	pop	r25
    1ce0:	8f 91       	pop	r24
    1ce2:	7f 91       	pop	r23
    1ce4:	6f 91       	pop	r22
    1ce6:	5f 91       	pop	r21
    1ce8:	4f 91       	pop	r20
    1cea:	3f 91       	pop	r19
    1cec:	2f 91       	pop	r18
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <_delay_ms>:
#include "lcd.h"
GPIO_PinConfig_t LCD_pinconfig;


void _delay_ms(uint32_t time_ms)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	2c 97       	sbiw	r28, 0x0c	; 12
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	69 87       	std	Y+9, r22	; 0x09
    1d0e:	7a 87       	std	Y+10, r23	; 0x0a
    1d10:	8b 87       	std	Y+11, r24	; 0x0b
    1d12:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32_t  i,j;
	for(i=0;i<time_ms;i++)
    1d14:	19 82       	std	Y+1, r1	; 0x01
    1d16:	1a 82       	std	Y+2, r1	; 0x02
    1d18:	1b 82       	std	Y+3, r1	; 0x03
    1d1a:	1c 82       	std	Y+4, r1	; 0x04
    1d1c:	24 c0       	rjmp	.+72     	; 0x1d66 <_delay_ms+0x6e>
		for(j=0 ; j<255 ; j++);
    1d1e:	1d 82       	std	Y+5, r1	; 0x05
    1d20:	1e 82       	std	Y+6, r1	; 0x06
    1d22:	1f 82       	std	Y+7, r1	; 0x07
    1d24:	18 86       	std	Y+8, r1	; 0x08
    1d26:	0b c0       	rjmp	.+22     	; 0x1d3e <_delay_ms+0x46>
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	af 81       	ldd	r26, Y+7	; 0x07
    1d2e:	b8 85       	ldd	r27, Y+8	; 0x08
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	a1 1d       	adc	r26, r1
    1d34:	b1 1d       	adc	r27, r1
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	af 83       	std	Y+7, r26	; 0x07
    1d3c:	b8 87       	std	Y+8, r27	; 0x08
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	af 81       	ldd	r26, Y+7	; 0x07
    1d44:	b8 85       	ldd	r27, Y+8	; 0x08
    1d46:	8f 3f       	cpi	r24, 0xFF	; 255
    1d48:	91 05       	cpc	r25, r1
    1d4a:	a1 05       	cpc	r26, r1
    1d4c:	b1 05       	cpc	r27, r1
    1d4e:	60 f3       	brcs	.-40     	; 0x1d28 <_delay_ms+0x30>


void _delay_ms(uint32_t time_ms)
{
	volatile uint32_t  i,j;
	for(i=0;i<time_ms;i++)
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	ab 81       	ldd	r26, Y+3	; 0x03
    1d56:	bc 81       	ldd	r27, Y+4	; 0x04
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	a1 1d       	adc	r26, r1
    1d5c:	b1 1d       	adc	r27, r1
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	ab 83       	std	Y+3, r26	; 0x03
    1d64:	bc 83       	std	Y+4, r27	; 0x04
    1d66:	29 81       	ldd	r18, Y+1	; 0x01
    1d68:	3a 81       	ldd	r19, Y+2	; 0x02
    1d6a:	4b 81       	ldd	r20, Y+3	; 0x03
    1d6c:	5c 81       	ldd	r21, Y+4	; 0x04
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d74:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d76:	28 17       	cp	r18, r24
    1d78:	39 07       	cpc	r19, r25
    1d7a:	4a 07       	cpc	r20, r26
    1d7c:	5b 07       	cpc	r21, r27
    1d7e:	78 f2       	brcs	.-98     	; 0x1d1e <_delay_ms+0x26>
		for(j=0 ; j<255 ; j++);

}
    1d80:	2c 96       	adiw	r28, 0x0c	; 12
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <LCD_INIT>:



void LCD_INIT()
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
	_delay_ms(20);
    1d9a:	64 e1       	ldi	r22, 0x14	; 20
    1d9c:	70 e0       	ldi	r23, 0x00	; 0
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_delay_ms>
	LCD_pinconfig.GPIO_PinNumber=EN_SWITCH;
    1da6:	88 e0       	ldi	r24, 0x08	; 8
    1da8:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1dac:	83 e0       	ldi	r24, 0x03	; 3
    1dae:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_CTRL,&LCD_pinconfig);
    1db2:	26 e8       	ldi	r18, 0x86	; 134
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	86 e3       	ldi	r24, 0x36	; 54
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	b9 01       	movw	r22, r18
    1dbc:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=RS_SWITCH;
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_CTRL,&LCD_pinconfig);
    1dcc:	26 e8       	ldi	r18, 0x86	; 134
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	86 e3       	ldi	r24, 0x36	; 54
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	b9 01       	movw	r22, r18
    1dd6:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=RW_SWITCH;
    1dda:	84 e0       	ldi	r24, 0x04	; 4
    1ddc:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1de0:	83 e0       	ldi	r24, 0x03	; 3
    1de2:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_CTRL,&LCD_pinconfig);
    1de6:	26 e8       	ldi	r18, 0x86	; 134
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	86 e3       	ldi	r24, 0x36	; 54
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	//WRITE IN CONTROL PINS '0';
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, 0);
    1df4:	86 e3       	ldi	r24, 0x36	; 54
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	68 e0       	ldi	r22, 0x08	; 8
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 0);
    1e00:	86 e3       	ldi	r24, 0x36	; 54
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	62 e0       	ldi	r22, 0x02	; 2
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
    1e0c:	86 e3       	ldi	r24, 0x36	; 54
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	64 e0       	ldi	r22, 0x04	; 4
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	//========================================================================

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_0;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1e24:	26 e8       	ldi	r18, 0x86	; 134
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	89 e3       	ldi	r24, 0x39	; 57
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	b9 01       	movw	r22, r18
    1e2e:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_1;
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1e3e:	26 e8       	ldi	r18, 0x86	; 134
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	89 e3       	ldi	r24, 0x39	; 57
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	b9 01       	movw	r22, r18
    1e48:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_2;
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1e58:	26 e8       	ldi	r18, 0x86	; 134
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	89 e3       	ldi	r24, 0x39	; 57
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	b9 01       	movw	r22, r18
    1e62:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_3;
    1e66:	88 e0       	ldi	r24, 0x08	; 8
    1e68:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1e72:	26 e8       	ldi	r18, 0x86	; 134
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	89 e3       	ldi	r24, 0x39	; 57
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_4;
    1e80:	80 e1       	ldi	r24, 0x10	; 16
    1e82:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1e86:	83 e0       	ldi	r24, 0x03	; 3
    1e88:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1e8c:	26 e8       	ldi	r18, 0x86	; 134
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	89 e3       	ldi	r24, 0x39	; 57
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	b9 01       	movw	r22, r18
    1e96:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_5;
    1e9a:	80 e2       	ldi	r24, 0x20	; 32
    1e9c:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1ea6:	26 e8       	ldi	r18, 0x86	; 134
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	89 e3       	ldi	r24, 0x39	; 57
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	b9 01       	movw	r22, r18
    1eb0:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_6;
    1eb4:	80 e4       	ldi	r24, 0x40	; 64
    1eb6:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1ec0:	26 e8       	ldi	r18, 0x86	; 134
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	89 e3       	ldi	r24, 0x39	; 57
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	b9 01       	movw	r22, r18
    1eca:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_7;
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1eda:	26 e8       	ldi	r18, 0x86	; 134
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	89 e3       	ldi	r24, 0x39	; 57
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	b9 01       	movw	r22, r18
    1ee4:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	_delay_ms(15);
    1ee8:	6f e0       	ldi	r22, 0x0F	; 15
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_delay_ms>

	//WRITE IN DATA PINS '';
	//MCAL_GPIO_WritePort(LCD_PORT, )
#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    1ef4:	88 e3       	ldi	r24, 0x38	; 56
    1ef6:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>
#endif
#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif
	LCD_clear_screen();
    1efa:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
    1efe:	8f e0       	ldi	r24, 0x0F	; 15
    1f00:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
    1f04:	86 e0       	ldi	r24, 0x06	; 6
    1f06:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    1f0a:	80 e8       	ldi	r24, 0x80	; 128
    1f0c:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>
}
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <LCD_clear_screen>:


void LCD_clear_screen(){
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <LCD_check_lcd_isbusy>:
 *  If an instruction is sent without checking the busy flag, the time between
 *  the first instruction and next instruction will take much longer than the instruction time itself
 *
 *
 */
void LCD_check_lcd_isbusy(){
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_0;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1f3e:	26 e8       	ldi	r18, 0x86	; 134
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	89 e3       	ldi	r24, 0x39	; 57
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	b9 01       	movw	r22, r18
    1f48:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_1;
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1f58:	26 e8       	ldi	r18, 0x86	; 134
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	89 e3       	ldi	r24, 0x39	; 57
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	b9 01       	movw	r22, r18
    1f62:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_2;
    1f66:	84 e0       	ldi	r24, 0x04	; 4
    1f68:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1f72:	26 e8       	ldi	r18, 0x86	; 134
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	89 e3       	ldi	r24, 0x39	; 57
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	b9 01       	movw	r22, r18
    1f7c:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_3;
    1f80:	88 e0       	ldi	r24, 0x08	; 8
    1f82:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1f8c:	26 e8       	ldi	r18, 0x86	; 134
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	89 e3       	ldi	r24, 0x39	; 57
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	b9 01       	movw	r22, r18
    1f96:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_4;
    1f9a:	80 e1       	ldi	r24, 0x10	; 16
    1f9c:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1fa6:	26 e8       	ldi	r18, 0x86	; 134
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	89 e3       	ldi	r24, 0x39	; 57
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	b9 01       	movw	r22, r18
    1fb0:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_5;
    1fb4:	80 e2       	ldi	r24, 0x20	; 32
    1fb6:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1fc0:	26 e8       	ldi	r18, 0x86	; 134
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	89 e3       	ldi	r24, 0x39	; 57
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	b9 01       	movw	r22, r18
    1fca:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_6;
    1fce:	80 e4       	ldi	r24, 0x40	; 64
    1fd0:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1fda:	26 e8       	ldi	r18, 0x86	; 134
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	89 e3       	ldi	r24, 0x39	; 57
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_7;
    1fe8:	80 e8       	ldi	r24, 0x80	; 128
    1fea:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_Floating;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    1ff4:	26 e8       	ldi	r18, 0x86	; 134
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	89 e3       	ldi	r24, 0x39	; 57
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	b9 01       	movw	r22, r18
    1ffe:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 1); //read mode
    2002:	86 e3       	ldi	r24, 0x36	; 54
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	64 e0       	ldi	r22, 0x04	; 4
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 0);   // instruction mode
    200e:	86 e3       	ldi	r24, 0x36	; 54
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	62 e0       	ldi	r22, 0x02	; 2
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	LCD_lcd_kick();
    201a:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_lcd_kick>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_0;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    202a:	26 e8       	ldi	r18, 0x86	; 134
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	89 e3       	ldi	r24, 0x39	; 57
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	b9 01       	movw	r22, r18
    2034:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_1;
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    203e:	83 e0       	ldi	r24, 0x03	; 3
    2040:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    2044:	26 e8       	ldi	r18, 0x86	; 134
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	89 e3       	ldi	r24, 0x39	; 57
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	b9 01       	movw	r22, r18
    204e:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_2;
    2052:	84 e0       	ldi	r24, 0x04	; 4
    2054:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    2058:	83 e0       	ldi	r24, 0x03	; 3
    205a:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    205e:	26 e8       	ldi	r18, 0x86	; 134
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	89 e3       	ldi	r24, 0x39	; 57
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	b9 01       	movw	r22, r18
    2068:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_3;
    206c:	88 e0       	ldi	r24, 0x08	; 8
    206e:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    2072:	83 e0       	ldi	r24, 0x03	; 3
    2074:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    2078:	26 e8       	ldi	r18, 0x86	; 134
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	89 e3       	ldi	r24, 0x39	; 57
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	b9 01       	movw	r22, r18
    2082:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_4;
    2086:	80 e1       	ldi	r24, 0x10	; 16
    2088:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    208c:	83 e0       	ldi	r24, 0x03	; 3
    208e:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    2092:	26 e8       	ldi	r18, 0x86	; 134
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	89 e3       	ldi	r24, 0x39	; 57
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	b9 01       	movw	r22, r18
    209c:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_5;
    20a0:	80 e2       	ldi	r24, 0x20	; 32
    20a2:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    20ac:	26 e8       	ldi	r18, 0x86	; 134
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	89 e3       	ldi	r24, 0x39	; 57
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	b9 01       	movw	r22, r18
    20b6:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_6;
    20ba:	80 e4       	ldi	r24, 0x40	; 64
    20bc:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    20c6:	26 e8       	ldi	r18, 0x86	; 134
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	89 e3       	ldi	r24, 0x39	; 57
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	b9 01       	movw	r22, r18
    20d0:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	LCD_pinconfig.GPIO_PinNumber=GPIO_PIN_7;
    20d4:	80 e8       	ldi	r24, 0x80	; 128
    20d6:	80 93 86 00 	sts	0x0086, r24
	LCD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	80 93 87 00 	sts	0x0087, r24
	MCAL_GPIO_Init(LCD_PORT,&LCD_pinconfig);
    20e0:	26 e8       	ldi	r18, 0x86	; 134
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	89 e3       	ldi	r24, 0x39	; 57
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	b9 01       	movw	r22, r18
    20ea:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0); //write mode
    20ee:	86 e3       	ldi	r24, 0x36	; 54
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	64 e0       	ldi	r22, 0x04	; 4
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>

}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <LCD_lcd_kick>:
void LCD_lcd_kick()
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, 1);
    2108:	86 e3       	ldi	r24, 0x36	; 54
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	68 e0       	ldi	r22, 0x08	; 8
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	_delay_ms(50);
    2114:	62 e3       	ldi	r22, 0x32	; 50
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, 0);
    2120:	86 e3       	ldi	r24, 0x36	; 54
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	68 e0       	ldi	r22, 0x08	; 8
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>

}
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <LCD_GOTO_XY>:




void LCD_GOTO_XY(unsigned char line, unsigned char position){
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <LCD_GOTO_XY+0x6>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	39 f4       	brne	.+14     	; 0x2154 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	80 31       	cpi	r24, 0x10	; 16
    214a:	20 f4       	brcc	.+8      	; 0x2154 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	80 58       	subi	r24, 0x80	; 128
    2150:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	39 f4       	brne	.+14     	; 0x2168 <LCD_GOTO_XY+0x36>
	{
		if (position < 16 && position >= 0)
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	80 31       	cpi	r24, 0x10	; 16
    215e:	20 f4       	brcc	.+8      	; 0x2168 <LCD_GOTO_XY+0x36>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	80 54       	subi	r24, 0x40	; 64
    2164:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>
		}
	}
}
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <LCD_WRITE_COMMAND>:




void LCD_WRITE_COMMAND(unsigned char command)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_PORT, (uint16_t)(command));
    217e:	89 e3       	ldi	r24, 0x39	; 57
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	69 81       	ldd	r22, Y+1	; 0x01
    2184:	0e 94 c8 0c 	call	0x1990	; 0x1990 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 0);
    2188:	86 e3       	ldi	r24, 0x36	; 54
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	62 e0       	ldi	r22, 0x02	; 2
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
    2194:	86 e3       	ldi	r24, 0x36	; 54
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	64 e0       	ldi	r22, 0x04	; 4
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	_delay_ms(1);
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_delay_ms>
	LCD_lcd_kick();
    21ac:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_lcd_kick>
	_delay_ms(1);
	LCD_lcd_kick();

#endif

}
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	0f 92       	push	r0
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_PORT, (uint16_t)(character));
    21c4:	89 e3       	ldi	r24, 0x39	; 57
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	69 81       	ldd	r22, Y+1	; 0x01
    21ca:	0e 94 c8 0c 	call	0x1990	; 0x1990 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
    21ce:	86 e3       	ldi	r24, 0x36	; 54
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	64 e0       	ldi	r22, 0x04	; 4
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 1);
    21da:	86 e3       	ldi	r24, 0x36	; 54
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	62 e0       	ldi	r22, 0x02	; 2
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	_delay_ms(1);
    21e6:	61 e0       	ldi	r22, 0x01	; 1
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_delay_ms>
	LCD_lcd_kick();
    21f2:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_lcd_kick>
	LCD_CTRL |= (1<<RS_SWITCH); //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	_delay_ms(1);
	LCD_lcd_kick ();
#endif
}
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <LCD_WRITE_Number>:


void LCD_WRITE_Number(unsigned char Number)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <LCD_WRITE_Number+0x6>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char No = Number + 48;
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	80 5d       	subi	r24, 0xD0	; 208
    220e:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();

	MCAL_GPIO_WritePort(LCD_PORT, (uint16_t)(No));
    2210:	89 e3       	ldi	r24, 0x39	; 57
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	69 81       	ldd	r22, Y+1	; 0x01
    2216:	0e 94 c8 0c 	call	0x1990	; 0x1990 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
    221a:	86 e3       	ldi	r24, 0x36	; 54
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	64 e0       	ldi	r22, 0x04	; 4
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 1);
    2226:	86 e3       	ldi	r24, 0x36	; 54
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	62 e0       	ldi	r22, 0x02	; 2
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
	_delay_ms(1);
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_delay_ms>
	LCD_lcd_kick();
    223e:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_lcd_kick>
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	_delay_ms(1);
	LCD_lcd_kick ();
#endif

}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <LCD_WRITE_STRING>:



void LCD_WRITE_STRING(unsigned char* string){
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <LCD_WRITE_STRING+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <LCD_WRITE_STRING+0x8>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    225c:	1a 82       	std	Y+2, r1	; 0x02
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	27 c0       	rjmp	.+78     	; 0x22b0 <LCD_WRITE_STRING+0x64>
	while (*string != '\0')
	{
		count++;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
		LCD_WRITE_CHAR(*string++);
    226c:	eb 81       	ldd	r30, Y+3	; 0x03
    226e:	fc 81       	ldd	r31, Y+4	; 0x04
    2270:	20 81       	ld	r18, Z
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	8b 83       	std	Y+3, r24	; 0x03
    227c:	82 2f       	mov	r24, r18
    227e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>
		if (count == 16)
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	80 31       	cpi	r24, 0x10	; 16
    2288:	91 05       	cpc	r25, r1
    228a:	29 f4       	brne	.+10     	; 0x2296 <LCD_WRITE_STRING+0x4a>
		{
			LCD_GOTO_XY(2,0);
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GOTO_XY>
    2294:	0d c0       	rjmp	.+26     	; 0x22b0 <LCD_WRITE_STRING+0x64>
		}
		else if (count == 32)
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	9a 81       	ldd	r25, Y+2	; 0x02
    229a:	80 32       	cpi	r24, 0x20	; 32
    229c:	91 05       	cpc	r25, r1
    229e:	41 f4       	brne	.+16     	; 0x22b0 <LCD_WRITE_STRING+0x64>
		{
			LCD_clear_screen();
    22a0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GOTO_XY>
			count = 0;
    22ac:	1a 82       	std	Y+2, r1	; 0x02
    22ae:	19 82       	std	Y+1, r1	; 0x01



void LCD_WRITE_STRING(unsigned char* string){
	int count = 0;
	while (*string != '\0')
    22b0:	eb 81       	ldd	r30, Y+3	; 0x03
    22b2:	fc 81       	ldd	r31, Y+4	; 0x04
    22b4:	80 81       	ld	r24, Z
    22b6:	88 23       	and	r24, r24
    22b8:	a1 f6       	brne	.-88     	; 0x2262 <LCD_WRITE_STRING+0x16>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <LCD_Generate_Ch>:


void LCD_Generate_Ch(void)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62

	// Set CGRAM address to 0
	LCD_WRITE_COMMAND(64);
    22d0:	80 e4       	ldi	r24, 0x40	; 64
    22d2:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>

	// Define the heart shape
	LCD_WRITE_CHAR(0b00000); // Row 1
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b01010); // Row 2
    22dc:	8a e0       	ldi	r24, 0x0A	; 10
    22de:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11111); // Row 3
    22e2:	8f e1       	ldi	r24, 0x1F	; 31
    22e4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11111); // Row 4
    22e8:	8f e1       	ldi	r24, 0x1F	; 31
    22ea:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11111); // Row 5
    22ee:	8f e1       	ldi	r24, 0x1F	; 31
    22f0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b01110); // Row 6
    22f4:	8e e0       	ldi	r24, 0x0E	; 14
    22f6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00100); // Row 7
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000); // Row 8
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>

	// Move cursor to the beginning of the first row
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    2306:	80 e8       	ldi	r24, 0x80	; 128
    2308:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_WRITE_COMMAND>

	// Display the custom character
	LCD_WRITE_CHAR(0);
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_WRITE_CHAR>

	// Small delay
	_delay_ms(10000);
    2312:	60 e1       	ldi	r22, 0x10	; 16
    2314:	77 e2       	ldi	r23, 0x27	; 39
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_delay_ms>

}
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <Wait_ms>:
int Key_padCol[] = {C0, C1, C2, C3};//columns

GPIO_PinConfig_t KEYPAD_pinconfig;


void Wait_ms(uint32_t time) {
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	2c 97       	sbiw	r28, 0x0c	; 12
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	69 87       	std	Y+9, r22	; 0x09
    233a:	7a 87       	std	Y+10, r23	; 0x0a
    233c:	8b 87       	std	Y+11, r24	; 0x0b
    233e:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t i, j;
	for (i = 0; i < time; i++)
    2340:	1d 82       	std	Y+5, r1	; 0x05
    2342:	1e 82       	std	Y+6, r1	; 0x06
    2344:	1f 82       	std	Y+7, r1	; 0x07
    2346:	18 86       	std	Y+8, r1	; 0x08
    2348:	24 c0       	rjmp	.+72     	; 0x2392 <Wait_ms+0x6e>
		for (j = 0; j < 255; j++)
    234a:	19 82       	std	Y+1, r1	; 0x01
    234c:	1a 82       	std	Y+2, r1	; 0x02
    234e:	1b 82       	std	Y+3, r1	; 0x03
    2350:	1c 82       	std	Y+4, r1	; 0x04
    2352:	0b c0       	rjmp	.+22     	; 0x236a <Wait_ms+0x46>
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	ab 81       	ldd	r26, Y+3	; 0x03
    235a:	bc 81       	ldd	r27, Y+4	; 0x04
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	a1 1d       	adc	r26, r1
    2360:	b1 1d       	adc	r27, r1
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	ab 83       	std	Y+3, r26	; 0x03
    2368:	bc 83       	std	Y+4, r27	; 0x04
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	ab 81       	ldd	r26, Y+3	; 0x03
    2370:	bc 81       	ldd	r27, Y+4	; 0x04
    2372:	8f 3f       	cpi	r24, 0xFF	; 255
    2374:	91 05       	cpc	r25, r1
    2376:	a1 05       	cpc	r26, r1
    2378:	b1 05       	cpc	r27, r1
    237a:	60 f3       	brcs	.-40     	; 0x2354 <Wait_ms+0x30>
GPIO_PinConfig_t KEYPAD_pinconfig;


void Wait_ms(uint32_t time) {
	uint32_t i, j;
	for (i = 0; i < time; i++)
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	af 81       	ldd	r26, Y+7	; 0x07
    2382:	b8 85       	ldd	r27, Y+8	; 0x08
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	a1 1d       	adc	r26, r1
    2388:	b1 1d       	adc	r27, r1
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	af 83       	std	Y+7, r26	; 0x07
    2390:	b8 87       	std	Y+8, r27	; 0x08
    2392:	2d 81       	ldd	r18, Y+5	; 0x05
    2394:	3e 81       	ldd	r19, Y+6	; 0x06
    2396:	4f 81       	ldd	r20, Y+7	; 0x07
    2398:	58 85       	ldd	r21, Y+8	; 0x08
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	ab 85       	ldd	r26, Y+11	; 0x0b
    23a0:	bc 85       	ldd	r27, Y+12	; 0x0c
    23a2:	28 17       	cp	r18, r24
    23a4:	39 07       	cpc	r19, r25
    23a6:	4a 07       	cpc	r20, r26
    23a8:	5b 07       	cpc	r21, r27
    23aa:	78 f2       	brcs	.-98     	; 0x234a <Wait_ms+0x26>
		for (j = 0; j < 255; j++)
			;
}
    23ac:	2c 96       	adiw	r28, 0x0c	; 12
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <Keypad_init>:

void Keypad_init()
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62

	KEYPAD_pinconfig.GPIO_PinNumber=R0;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 88 00 	sts	0x0088, r24
	KEYPAD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_pull_up;
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	80 93 89 00 	sts	0x0089, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&KEYPAD_pinconfig);
    23d2:	28 e8       	ldi	r18, 0x88	; 136
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	80 e3       	ldi	r24, 0x30	; 48
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	b9 01       	movw	r22, r18
    23dc:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	KEYPAD_pinconfig.GPIO_PinNumber=R1;
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	80 93 88 00 	sts	0x0088, r24
	KEYPAD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_pull_up;
    23e6:	82 e0       	ldi	r24, 0x02	; 2
    23e8:	80 93 89 00 	sts	0x0089, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&KEYPAD_pinconfig);
    23ec:	28 e8       	ldi	r18, 0x88	; 136
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	80 e3       	ldi	r24, 0x30	; 48
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	b9 01       	movw	r22, r18
    23f6:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	KEYPAD_pinconfig.GPIO_PinNumber=R2;
    23fa:	84 e0       	ldi	r24, 0x04	; 4
    23fc:	80 93 88 00 	sts	0x0088, r24
	KEYPAD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_pull_up;
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	80 93 89 00 	sts	0x0089, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&KEYPAD_pinconfig);
    2406:	28 e8       	ldi	r18, 0x88	; 136
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	80 e3       	ldi	r24, 0x30	; 48
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	b9 01       	movw	r22, r18
    2410:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	KEYPAD_pinconfig.GPIO_PinNumber=R3;
    2414:	88 e0       	ldi	r24, 0x08	; 8
    2416:	80 93 88 00 	sts	0x0088, r24
	KEYPAD_pinconfig.GPIO_Mode=GPIO_Mode_Inp_pull_up;
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	80 93 89 00 	sts	0x0089, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&KEYPAD_pinconfig);
    2420:	28 e8       	ldi	r18, 0x88	; 136
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	b9 01       	movw	r22, r18
    242a:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	KEYPAD_pinconfig.GPIO_PinNumber=C0;
    242e:	80 e1       	ldi	r24, 0x10	; 16
    2430:	80 93 88 00 	sts	0x0088, r24
	KEYPAD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	80 93 89 00 	sts	0x0089, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&KEYPAD_pinconfig);
    243a:	28 e8       	ldi	r18, 0x88	; 136
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	80 e3       	ldi	r24, 0x30	; 48
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	b9 01       	movw	r22, r18
    2444:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	KEYPAD_pinconfig.GPIO_PinNumber=C1;
    2448:	80 e2       	ldi	r24, 0x20	; 32
    244a:	80 93 88 00 	sts	0x0088, r24
	KEYPAD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	80 93 89 00 	sts	0x0089, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&KEYPAD_pinconfig);
    2454:	28 e8       	ldi	r18, 0x88	; 136
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	80 e3       	ldi	r24, 0x30	; 48
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	b9 01       	movw	r22, r18
    245e:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	KEYPAD_pinconfig.GPIO_PinNumber=C2;
    2462:	80 e4       	ldi	r24, 0x40	; 64
    2464:	80 93 88 00 	sts	0x0088, r24
	KEYPAD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	80 93 89 00 	sts	0x0089, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&KEYPAD_pinconfig);
    246e:	28 e8       	ldi	r18, 0x88	; 136
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	80 e3       	ldi	r24, 0x30	; 48
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	b9 01       	movw	r22, r18
    2478:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>

	KEYPAD_pinconfig.GPIO_PinNumber=C3;
    247c:	80 e8       	ldi	r24, 0x80	; 128
    247e:	80 93 88 00 	sts	0x0088, r24
	KEYPAD_pinconfig.GPIO_Mode=GPIO_Mode_Out_push_pull;
    2482:	83 e0       	ldi	r24, 0x03	; 3
    2484:	80 93 89 00 	sts	0x0089, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&KEYPAD_pinconfig);
    2488:	28 e8       	ldi	r18, 0x88	; 136
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	80 e3       	ldi	r24, 0x30	; 48
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	b9 01       	movw	r22, r18
    2492:	0e 94 16 0c 	call	0x182c	; 0x182c <MCAL_GPIO_Init>


	MCAL_GPIO_WritePort(KEYPAD_PORT, 0XFF);
    2496:	80 e3       	ldi	r24, 0x30	; 48
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	6f ef       	ldi	r22, 0xFF	; 255
    249c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <MCAL_GPIO_WritePort>
}
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <Keypad_getkey>:

char Keypad_getkey()
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	27 97       	sbiw	r28, 0x07	; 7
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	for (i = 0; i < 4; i++)
    24ba:	1c 82       	std	Y+4, r1	; 0x04
    24bc:	1b 82       	std	Y+3, r1	; 0x03
    24be:	10 c1       	rjmp	.+544    	; 0x26e0 <Keypad_getkey+0x23a>
	{
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], 1);
    24c0:	80 91 72 00 	lds	r24, 0x0072
    24c4:	90 91 73 00 	lds	r25, 0x0073
    24c8:	28 2f       	mov	r18, r24
    24ca:	80 e3       	ldi	r24, 0x30	; 48
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	62 2f       	mov	r22, r18
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], 1);
    24d6:	80 91 74 00 	lds	r24, 0x0074
    24da:	90 91 75 00 	lds	r25, 0x0075
    24de:	28 2f       	mov	r18, r24
    24e0:	80 e3       	ldi	r24, 0x30	; 48
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	62 2f       	mov	r22, r18
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], 1);
    24ec:	80 91 76 00 	lds	r24, 0x0076
    24f0:	90 91 77 00 	lds	r25, 0x0077
    24f4:	28 2f       	mov	r18, r24
    24f6:	80 e3       	ldi	r24, 0x30	; 48
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	62 2f       	mov	r22, r18
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], 1);
    2502:	80 91 78 00 	lds	r24, 0x0078
    2506:	90 91 79 00 	lds	r25, 0x0079
    250a:	28 2f       	mov	r18, r24
    250c:	80 e3       	ldi	r24, 0x30	; 48
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	62 2f       	mov	r22, r18
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], 0);
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	fc 01       	movw	r30, r24
    2522:	ee 58       	subi	r30, 0x8E	; 142
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	28 2f       	mov	r18, r24
    252c:	80 e3       	ldi	r24, 0x30	; 48
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	62 2f       	mov	r22, r18
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MCAL_GPIO_WritePin>

		for(j = 0; j < 4; j++)
    2538:	1a 82       	std	Y+2, r1	; 0x02
    253a:	19 82       	std	Y+1, r1	; 0x01
    253c:	c6 c0       	rjmp	.+396    	; 0x26ca <Keypad_getkey+0x224>
		{
			if ( (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])) == 0 )
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	fc 01       	movw	r30, r24
    2548:	e6 59       	subi	r30, 0x96	; 150
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 81       	ld	r24, Z
    254e:	91 81       	ldd	r25, Z+1	; 0x01
    2550:	28 2f       	mov	r18, r24
    2552:	80 e3       	ldi	r24, 0x30	; 48
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	62 2f       	mov	r22, r18
    2558:	0e 94 76 0c 	call	0x18ec	; 0x18ec <MCAL_GPIO_ReadPin>
    255c:	88 23       	and	r24, r24
    255e:	09 f0       	breq	.+2      	; 0x2562 <Keypad_getkey+0xbc>
    2560:	af c0       	rjmp	.+350    	; 0x26c0 <Keypad_getkey+0x21a>
			{

				while((MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])) == 0);
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	fc 01       	movw	r30, r24
    256c:	e6 59       	subi	r30, 0x96	; 150
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	28 2f       	mov	r18, r24
    2576:	80 e3       	ldi	r24, 0x30	; 48
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	62 2f       	mov	r22, r18
    257c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <MCAL_GPIO_ReadPin>
    2580:	88 23       	and	r24, r24
    2582:	79 f3       	breq	.-34     	; 0x2562 <Keypad_getkey+0xbc>
				switch(i){
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	9f 83       	std	Y+7, r25	; 0x07
    258a:	8e 83       	std	Y+6, r24	; 0x06
    258c:	8e 81       	ldd	r24, Y+6	; 0x06
    258e:	9f 81       	ldd	r25, Y+7	; 0x07
    2590:	81 30       	cpi	r24, 0x01	; 1
    2592:	91 05       	cpc	r25, r1
    2594:	b9 f1       	breq	.+110    	; 0x2604 <Keypad_getkey+0x15e>
    2596:	8e 81       	ldd	r24, Y+6	; 0x06
    2598:	9f 81       	ldd	r25, Y+7	; 0x07
    259a:	82 30       	cpi	r24, 0x02	; 2
    259c:	91 05       	cpc	r25, r1
    259e:	2c f4       	brge	.+10     	; 0x25aa <Keypad_getkey+0x104>
    25a0:	8e 81       	ldd	r24, Y+6	; 0x06
    25a2:	9f 81       	ldd	r25, Y+7	; 0x07
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	71 f0       	breq	.+28     	; 0x25c4 <Keypad_getkey+0x11e>
    25a8:	8b c0       	rjmp	.+278    	; 0x26c0 <Keypad_getkey+0x21a>
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	91 05       	cpc	r25, r1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <Keypad_getkey+0x110>
    25b4:	47 c0       	rjmp	.+142    	; 0x2644 <Keypad_getkey+0x19e>
    25b6:	8e 81       	ldd	r24, Y+6	; 0x06
    25b8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ba:	83 30       	cpi	r24, 0x03	; 3
    25bc:	91 05       	cpc	r25, r1
    25be:	09 f4       	brne	.+2      	; 0x25c2 <Keypad_getkey+0x11c>
    25c0:	60 c0       	rjmp	.+192    	; 0x2682 <Keypad_getkey+0x1dc>
    25c2:	7e c0       	rjmp	.+252    	; 0x26c0 <Keypad_getkey+0x21a>
				case (0):
					if (j == 0) return '7';
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	19 f4       	brne	.+6      	; 0x25d2 <Keypad_getkey+0x12c>
    25cc:	97 e3       	ldi	r25, 0x37	; 55
    25ce:	9d 83       	std	Y+5, r25	; 0x05
    25d0:	8f c0       	rjmp	.+286    	; 0x26f0 <Keypad_getkey+0x24a>
				    else if (j == 1) return '4';
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	9a 81       	ldd	r25, Y+2	; 0x02
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	91 05       	cpc	r25, r1
    25da:	19 f4       	brne	.+6      	; 0x25e2 <Keypad_getkey+0x13c>
    25dc:	84 e3       	ldi	r24, 0x34	; 52
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	87 c0       	rjmp	.+270    	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 2) return '1';
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	9a 81       	ldd	r25, Y+2	; 0x02
    25e6:	82 30       	cpi	r24, 0x02	; 2
    25e8:	91 05       	cpc	r25, r1
    25ea:	19 f4       	brne	.+6      	; 0x25f2 <Keypad_getkey+0x14c>
    25ec:	91 e3       	ldi	r25, 0x31	; 49
    25ee:	9d 83       	std	Y+5, r25	; 0x05
    25f0:	7f c0       	rjmp	.+254    	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 3) return '?';
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	83 30       	cpi	r24, 0x03	; 3
    25f8:	91 05       	cpc	r25, r1
    25fa:	09 f0       	breq	.+2      	; 0x25fe <Keypad_getkey+0x158>
    25fc:	61 c0       	rjmp	.+194    	; 0x26c0 <Keypad_getkey+0x21a>
    25fe:	8f e3       	ldi	r24, 0x3F	; 63
    2600:	8d 83       	std	Y+5, r24	; 0x05
    2602:	76 c0       	rjmp	.+236    	; 0x26f0 <Keypad_getkey+0x24a>
					break;
				case (1):
					if (j == 0) return '8';
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	19 f4       	brne	.+6      	; 0x2612 <Keypad_getkey+0x16c>
    260c:	98 e3       	ldi	r25, 0x38	; 56
    260e:	9d 83       	std	Y+5, r25	; 0x05
    2610:	6f c0       	rjmp	.+222    	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 1) return '5';
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	81 30       	cpi	r24, 0x01	; 1
    2618:	91 05       	cpc	r25, r1
    261a:	19 f4       	brne	.+6      	; 0x2622 <Keypad_getkey+0x17c>
    261c:	85 e3       	ldi	r24, 0x35	; 53
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	67 c0       	rjmp	.+206    	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 2) return '2';
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	91 05       	cpc	r25, r1
    262a:	19 f4       	brne	.+6      	; 0x2632 <Keypad_getkey+0x18c>
    262c:	92 e3       	ldi	r25, 0x32	; 50
    262e:	9d 83       	std	Y+5, r25	; 0x05
    2630:	5f c0       	rjmp	.+190    	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 3) return '0';
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	83 30       	cpi	r24, 0x03	; 3
    2638:	91 05       	cpc	r25, r1
    263a:	09 f0       	breq	.+2      	; 0x263e <Keypad_getkey+0x198>
    263c:	41 c0       	rjmp	.+130    	; 0x26c0 <Keypad_getkey+0x21a>
    263e:	80 e3       	ldi	r24, 0x30	; 48
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	56 c0       	rjmp	.+172    	; 0x26f0 <Keypad_getkey+0x24a>
					break;
				case (2):
					if (j == 0) return '9';
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	19 f4       	brne	.+6      	; 0x2652 <Keypad_getkey+0x1ac>
    264c:	99 e3       	ldi	r25, 0x39	; 57
    264e:	9d 83       	std	Y+5, r25	; 0x05
    2650:	4f c0       	rjmp	.+158    	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 1) return '6';
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	91 05       	cpc	r25, r1
    265a:	19 f4       	brne	.+6      	; 0x2662 <Keypad_getkey+0x1bc>
    265c:	86 e3       	ldi	r24, 0x36	; 54
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	47 c0       	rjmp	.+142    	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 2) return '3';
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	82 30       	cpi	r24, 0x02	; 2
    2668:	91 05       	cpc	r25, r1
    266a:	19 f4       	brne	.+6      	; 0x2672 <Keypad_getkey+0x1cc>
    266c:	93 e3       	ldi	r25, 0x33	; 51
    266e:	9d 83       	std	Y+5, r25	; 0x05
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 3) return '=';
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	83 30       	cpi	r24, 0x03	; 3
    2678:	91 05       	cpc	r25, r1
    267a:	11 f5       	brne	.+68     	; 0x26c0 <Keypad_getkey+0x21a>
    267c:	8d e3       	ldi	r24, 0x3D	; 61
    267e:	8d 83       	std	Y+5, r24	; 0x05
    2680:	37 c0       	rjmp	.+110    	; 0x26f0 <Keypad_getkey+0x24a>
					break;
				case (3):
					if (j == 0) return '/';
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	19 f4       	brne	.+6      	; 0x2690 <Keypad_getkey+0x1ea>
    268a:	9f e2       	ldi	r25, 0x2F	; 47
    268c:	9d 83       	std	Y+5, r25	; 0x05
    268e:	30 c0       	rjmp	.+96     	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 1) return '*';
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	81 30       	cpi	r24, 0x01	; 1
    2696:	91 05       	cpc	r25, r1
    2698:	19 f4       	brne	.+6      	; 0x26a0 <Keypad_getkey+0x1fa>
    269a:	8a e2       	ldi	r24, 0x2A	; 42
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	28 c0       	rjmp	.+80     	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 2) return '-';
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	91 05       	cpc	r25, r1
    26a8:	19 f4       	brne	.+6      	; 0x26b0 <Keypad_getkey+0x20a>
    26aa:	9d e2       	ldi	r25, 0x2D	; 45
    26ac:	9d 83       	std	Y+5, r25	; 0x05
    26ae:	20 c0       	rjmp	.+64     	; 0x26f0 <Keypad_getkey+0x24a>
					else if (j == 3) return '+';
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	83 30       	cpi	r24, 0x03	; 3
    26b6:	91 05       	cpc	r25, r1
    26b8:	19 f4       	brne	.+6      	; 0x26c0 <Keypad_getkey+0x21a>
    26ba:	8b e2       	ldi	r24, 0x2B	; 43
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	18 c0       	rjmp	.+48     	; 0x26f0 <Keypad_getkey+0x24a>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], 1);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], 1);

		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], 0);

		for(j = 0; j < 4; j++)
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	9a 81       	ldd	r25, Y+2	; 0x02
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	84 30       	cpi	r24, 0x04	; 4
    26d0:	91 05       	cpc	r25, r1
    26d2:	0c f4       	brge	.+2      	; 0x26d6 <Keypad_getkey+0x230>
    26d4:	34 cf       	rjmp	.-408    	; 0x253e <Keypad_getkey+0x98>
}

char Keypad_getkey()
{
	int i,j;
	for (i = 0; i < 4; i++)
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	9c 81       	ldd	r25, Y+4	; 0x04
    26e4:	84 30       	cpi	r24, 0x04	; 4
    26e6:	91 05       	cpc	r25, r1
    26e8:	0c f4       	brge	.+2      	; 0x26ec <Keypad_getkey+0x246>
    26ea:	ea ce       	rjmp	.-556    	; 0x24c0 <Keypad_getkey+0x1a>
				break;
				}
			}
		}
	}
	return 'A';
    26ec:	91 e4       	ldi	r25, 0x41	; 65
    26ee:	9d 83       	std	Y+5, r25	; 0x05
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    26f2:	27 96       	adiw	r28, 0x07	; 7
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <main>:
#define F_CPU 1000000UL



int main()
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	2f 97       	sbiw	r28, 0x0f	; 15
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    unsigned char ch=0;
    2718:	1f 86       	std	Y+15, r1	; 0x0f
	MCAL_I2C_Init(0x48);
    271a:	68 e4       	ldi	r22, 0x48	; 72
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 ae 0b 	call	0x175c	; 0x175c <MCAL_I2C_Init>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	aa ef       	ldi	r26, 0xFA	; 250
    272c:	b3 e4       	ldi	r27, 0x43	; 67
    272e:	8b 87       	std	Y+11, r24	; 0x0b
    2730:	9c 87       	std	Y+12, r25	; 0x0c
    2732:	ad 87       	std	Y+13, r26	; 0x0d
    2734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	6b 85       	ldd	r22, Y+11	; 0x0b
    2738:	7c 85       	ldd	r23, Y+12	; 0x0c
    273a:	8d 85       	ldd	r24, Y+13	; 0x0d
    273c:	9e 85       	ldd	r25, Y+14	; 0x0e
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a e7       	ldi	r20, 0x7A	; 122
    2744:	53 e4       	ldi	r21, 0x43	; 67
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8f 83       	std	Y+7, r24	; 0x07
    2750:	98 87       	std	Y+8, r25	; 0x08
    2752:	a9 87       	std	Y+9, r26	; 0x09
    2754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2756:	6f 81       	ldd	r22, Y+7	; 0x07
    2758:	78 85       	ldd	r23, Y+8	; 0x08
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <main+0x74>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <main+0xf2>
	else if (__tmp > 65535)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	6b 85       	ldd	r22, Y+11	; 0x0b
    2792:	7c 85       	ldd	r23, Y+12	; 0x0c
    2794:	8d 85       	ldd	r24, Y+13	; 0x0d
    2796:	9e 85       	ldd	r25, Y+14	; 0x0e
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <main+0xd4>
    27ba:	89 e1       	ldi	r24, 0x19	; 25
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <main+0xc2>
    27ca:	9c 83       	std	Y+4, r25	; 0x04
    27cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <main+0xb6>
    27e0:	14 c0       	rjmp	.+40     	; 0x280a <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <main+0xfe>
    2806:	9a 83       	std	Y+2, r25	; 0x02
    2808:	89 83       	std	Y+1, r24	; 0x01
    while (1)
    {
		_delay_ms(500);
		MCAL_I2C_Start();                   		  //Transmit Start Condition
    280a:	0e 94 df 0b 	call	0x17be	; 0x17be <MCAL_I2C_Start>
		MCAL_I2C_Write(0b11010000+0);       		  //Transmit  SLA[slave address] + W(0)
    280e:	80 ed       	ldi	r24, 0xD0	; 208
    2810:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <MCAL_I2C_Write>
		while ((I2C->TWSR) != 0x18);       			  //SLA + W(0) has been transmitted and ACK has been Received
    2814:	e0 e2       	ldi	r30, 0x20	; 32
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	81 81       	ldd	r24, Z+1	; 0x01
    281a:	88 31       	cpi	r24, 0x18	; 24
    281c:	d9 f7       	brne	.-10     	; 0x2814 <main+0x110>
		MCAL_I2C_Write(ch++);             				  // Transmit Data
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	9f 85       	ldd	r25, Y+15	; 0x0f
    2822:	9f 5f       	subi	r25, 0xFF	; 255
    2824:	9f 87       	std	Y+15, r25	; 0x0f
    2826:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <MCAL_I2C_Write>
		while ((I2C->TWSR) != 0x28);     			  //Data has been transmitted and ACK has been Received
    282a:	e0 e2       	ldi	r30, 0x20	; 32
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	81 81       	ldd	r24, Z+1	; 0x01
    2830:	88 32       	cpi	r24, 0x28	; 40
    2832:	d9 f7       	brne	.-10     	; 0x282a <main+0x126>
		MCAL_I2C_Stop();                					  //Transmit Stop condition
    2834:	0e 94 0b 0c 	call	0x1816	; 0x1816 <MCAL_I2C_Stop>
    2838:	76 cf       	rjmp	.-276    	; 0x2726 <main+0x22>

0000283a <__udivmodqi4>:
    283a:	99 1b       	sub	r25, r25
    283c:	79 e0       	ldi	r23, 0x09	; 9
    283e:	04 c0       	rjmp	.+8      	; 0x2848 <__udivmodqi4_ep>

00002840 <__udivmodqi4_loop>:
    2840:	99 1f       	adc	r25, r25
    2842:	96 17       	cp	r25, r22
    2844:	08 f0       	brcs	.+2      	; 0x2848 <__udivmodqi4_ep>
    2846:	96 1b       	sub	r25, r22

00002848 <__udivmodqi4_ep>:
    2848:	88 1f       	adc	r24, r24
    284a:	7a 95       	dec	r23
    284c:	c9 f7       	brne	.-14     	; 0x2840 <__udivmodqi4_loop>
    284e:	80 95       	com	r24
    2850:	08 95       	ret

00002852 <__udivmodsi4>:
    2852:	a1 e2       	ldi	r26, 0x21	; 33
    2854:	1a 2e       	mov	r1, r26
    2856:	aa 1b       	sub	r26, r26
    2858:	bb 1b       	sub	r27, r27
    285a:	fd 01       	movw	r30, r26
    285c:	0d c0       	rjmp	.+26     	; 0x2878 <__udivmodsi4_ep>

0000285e <__udivmodsi4_loop>:
    285e:	aa 1f       	adc	r26, r26
    2860:	bb 1f       	adc	r27, r27
    2862:	ee 1f       	adc	r30, r30
    2864:	ff 1f       	adc	r31, r31
    2866:	a2 17       	cp	r26, r18
    2868:	b3 07       	cpc	r27, r19
    286a:	e4 07       	cpc	r30, r20
    286c:	f5 07       	cpc	r31, r21
    286e:	20 f0       	brcs	.+8      	; 0x2878 <__udivmodsi4_ep>
    2870:	a2 1b       	sub	r26, r18
    2872:	b3 0b       	sbc	r27, r19
    2874:	e4 0b       	sbc	r30, r20
    2876:	f5 0b       	sbc	r31, r21

00002878 <__udivmodsi4_ep>:
    2878:	66 1f       	adc	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	88 1f       	adc	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	1a 94       	dec	r1
    2882:	69 f7       	brne	.-38     	; 0x285e <__udivmodsi4_loop>
    2884:	60 95       	com	r22
    2886:	70 95       	com	r23
    2888:	80 95       	com	r24
    288a:	90 95       	com	r25
    288c:	9b 01       	movw	r18, r22
    288e:	ac 01       	movw	r20, r24
    2890:	bd 01       	movw	r22, r26
    2892:	cf 01       	movw	r24, r30
    2894:	08 95       	ret

00002896 <__prologue_saves__>:
    2896:	2f 92       	push	r2
    2898:	3f 92       	push	r3
    289a:	4f 92       	push	r4
    289c:	5f 92       	push	r5
    289e:	6f 92       	push	r6
    28a0:	7f 92       	push	r7
    28a2:	8f 92       	push	r8
    28a4:	9f 92       	push	r9
    28a6:	af 92       	push	r10
    28a8:	bf 92       	push	r11
    28aa:	cf 92       	push	r12
    28ac:	df 92       	push	r13
    28ae:	ef 92       	push	r14
    28b0:	ff 92       	push	r15
    28b2:	0f 93       	push	r16
    28b4:	1f 93       	push	r17
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	ca 1b       	sub	r28, r26
    28c0:	db 0b       	sbc	r29, r27
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	09 94       	ijmp

000028ce <__epilogue_restores__>:
    28ce:	2a 88       	ldd	r2, Y+18	; 0x12
    28d0:	39 88       	ldd	r3, Y+17	; 0x11
    28d2:	48 88       	ldd	r4, Y+16	; 0x10
    28d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    28d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    28d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    28da:	8c 84       	ldd	r8, Y+12	; 0x0c
    28dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    28de:	aa 84       	ldd	r10, Y+10	; 0x0a
    28e0:	b9 84       	ldd	r11, Y+9	; 0x09
    28e2:	c8 84       	ldd	r12, Y+8	; 0x08
    28e4:	df 80       	ldd	r13, Y+7	; 0x07
    28e6:	ee 80       	ldd	r14, Y+6	; 0x06
    28e8:	fd 80       	ldd	r15, Y+5	; 0x05
    28ea:	0c 81       	ldd	r16, Y+4	; 0x04
    28ec:	1b 81       	ldd	r17, Y+3	; 0x03
    28ee:	aa 81       	ldd	r26, Y+2	; 0x02
    28f0:	b9 81       	ldd	r27, Y+1	; 0x01
    28f2:	ce 0f       	add	r28, r30
    28f4:	d1 1d       	adc	r29, r1
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	ed 01       	movw	r28, r26
    2902:	08 95       	ret

00002904 <_exit>:
    2904:	f8 94       	cli

00002906 <__stop_program>:
    2906:	ff cf       	rjmp	.-2      	; 0x2906 <__stop_program>
