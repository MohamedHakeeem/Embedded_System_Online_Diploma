
;; Function _sbrk (_sbrk, funcdef_no=0, decl_uid=4470, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=32, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can't eliminate 103 to 11 (offset=8, prev_offset=0)
Can eliminate 103 to 7 (offset=32, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can't eliminate 102 to 11 (offset=0, prev_offset=0)
Can eliminate 102 to 7 (offset=24, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=24,losers=2,rld_nregs=1
            1 Costly set: reject++
          alt=6,overall=1,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 2:  (0) m  (1) lk*r {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =l  (1) l  (2) l {*arm_subsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=22,losers=2,rld_nregs=1
            1 Costly set: reject++
          alt=6,overall=1,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 9:  (0) m  (1) lk*r {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=22,losers=2,rld_nregs=1
            1 Costly set: reject++
          alt=6,overall=1,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 11:  (0) m  (1) lk*r {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) l  (1) Py {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=22,losers=2,rld_nregs=1
            1 Costly set: reject++
          alt=6,overall=1,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) m  (1) lk*r {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =rk  (1) %0  (2) rk {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) r {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) I {*thumb2_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=22,losers=2,rld_nregs=1
            1 Costly set: reject++
          alt=6,overall=1,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 33:  (0) m  (1) lk*r {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) I {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=22,losers=2,rld_nregs=1
            1 Costly set: reject++
          alt=6,overall=1,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 41:  (0) m  (1) lk*r {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =rk  (1) %0  (2) rk {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 46:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=22,losers=2,rld_nregs=1
            1 Costly set: reject++
          alt=6,overall=1,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 47:  (0) m  (1) lk*r {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            0 Costly set: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) lk*r  (1) mi {*thumb2_movsi_insn}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 56: point = 0, n_alt = -1
   Insn 55: point = 0, n_alt = -2
   Insn 51: point = 1, n_alt = -2
  BB 5
   Insn 58: point = 4, n_alt = -1
   Insn 34: point = 4, n_alt = 1
   Insn 33: point = 5, n_alt = 6
   Insn 32: point = 6, n_alt = 1
   Insn 31: point = 7, n_alt = -2
   Insn 30: point = 8, n_alt = -1
  BB 6
   Insn 48: point = 8, n_alt = 5
   Insn 47: point = 9, n_alt = 6
   Insn 46: point = 10, n_alt = 5
   Insn 45: point = 11, n_alt = 0
   Insn 44: point = 13, n_alt = 5
   Insn 43: point = 14, n_alt = 5
   Insn 42: point = 16, n_alt = 5
   Insn 41: point = 17, n_alt = 6
   Insn 40: point = 18, n_alt = 5
   Insn 39: point = 20, n_alt = 5
  BB 4
   Insn 28: point = 21, n_alt = -1
   Insn 27: point = 21, n_alt = 1
   Insn 26: point = 22, n_alt = 5
   Insn 25: point = 23, n_alt = 0
   Insn 24: point = 25, n_alt = 5
   Insn 23: point = 26, n_alt = 5
   Insn 22: point = 28, n_alt = 5
  BB 3
   Insn 19: point = 29, n_alt = 6
   Insn 18: point = 30, n_alt = 5
   Insn 17: point = 31, n_alt = 5
  BB 2
   Insn 15: point = 32, n_alt = -1
   Insn 14: point = 32, n_alt = 0
   Insn 13: point = 33, n_alt = 5
   Insn 12: point = 35, n_alt = 5
   Insn 11: point = 36, n_alt = 6
   Insn 10: point = 37, n_alt = 5
   Insn 9: point = 38, n_alt = 6
   Insn 8: point = 39, n_alt = 0
   Insn 7: point = 41, n_alt = 5
   Insn 6: point = 42, n_alt = 5
   Insn 2: point = 43, n_alt = 6
 r113: [40..42]
 r114: [40..41]
 r115: [32..33]
 r116: [24..26]
 r117: [24..25]
 r118: [21..23]
 r119: [5..7]
 r120: [12..14]
 r121: [12..13]
 r122: [9..11]
 r123: [8..8] [2..4]
 r124: [0..1]
 r125: [38..39]
 r126: [36..37]
 r127: [34..35]
 r128: [29..31]
 r129: [29..30]
 r130: [27..28]
 r131: [21..22]
 r132: [5..6]
 r133: [19..20]
 r134: [17..18]
 r135: [15..16]
 r136: [9..10]
Compressing live ranges: from 43 to 35 - 81%
Ranges after the compression:
 r113: [33..34]
 r114: [33..34]
 r115: [25..26]
 r116: [19..20]
 r117: [19..20]
 r118: [17..18]
 r119: [4..5]
 r120: [9..10]
 r121: [9..10]
 r122: [7..8]
 r123: [6..6] [2..3]
 r124: [0..1]
 r125: [31..32]
 r126: [29..30]
 r127: [27..28]
 r128: [23..24]
 r129: [23..24]
 r130: [21..22]
 r131: [17..18]
 r132: [4..5]
 r133: [15..16]
 r134: [13..14]
 r135: [11..12]
 r136: [7..8]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=32, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can't eliminate 103 to 11 (offset=8, prev_offset=0)
Can eliminate 103 to 7 (offset=32, prev_offset=32)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can't eliminate 102 to 11 (offset=0, prev_offset=0)
Can eliminate 102 to 7 (offset=24, prev_offset=24)
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 31
changing reg in insn 33
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 34
changing reg in insn 51
changing reg in insn 51
changing reg in insn 55
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
deleting insn with uid = 51.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 30.


_sbrk

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [r7] 13 [sp]
;;  eh block artificial uses 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 7 [r7] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={3d,4u} r1={2d} r2={9d,7u} r3={19d,16u} r7={1d,16u} r12={2d} r13={1d,8u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={3d,2u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 186{132d,54u,0e} in 39{38 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 0 [r0] 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 115 125 126 127
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [3 incr+0 S4 A32])
        (reg:SI 0 r0 [ incr ])) "../Src/sysmem.c":54:1 977 {*thumb2_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 2 r2 [orig:113 _estack.0_1 ] [113])
        (symbol_ref:SI ("_estack") [flags 0x40]  <var_decl 00000000059b4a20 _estack>)) "../Src/sysmem.c":58:32 977 {*thumb2_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 3 r3 [orig:114 _Min_Stack_Size.1_2 ] [114])
        (symbol_ref:SI ("_Min_Stack_Size") [flags 0x40]  <var_decl 00000000059b4ab0 _Min_Stack_Size>)) "../Src/sysmem.c":58:53 977 {*thumb2_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 3 r3 [125])
        (minus:SI (reg:SI 2 r2 [orig:113 _estack.0_1 ] [113])
            (reg:SI 3 r3 [orig:114 _Min_Stack_Size.1_2 ] [114]))) "../Src/sysmem.c":58:18 45 {*arm_subsi3_insn}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 20 [0x14])) [2 stack_limit+0 S4 A32])
        (reg:SI 3 r3 [125])) "../Src/sysmem.c":58:18 977 {*thumb2_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 3 r3 [126])
        (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 20 [0x14])) [2 stack_limit+0 S4 A32])) "../Src/sysmem.c":59:18 977 {*thumb2_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 16 [0x10])) [1 max_heap+0 S4 A32])
        (reg:SI 3 r3 [126])) "../Src/sysmem.c":59:18 977 {*thumb2_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 3 r3 [127])
        (symbol_ref:SI ("__sbrk_heap_end") [flags 0x2]  <var_decl 00000000059b4900 __sbrk_heap_end>)) "../Src/sysmem.c":63:12 977 {*thumb2_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 3 r3 [orig:115 __sbrk_heap_end.2_3 ] [115])
        (mem/f/c:SI (reg/f:SI 3 r3 [127]) [1 __sbrk_heap_end+0 S4 A32])) "../Src/sysmem.c":63:12 977 {*thumb2_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:CC 100 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:115 __sbrk_heap_end.2_3 ] [115])
            (const_int 0 [0]))) "../Src/sysmem.c":63:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "../Src/sysmem.c":63:6 273 {arm_cond_branch}
     (nil)
 -> 20)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 128 129
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:SI 3 r3 [128])
        (symbol_ref:SI ("__sbrk_heap_end") [flags 0x2]  <var_decl 00000000059b4900 __sbrk_heap_end>)) "../Src/sysmem.c":65:21 977 {*thumb2_movsi_insn}
     (nil))
(insn 18 17 19 3 (set (reg/f:SI 2 r2 [129])
        (symbol_ref:SI ("_end") [flags 0x40]  <var_decl 00000000059b4990 _end>)) "../Src/sysmem.c":65:21 977 {*thumb2_movsi_insn}
     (nil))
(insn 19 18 20 3 (set (mem/f/c:SI (reg/f:SI 3 r3 [128]) [1 __sbrk_heap_end+0 S4 A32])
        (reg/f:SI 2 r2 [129])) "../Src/sysmem.c":65:21 977 {*thumb2_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 118 130 131
(code_label 20 19 21 4 2 (nil) [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:SI 3 r3 [130])
        (symbol_ref:SI ("__sbrk_heap_end") [flags 0x2]  <var_decl 00000000059b4900 __sbrk_heap_end>)) "../Src/sysmem.c":69:23 977 {*thumb2_movsi_insn}
     (nil))
(insn 23 22 24 4 (set (reg/f:SI 2 r2 [orig:116 __sbrk_heap_end.3_4 ] [116])
        (mem/f/c:SI (reg/f:SI 3 r3 [130]) [1 __sbrk_heap_end+0 S4 A32])) "../Src/sysmem.c":69:23 977 {*thumb2_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg:SI 3 r3 [orig:117 incr.4_5 ] [117])
        (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [3 incr+0 S4 A32])) "../Src/sysmem.c":69:23 977 {*thumb2_movsi_insn}
     (nil))
(insn 25 24 26 4 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (plus:SI (reg:SI 3 r3 [orig:117 incr.4_5 ] [117])
            (reg/f:SI 2 r2 [orig:116 __sbrk_heap_end.3_4 ] [116]))) "../Src/sysmem.c":69:23 7 {*arm_addsi3}
     (nil))
(insn 26 25 27 4 (set (reg:SI 2 r2 [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 16 [0x10])) [1 max_heap+0 S4 A32])) "../Src/sysmem.c":69:6 977 {*thumb2_movsi_insn}
     (nil))
(insn 27 26 28 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 2 r2 [131])
            (reg/f:SI 3 r3 [orig:118 _6 ] [118]))) "../Src/sysmem.c":69:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 28 27 29 4 (set (pc)
        (if_then_else (geu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "../Src/sysmem.c":69:6 273 {arm_cond_branch}
     (nil)
 -> 37)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 119 123 132
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 30 29 31 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__errno") [flags 0x41]  <function_decl 0000000005d67b00 __errno>) [0 __errno S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/sysmem.c":71:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 31 30 32 5 (set (reg/f:SI 3 r3 [orig:119 _7 ] [119])
        (reg:SI 0 r0)) "../Src/sysmem.c":71:5 977 {*thumb2_movsi_insn}
     (nil))
(insn 32 31 33 5 (set (reg:SI 2 r2 [132])
        (const_int 12 [0xc])) "../Src/sysmem.c":71:11 977 {*thumb2_movsi_insn}
     (nil))
(insn 33 32 34 5 (set (mem:SI (reg/f:SI 3 r3 [orig:119 _7 ] [119]) [3 *_7+0 S4 A32])
        (reg:SI 2 r2 [132])) "../Src/sysmem.c":71:11 977 {*thumb2_movsi_insn}
     (nil))
(insn 34 33 58 5 (set (reg/f:SI 3 r3 [orig:123 _11 ] [123])
        (const_int -1 [0xffffffffffffffff])) "../Src/sysmem.c":72:12 977 {*thumb2_movsi_insn}
     (nil))
(jump_insn 58 34 59 5 (set (pc)
        (label_ref 49)) "../Src/sysmem.c":72:12 284 {*arm_jump}
     (nil)
 -> 49)
;;  succ:       7 [always] 
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp] 123

(barrier 59 58 37)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 120 121 122 123 133 134 135 136
(code_label 37 59 38 6 3 (nil) [1 uses])
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:SI 3 r3 [133])
        (symbol_ref:SI ("__sbrk_heap_end") [flags 0x2]  <var_decl 00000000059b4900 __sbrk_heap_end>)) "../Src/sysmem.c":75:17 977 {*thumb2_movsi_insn}
     (nil))
(insn 40 39 41 6 (set (reg/f:SI 3 r3 [134])
        (mem/f/c:SI (reg/f:SI 3 r3 [133]) [1 __sbrk_heap_end+0 S4 A32])) "../Src/sysmem.c":75:17 977 {*thumb2_movsi_insn}
     (nil))
(insn 41 40 42 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 12 [0xc])) [1 prev_heap_end+0 S4 A32])
        (reg/f:SI 3 r3 [134])) "../Src/sysmem.c":75:17 977 {*thumb2_movsi_insn}
     (nil))
(insn 42 41 43 6 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("__sbrk_heap_end") [flags 0x2]  <var_decl 00000000059b4900 __sbrk_heap_end>)) "../Src/sysmem.c":76:19 977 {*thumb2_movsi_insn}
     (nil))
(insn 43 42 44 6 (set (reg/f:SI 2 r2 [orig:120 __sbrk_heap_end.5_8 ] [120])
        (mem/f/c:SI (reg/f:SI 3 r3 [135]) [1 __sbrk_heap_end+0 S4 A32])) "../Src/sysmem.c":76:19 977 {*thumb2_movsi_insn}
     (nil))
(insn 44 43 45 6 (set (reg:SI 3 r3 [orig:121 incr.6_9 ] [121])
        (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [3 incr+0 S4 A32])) "../Src/sysmem.c":76:19 977 {*thumb2_movsi_insn}
     (nil))
(insn 45 44 46 6 (set (reg/f:SI 3 r3 [orig:122 _10 ] [122])
        (plus:SI (reg:SI 3 r3 [orig:121 incr.6_9 ] [121])
            (reg/f:SI 2 r2 [orig:120 __sbrk_heap_end.5_8 ] [120]))) "../Src/sysmem.c":76:19 7 {*arm_addsi3}
     (nil))
(insn 46 45 47 6 (set (reg/f:SI 2 r2 [136])
        (symbol_ref:SI ("__sbrk_heap_end") [flags 0x2]  <var_decl 00000000059b4900 __sbrk_heap_end>)) "../Src/sysmem.c":76:19 977 {*thumb2_movsi_insn}
     (nil))
(insn 47 46 48 6 (set (mem/f/c:SI (reg/f:SI 2 r2 [136]) [1 __sbrk_heap_end+0 S4 A32])
        (reg/f:SI 3 r3 [orig:122 _10 ] [122])) "../Src/sysmem.c":76:19 977 {*thumb2_movsi_insn}
     (nil))
(insn 48 47 49 6 (set (reg/f:SI 3 r3 [orig:123 _11 ] [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 12 [0xc])) [1 prev_heap_end+0 S4 A32])) "../Src/sysmem.c":78:10 977 {*thumb2_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp] 123

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp] 123
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp] 123
;; lr  def 	 0 [r0] 124
(code_label 49 48 50 7 4 (nil) [1 uses])
(note 50 49 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 55 50 56 7 (set (reg/i:SI 0 r0)
        (reg/f:SI 3 r3 [orig:124 <retval> ] [124])) "../Src/sysmem.c":79:1 977 {*thumb2_movsi_insn}
     (nil))
(insn 56 55 60 7 (use (reg/i:SI 0 r0)) "../Src/sysmem.c":79:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

(note 60 56 0 NOTE_INSN_DELETED)
