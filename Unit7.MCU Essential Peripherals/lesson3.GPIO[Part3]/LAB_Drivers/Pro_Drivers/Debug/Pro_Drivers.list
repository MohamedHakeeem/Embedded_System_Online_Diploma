
Pro_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000578  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a8  080006b0  000106b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006a8  080006a8  000106b0  2**0
                  CONTENTS
  4 .ARM          00000000  080006a8  080006a8  000106b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a8  080006b0  000106b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006b0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000106b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000076d  00000000  00000000  000106d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b6  00000000  00000000  00010e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000004c0  00000000  00000000  000110fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000115c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  00011688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001dff  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001384  00000000  00000000  00013527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007dcd  00000000  00000000  000148ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001c678  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000026c  00000000  00000000  0001c6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000690 	.word	0x08000690

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000690 	.word	0x08000690

08000170 <MCAL_GPIO_Enable_ClocK>:
 * @retval -Not
 * Note-.....
 */

void MCAL_GPIO_Enable_ClocK(GPIO_TypedDef* GPIOx)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if(  GPIOx ==  GPIOA)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4a17      	ldr	r2, [pc, #92]	; (80001d8 <MCAL_GPIO_Enable_ClocK+0x68>)
 800017c:	4293      	cmp	r3, r2
 800017e:	d106      	bne.n	800018e <MCAL_GPIO_Enable_ClocK+0x1e>
	{
		GPIOA_CLOCK_ENABLE;
 8000180:	4b16      	ldr	r3, [pc, #88]	; (80001dc <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000186:	f043 0304 	orr.w	r3, r3, #4
 800018a:	6193      	str	r3, [r2, #24]
	}
	else
	{
		//DoNothing
	}
}
 800018c:	e01f      	b.n	80001ce <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOB)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4a13      	ldr	r2, [pc, #76]	; (80001e0 <MCAL_GPIO_Enable_ClocK+0x70>)
 8000192:	4293      	cmp	r3, r2
 8000194:	d106      	bne.n	80001a4 <MCAL_GPIO_Enable_ClocK+0x34>
		GPIOB_CLOCK_ENABLE;
 8000196:	4b11      	ldr	r3, [pc, #68]	; (80001dc <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	4a10      	ldr	r2, [pc, #64]	; (80001dc <MCAL_GPIO_Enable_ClocK+0x6c>)
 800019c:	f043 0308 	orr.w	r3, r3, #8
 80001a0:	6193      	str	r3, [r2, #24]
}
 80001a2:	e014      	b.n	80001ce <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOC)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <MCAL_GPIO_Enable_ClocK+0x74>)
 80001a8:	4293      	cmp	r3, r2
 80001aa:	d106      	bne.n	80001ba <MCAL_GPIO_Enable_ClocK+0x4a>
		GPIOC_CLOCK_ENABLE;
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <MCAL_GPIO_Enable_ClocK+0x6c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <MCAL_GPIO_Enable_ClocK+0x6c>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
}
 80001b8:	e009      	b.n	80001ce <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOD)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4a0a      	ldr	r2, [pc, #40]	; (80001e8 <MCAL_GPIO_Enable_ClocK+0x78>)
 80001be:	4293      	cmp	r3, r2
 80001c0:	d105      	bne.n	80001ce <MCAL_GPIO_Enable_ClocK+0x5e>
		GPIOD_CLOCK_ENABLE;
 80001c2:	4b06      	ldr	r3, [pc, #24]	; (80001dc <MCAL_GPIO_Enable_ClocK+0x6c>)
 80001c4:	699b      	ldr	r3, [r3, #24]
 80001c6:	4a05      	ldr	r2, [pc, #20]	; (80001dc <MCAL_GPIO_Enable_ClocK+0x6c>)
 80001c8:	f043 0320 	orr.w	r3, r3, #32
 80001cc:	6193      	str	r3, [r2, #24]
}
 80001ce:	bf00      	nop
 80001d0:	370c      	adds	r7, #12
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40010800 	.word	0x40010800
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010c00 	.word	0x40010c00
 80001e4:	40011000 	.word	0x40011000
 80001e8:	40011400 	.word	0x40011400

080001ec <Get_Pos_CRLH>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio
 * @retval -Suitable Pos for Config_Register [uint8_t]
 * */

uint8_t Get_Pos_CRLH(uint16_t PinNumber)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80001f6:	88fb      	ldrh	r3, [r7, #6]
 80001f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001fc:	f000 80a5 	beq.w	800034a <Get_Pos_CRLH+0x15e>
 8000200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000204:	f300 80a3 	bgt.w	800034e <Get_Pos_CRLH+0x162>
 8000208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800020c:	f000 809b 	beq.w	8000346 <Get_Pos_CRLH+0x15a>
 8000210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000214:	f300 809b 	bgt.w	800034e <Get_Pos_CRLH+0x162>
 8000218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800021c:	f000 8091 	beq.w	8000342 <Get_Pos_CRLH+0x156>
 8000220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000224:	f300 8093 	bgt.w	800034e <Get_Pos_CRLH+0x162>
 8000228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800022c:	f000 8087 	beq.w	800033e <Get_Pos_CRLH+0x152>
 8000230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000234:	f300 808b 	bgt.w	800034e <Get_Pos_CRLH+0x162>
 8000238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800023c:	d07d      	beq.n	800033a <Get_Pos_CRLH+0x14e>
 800023e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000242:	f300 8084 	bgt.w	800034e <Get_Pos_CRLH+0x162>
 8000246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800024a:	d074      	beq.n	8000336 <Get_Pos_CRLH+0x14a>
 800024c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000250:	dc7d      	bgt.n	800034e <Get_Pos_CRLH+0x162>
 8000252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000256:	d06c      	beq.n	8000332 <Get_Pos_CRLH+0x146>
 8000258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800025c:	dc77      	bgt.n	800034e <Get_Pos_CRLH+0x162>
 800025e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000262:	d064      	beq.n	800032e <Get_Pos_CRLH+0x142>
 8000264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000268:	dc71      	bgt.n	800034e <Get_Pos_CRLH+0x162>
 800026a:	2b80      	cmp	r3, #128	; 0x80
 800026c:	d05d      	beq.n	800032a <Get_Pos_CRLH+0x13e>
 800026e:	2b80      	cmp	r3, #128	; 0x80
 8000270:	dc6d      	bgt.n	800034e <Get_Pos_CRLH+0x162>
 8000272:	2b20      	cmp	r3, #32
 8000274:	dc48      	bgt.n	8000308 <Get_Pos_CRLH+0x11c>
 8000276:	2b00      	cmp	r3, #0
 8000278:	dd69      	ble.n	800034e <Get_Pos_CRLH+0x162>
 800027a:	3b01      	subs	r3, #1
 800027c:	2b1f      	cmp	r3, #31
 800027e:	d866      	bhi.n	800034e <Get_Pos_CRLH+0x162>
 8000280:	a201      	add	r2, pc, #4	; (adr r2, 8000288 <Get_Pos_CRLH+0x9c>)
 8000282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000286:	bf00      	nop
 8000288:	0800030f 	.word	0x0800030f
 800028c:	08000313 	.word	0x08000313
 8000290:	0800034f 	.word	0x0800034f
 8000294:	08000317 	.word	0x08000317
 8000298:	0800034f 	.word	0x0800034f
 800029c:	0800034f 	.word	0x0800034f
 80002a0:	0800034f 	.word	0x0800034f
 80002a4:	0800031b 	.word	0x0800031b
 80002a8:	0800034f 	.word	0x0800034f
 80002ac:	0800034f 	.word	0x0800034f
 80002b0:	0800034f 	.word	0x0800034f
 80002b4:	0800034f 	.word	0x0800034f
 80002b8:	0800034f 	.word	0x0800034f
 80002bc:	0800034f 	.word	0x0800034f
 80002c0:	0800034f 	.word	0x0800034f
 80002c4:	0800031f 	.word	0x0800031f
 80002c8:	0800034f 	.word	0x0800034f
 80002cc:	0800034f 	.word	0x0800034f
 80002d0:	0800034f 	.word	0x0800034f
 80002d4:	0800034f 	.word	0x0800034f
 80002d8:	0800034f 	.word	0x0800034f
 80002dc:	0800034f 	.word	0x0800034f
 80002e0:	0800034f 	.word	0x0800034f
 80002e4:	0800034f 	.word	0x0800034f
 80002e8:	0800034f 	.word	0x0800034f
 80002ec:	0800034f 	.word	0x0800034f
 80002f0:	0800034f 	.word	0x0800034f
 80002f4:	0800034f 	.word	0x0800034f
 80002f8:	0800034f 	.word	0x0800034f
 80002fc:	0800034f 	.word	0x0800034f
 8000300:	0800034f 	.word	0x0800034f
 8000304:	08000323 	.word	0x08000323
 8000308:	2b40      	cmp	r3, #64	; 0x40
 800030a:	d00c      	beq.n	8000326 <Get_Pos_CRLH+0x13a>
 800030c:	e01f      	b.n	800034e <Get_Pos_CRLH+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800030e:	2300      	movs	r3, #0
 8000310:	e01e      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000312:	2304      	movs	r3, #4
 8000314:	e01c      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000316:	2308      	movs	r3, #8
 8000318:	e01a      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800031a:	230c      	movs	r3, #12
 800031c:	e018      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800031e:	2310      	movs	r3, #16
 8000320:	e016      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000322:	2314      	movs	r3, #20
 8000324:	e014      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000326:	2318      	movs	r3, #24
 8000328:	e012      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800032a:	231c      	movs	r3, #28
 800032c:	e010      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 800032e:	2300      	movs	r3, #0
 8000330:	e00e      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000332:	2304      	movs	r3, #4
 8000334:	e00c      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000336:	2308      	movs	r3, #8
 8000338:	e00a      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800033a:	230c      	movs	r3, #12
 800033c:	e008      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 800033e:	2310      	movs	r3, #16
 8000340:	e006      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000342:	2314      	movs	r3, #20
 8000344:	e004      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000346:	2318      	movs	r3, #24
 8000348:	e002      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 800034a:	231c      	movs	r3, #28
 800034c:	e000      	b.n	8000350 <Get_Pos_CRLH+0x164>
		break;

	default:
		return 0;
 800034e:	2300      	movs	r3, #0


	}

}
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <MCAL_GPIO_Init>:
 * @retval -Not
 * Note-You must Create Instant from "GPIO_PinConfig_t" Structure,
 * Before using This func "MCAL_GPIO_Init" and pass it to @param [in] -Address of the PinConfig
 */
void MCAL_GPIO_Init(GPIO_TypedDef* GPIOx, GPIO_PinConfig_t* PinConfig )
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]

	volatile uint32_t* Reg_Config= NULL;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]

	Reg_Config = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &(GPIOx->CRL):  &(GPIOx->CRH) ;
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	2bff      	cmp	r3, #255	; 0xff
 8000370:	d801      	bhi.n	8000376 <MCAL_GPIO_Init+0x1a>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	e001      	b.n	800037a <MCAL_GPIO_Init+0x1e>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3304      	adds	r3, #4
 800037a:	60fb      	str	r3, [r7, #12]
	*Reg_Config &= ~(0xF << Get_Pos_CRLH(PinConfig->GPIO_PinNumber) );
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff33 	bl	80001ec <Get_Pos_CRLH>
 8000386:	4603      	mov	r3, r0
 8000388:	461a      	mov	r2, r3
 800038a:	230f      	movs	r3, #15
 800038c:	4093      	lsls	r3, r2
 800038e:	43da      	mvns	r2, r3
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	401a      	ands	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]


	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	2b04      	cmp	r3, #4
 80003a0:	d00b      	beq.n	80003ba <MCAL_GPIO_Init+0x5e>
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	2b05      	cmp	r3, #5
 80003a8:	d007      	beq.n	80003ba <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	685b      	ldr	r3, [r3, #4]
	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 80003ae:	2b06      	cmp	r3, #6
 80003b0:	d003      	beq.n	80003ba <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	2b07      	cmp	r3, #7
 80003b8:	d117      	bne.n	80003ea <MCAL_GPIO_Init+0x8e>
	{
		*Reg_Config |= (((((PinConfig->GPIO_Mode - 4) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	3b04      	subs	r3, #4
 80003c0:	009a      	lsls	r2, r3, #2
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	4313      	orrs	r3, r2
 80003c8:	f003 040f 	and.w	r4, r3, #15
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff0b 	bl	80001ec <Get_Pos_CRLH>
 80003d6:	4603      	mov	r3, r0
 80003d8:	fa04 f203 	lsl.w	r2, r4, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	431a      	orrs	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	bf00      	nop

		}

	}

}
 80003e8:	e058      	b.n	800049c <MCAL_GPIO_Init+0x140>
		if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_up )
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d11c      	bne.n	800042c <MCAL_GPIO_Init+0xd0>
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	8812      	ldrh	r2, [r2, #0]
 80003fa:	431a      	orrs	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	009a      	lsls	r2, r3, #2
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	4313      	orrs	r3, r2
 800040c:	f003 040f 	and.w	r4, r3, #15
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff fee9 	bl	80001ec <Get_Pos_CRLH>
 800041a:	4603      	mov	r3, r0
 800041c:	fa04 f203 	lsl.w	r2, r4, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	431a      	orrs	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	601a      	str	r2, [r3, #0]
}
 800042a:	e037      	b.n	800049c <MCAL_GPIO_Init+0x140>
		else if (PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_down)
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	2b03      	cmp	r3, #3
 8000432:	d11e      	bne.n	8000472 <MCAL_GPIO_Init+0x116>
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	43d2      	mvns	r2, r2
 800043e:	401a      	ands	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode - 1) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	3b01      	subs	r3, #1
 800044a:	009a      	lsls	r2, r3, #2
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4313      	orrs	r3, r2
 8000452:	f003 040f 	and.w	r4, r3, #15
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff fec6 	bl	80001ec <Get_Pos_CRLH>
 8000460:	4603      	mov	r3, r0
 8000462:	fa04 f203 	lsl.w	r2, r4, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	431a      	orrs	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	601a      	str	r2, [r3, #0]
}
 8000470:	e014      	b.n	800049c <MCAL_GPIO_Init+0x140>
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	009a      	lsls	r2, r3, #2
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4313      	orrs	r3, r2
 800047e:	f003 040f 	and.w	r4, r3, #15
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff feb0 	bl	80001ec <Get_Pos_CRLH>
 800048c:	4603      	mov	r3, r0
 800048e:	fa04 f203 	lsl.w	r2, r4, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	431a      	orrs	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd90      	pop	{r4, r7, pc}

080004a4 <MCAL_GPIO_ReadPin>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio,
 * @retval -State of Pin, 0 or 1
 * Note-..........................................................
 */
uint8_t  MCAL_GPIO_ReadPin(GPIO_TypedDef* GPIOx,uint16_t PinNumber )
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET) return (uint8_t)GPIO_PIN_SET;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689a      	ldr	r2, [r3, #8]
 80004b4:	887b      	ldrh	r3, [r7, #2]
 80004b6:	4013      	ands	r3, r2
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MCAL_GPIO_ReadPin+0x1c>
 80004bc:	2301      	movs	r3, #1
 80004be:	e000      	b.n	80004c2 <MCAL_GPIO_ReadPin+0x1e>
	else return (uint8_t)GPIO_PIN_RESET;
 80004c0:	2300      	movs	r3, #0

}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <MCAL_GPIO_TogglePin>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio,
 * @retval -Not
 * Note-..........................................................
 */
void MCAL_GPIO_TogglePin(GPIO_TypedDef* GPIOx,uint16_t PinNumber)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (uint32_t)PinNumber;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	887b      	ldrh	r3, [r7, #2]
 80004de:	405a      	eors	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
	...

080004f0 <GPIOX_Init>:




void GPIOX_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
	//Enable RCC_CLOCK PORTA , 	//Enable RCC_CLOCK PORTB
	MCAL_GPIO_Enable_ClocK(GPIOA);
 80004f6:	481c      	ldr	r0, [pc, #112]	; (8000568 <GPIOX_Init+0x78>)
 80004f8:	f7ff fe3a 	bl	8000170 <MCAL_GPIO_Enable_ClocK>
	MCAL_GPIO_Enable_ClocK(GPIOB);
 80004fc:	481b      	ldr	r0, [pc, #108]	; (800056c <GPIOX_Init+0x7c>)
 80004fe:	f7ff fe37 	bl	8000170 <MCAL_GPIO_Enable_ClocK>

	//PORTA PIN1, PIN13  AS Input [HIGH Z Impedance [Floating]]
	GPIO_PinConfig_t gpio_pinconfig;

	gpio_pinconfig.GPIO_PinNumber = GPIO_PIN_1;
 8000502:	2302      	movs	r3, #2
 8000504:	80bb      	strh	r3, [r7, #4]
	gpio_pinconfig.GPIO_Mode = GPIO_Mode_Inp_Floating;
 8000506:	2301      	movs	r3, #1
 8000508:	60bb      	str	r3, [r7, #8]
	gpio_pinconfig.GPIO_Speed = GPIO_Speed_Reset_State;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &gpio_pinconfig);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4619      	mov	r1, r3
 8000512:	4815      	ldr	r0, [pc, #84]	; (8000568 <GPIOX_Init+0x78>)
 8000514:	f7ff ff22 	bl	800035c <MCAL_GPIO_Init>


	gpio_pinconfig.GPIO_PinNumber = GPIO_PIN_13;
 8000518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051c:	80bb      	strh	r3, [r7, #4]
	gpio_pinconfig.GPIO_Mode = GPIO_Mode_Inp_Floating;
 800051e:	2301      	movs	r3, #1
 8000520:	60bb      	str	r3, [r7, #8]
	gpio_pinconfig.GPIO_Speed = GPIO_Speed_Reset_State;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &gpio_pinconfig);
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4619      	mov	r1, r3
 800052a:	480f      	ldr	r0, [pc, #60]	; (8000568 <GPIOX_Init+0x78>)
 800052c:	f7ff ff16 	bl	800035c <MCAL_GPIO_Init>


	//PORTB PIN1, PIN13  AS Output [Push Pull Output] ,  max speed 10 MHz.
	gpio_pinconfig.GPIO_PinNumber = GPIO_PIN_1;
 8000530:	2302      	movs	r3, #2
 8000532:	80bb      	strh	r3, [r7, #4]
	gpio_pinconfig.GPIO_Mode = GPIO_Mode_Out_push_pull;
 8000534:	2304      	movs	r3, #4
 8000536:	60bb      	str	r3, [r7, #8]
	gpio_pinconfig.GPIO_Speed = GPIO_Speed_10MHz;
 8000538:	2301      	movs	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &gpio_pinconfig);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4619      	mov	r1, r3
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <GPIOX_Init+0x7c>)
 8000542:	f7ff ff0b 	bl	800035c <MCAL_GPIO_Init>

	gpio_pinconfig.GPIO_PinNumber = GPIO_PIN_13;
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	80bb      	strh	r3, [r7, #4]
	gpio_pinconfig.GPIO_Mode = GPIO_Mode_Out_push_pull;
 800054c:	2304      	movs	r3, #4
 800054e:	60bb      	str	r3, [r7, #8]
	gpio_pinconfig.GPIO_Speed = GPIO_Speed_10MHz;
 8000550:	2301      	movs	r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &gpio_pinconfig);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4619      	mov	r1, r3
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <GPIOX_Init+0x7c>)
 800055a:	f7ff feff 	bl	800035c <MCAL_GPIO_Init>


}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010800 	.word	0x40010800
 800056c:	40010c00 	.word	0x40010c00

08000570 <Wait_s>:




void Wait_s(int Time_S)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	volatile uint32_t  i;
	for(i=0;i<Time_S;i++);
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	e002      	b.n	8000584 <Wait_s+0x14>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	3301      	adds	r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	d3f8      	bcc.n	800057e <Wait_s+0xe>
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <main>:


int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

	GPIOX_Init();
 800059c:	f7ff ffa8 	bl	80004f0 <GPIOX_Init>

	while(1)
	{
		//PA1 is connected to External PUR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 80005a0:	2102      	movs	r1, #2
 80005a2:	4812      	ldr	r0, [pc, #72]	; (80005ec <main+0x54>)
 80005a4:	f7ff ff7e 	bl	80004a4 <MCAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10b      	bne.n	80005c6 <main+0x2e>
		{

			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1 );
 80005ae:	2102      	movs	r1, #2
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x58>)
 80005b2:	f7ff ff8b 	bl	80004cc <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 80005b6:	bf00      	nop
 80005b8:	2102      	movs	r1, #2
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <main+0x54>)
 80005bc:	f7ff ff72 	bl	80004a4 <MCAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f8      	beq.n	80005b8 <main+0x20>
		}

		//PA13 is connected to External PDR
		if(MCAL_GPIO_ReadPin(GPIOA,GPIO_PIN_13) == 1)
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x54>)
 80005cc:	f7ff ff6a 	bl	80004a4 <MCAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d104      	bne.n	80005e0 <main+0x48>
		{

			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13 );
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <main+0x58>)
 80005dc:	f7ff ff76 	bl	80004cc <MCAL_GPIO_TogglePin>

		}


		Wait_s(10000);
 80005e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80005e4:	f7ff ffc4 	bl	8000570 <Wait_s>
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 80005e8:	e7da      	b.n	80005a0 <main+0x8>
 80005ea:	bf00      	nop
 80005ec:	40010800 	.word	0x40010800
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f000 f811 	bl	8000648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff ffb7 	bl	8000598 <main>

0800062a <LoopForever>:

LoopForever:
  b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000638:	080006b0 	.word	0x080006b0
  ldr r2, =_sbss
 800063c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000640:	2000001c 	.word	0x2000001c

08000644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_2_IRQHandler>
	...

08000648 <__libc_init_array>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	2600      	movs	r6, #0
 800064c:	4d0c      	ldr	r5, [pc, #48]	; (8000680 <__libc_init_array+0x38>)
 800064e:	4c0d      	ldr	r4, [pc, #52]	; (8000684 <__libc_init_array+0x3c>)
 8000650:	1b64      	subs	r4, r4, r5
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	42a6      	cmp	r6, r4
 8000656:	d109      	bne.n	800066c <__libc_init_array+0x24>
 8000658:	f000 f81a 	bl	8000690 <_init>
 800065c:	2600      	movs	r6, #0
 800065e:	4d0a      	ldr	r5, [pc, #40]	; (8000688 <__libc_init_array+0x40>)
 8000660:	4c0a      	ldr	r4, [pc, #40]	; (800068c <__libc_init_array+0x44>)
 8000662:	1b64      	subs	r4, r4, r5
 8000664:	10a4      	asrs	r4, r4, #2
 8000666:	42a6      	cmp	r6, r4
 8000668:	d105      	bne.n	8000676 <__libc_init_array+0x2e>
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000670:	4798      	blx	r3
 8000672:	3601      	adds	r6, #1
 8000674:	e7ee      	b.n	8000654 <__libc_init_array+0xc>
 8000676:	f855 3b04 	ldr.w	r3, [r5], #4
 800067a:	4798      	blx	r3
 800067c:	3601      	adds	r6, #1
 800067e:	e7f2      	b.n	8000666 <__libc_init_array+0x1e>
 8000680:	080006a8 	.word	0x080006a8
 8000684:	080006a8 	.word	0x080006a8
 8000688:	080006a8 	.word	0x080006a8
 800068c:	080006ac 	.word	0x080006ac

08000690 <_init>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	bf00      	nop
 8000694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000696:	bc08      	pop	{r3}
 8000698:	469e      	mov	lr, r3
 800069a:	4770      	bx	lr

0800069c <_fini>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	bf00      	nop
 80006a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a2:	bc08      	pop	{r3}
 80006a4:	469e      	mov	lr, r3
 80006a6:	4770      	bx	lr
