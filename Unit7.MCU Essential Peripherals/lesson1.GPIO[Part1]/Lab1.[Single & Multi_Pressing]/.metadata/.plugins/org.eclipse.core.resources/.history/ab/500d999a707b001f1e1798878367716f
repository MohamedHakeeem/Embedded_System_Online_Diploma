/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>



#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



typedef volatile unsigned int vuint32_t ;


#define SET_BIT(Register,Bit)       (Register |=   (1 << Bit))
#define Clear_BIT(Register,Bit)     (Register &= ~ (1 << Bit))
#define Toggle_BIT(Register,Bit)    (Register ^=   (1 << Bit))
#define Read_BIT(Register,Bit)      (Register  >> Bit) &  0x1)


//RCC Register address
#define RCC_BASE  0X40021000
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_BASE + 0x18)
#define RCC_CR    *(volatile uint32_t *)(RCC_BASE + 0x00)
#define RCC_CFGR    *(volatile uint32_t *)(RCC_BASE + 0x04)


// GPIOA Register address
#define GPIOA_BASE 0x40010800
#define GPIOA_CRL *(volatile uint32_t *)(GPIOA_BASE + 0x00)
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_IDR *(volatile uint32_t *)(GPIOA_BASE + 0x08)
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)



// GPIOB Register address
#define GPIOB_BASE 0x40010C00
#define GPIOB_CRL *(volatile uint32_t *)(GPIOB_BASE + 0x00)
#define GPIOB_CRH *(volatile uint32_t *)(GPIOB_BASE + 0x04)
#define GPIOB_IDR *(volatile uint32_t *)(GPIOB_BASE + 0x08)
#define GPIOB_ODR *(volatile uint32_t *)(GPIOB_BASE + 0x0C)






void GPIO_Init(void)
{

	//Enable RCC_CLOCK PORTA
	RCC_APB2ENR |= (1 << 2);

	//Enable RCC_CLOCK PORTB
	RCC_APB2ENR |= (1 << 3);



//PORTA PIN1, PIN13  AS Input [HIGH Z Impedance [Floating]]
	GPIOA_CRL = 0x00;
	GPIOA_CRL |= (0b01 << 6);








}








int main(void)
{

	GPIO_Init();
	EXTI0_Init();

	while(1)
	{



	}


}


void EXTI0_IRQHandler(void)
{
	//Toggle Pin13---------> PortA
	GPIOA_ODR ^= (1<<13) ;


	//PRx: Pending bit, This bit is set when the selected edge event arrives on the external interrupt line. This bit is
	//cleared by writing a ‘1’ into the bit.
	EXTI_PR |= (1 << 0);

}




